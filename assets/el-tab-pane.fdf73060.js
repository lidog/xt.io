import{bD as _e,a$ as Ne,bE as Ce,bm as Te,ac as I,ad as Z,aZ as ne,Z as F,J as X,aj as Y,$ as K,a as T,P as R,R as Q,aH as le,o as oe,c as re,a2 as ie,u as k,ab as Pe,aa as ce,T as H,bF as we,bG as $e,K as L,aw as ue,ax as Ee,b,ao as V,bH as Se,aK as xe,b9 as ke,bk as D,bc as Be,ae as Oe,bI as Re,a6 as de,G as ze,H as Ae,L as te,_ as Fe,bJ as ae,r as Le,ay as Me,a3 as Ve,aI as De,a8 as Ie,ag as Ke,ah as He}from"./index.6930c6e0.js";import{q as be}from"./event.dd67551c.js";const O=e=>_e(e),Ue=(e,n,v)=>Ce(e.subTree).filter(t=>{var l;return Te(t)&&((l=t.type)==null?void 0:l.name)===n&&!!t.component}).map(t=>t.component.uid).map(t=>v[t]).filter(t=>!!t),qe=(e,n)=>{const v={},P=Ne([]);return{children:P,addChild:l=>{v[l.uid]=l,P.value=Ue(e,n,v)},removeChild:l=>{delete v[l],P.value=P.value.filter(E=>E.uid!==l)}}},U=Symbol("tabsRootContextKey"),je=I({tabs:{type:Z(Array),default:()=>ne([])}}),ve="ElTabBar",Ge=F({name:ve}),Je=F({...Ge,props:je,setup(e,{expose:n}){const v=e,P=H(),i=X(U);i||Y(ve,"<el-tabs><el-tab-bar /></el-tabs>");const t=K("tabs"),l=T(),E=T(),u=()=>{let f=0,m=0;const d=["top","bottom"].includes(i.props.tabPosition)?"width":"height",o=d==="width"?"x":"y",B=o==="x"?"left":"top";return v.tabs.every(S=>{var $,a;const h=(a=($=P.parent)==null?void 0:$.refs)==null?void 0:a[`tab-${S.uid}`];if(!h)return!1;if(!S.active)return!0;f=h[`offset${O(B)}`],m=h[`client${O(d)}`];const _=window.getComputedStyle(h);return d==="width"&&(v.tabs.length>1&&(m-=Number.parseFloat(_.paddingLeft)+Number.parseFloat(_.paddingRight)),f+=Number.parseFloat(_.paddingLeft)),!1}),{[d]:`${m}px`,transform:`translate${O(o)}(${f}px)`}},y=()=>E.value=u();return R(()=>v.tabs,async()=>{await Q(),y()},{immediate:!0}),le(l,()=>y()),n({ref:l,update:y}),(f,m)=>(oe(),re("div",{ref_key:"barRef",ref:l,class:ie([k(t).e("active-bar"),k(t).is(k(i).props.tabPosition)]),style:Pe(E.value)},null,6))}});var We=ce(Je,[["__file","/home/runner/work/element-plus/element-plus/packages/components/tabs/src/tab-bar.vue"]]);const Ze=I({panes:{type:Z(Array),default:()=>ne([])},currentName:{type:[String,Number],default:""},editable:Boolean,type:{type:String,values:["card","border-card",""],default:""},stretch:Boolean}),Xe={tabClick:(e,n,v)=>v instanceof Event,tabRemove:(e,n)=>n instanceof Event},se="ElTabNav",Ye=F({name:se,props:Ze,emits:Xe,setup(e,{expose:n,emit:v}){const P=H(),i=X(U);i||Y(se,"<el-tabs><tab-nav /></el-tabs>");const t=K("tabs"),l=we(),E=$e(),u=T(),y=T(),f=T(),m=T(),d=T(!1),o=T(0),B=T(!1),S=T(!0),$=L(()=>["top","bottom"].includes(i.props.tabPosition)?"width":"height"),a=L(()=>({transform:`translate${$.value==="width"?"X":"Y"}(-${o.value}px)`})),h=()=>{if(!u.value)return;const r=u.value[`offset${O($.value)}`],c=o.value;if(!c)return;const s=c>r?c-r:0;o.value=s},_=()=>{if(!u.value||!y.value)return;const r=y.value[`offset${O($.value)}`],c=u.value[`offset${O($.value)}`],s=o.value;if(r-s<=c)return;const N=r-s>c*2?s+c:r-c;o.value=N},z=async()=>{const r=y.value;if(!d.value||!f.value||!u.value||!r)return;await Q();const c=f.value.querySelector(".is-active");if(!c)return;const s=u.value,N=["top","bottom"].includes(i.props.tabPosition),C=c.getBoundingClientRect(),g=s.getBoundingClientRect(),x=N?r.offsetWidth-g.width:r.offsetHeight-g.height,w=o.value;let p=w;N?(C.left<g.left&&(p=w-(g.left-C.left)),C.right>g.right&&(p=w+C.right-g.right)):(C.top<g.top&&(p=w-(g.top-C.top)),C.bottom>g.bottom&&(p=w+(C.bottom-g.bottom))),p=Math.max(p,0),o.value=Math.min(p,x)},M=()=>{var r;if(!y.value||!u.value)return;e.stretch&&((r=m.value)==null||r.update());const c=y.value[`offset${O($.value)}`],s=u.value[`offset${O($.value)}`],N=o.value;s<c?(d.value=d.value||{},d.value.prev=N,d.value.next=N+s<c,c-N<s&&(o.value=c-s)):(d.value=!1,N>0&&(o.value=0))},pe=r=>{const c=r.code,{up:s,down:N,left:C,right:g}=D;if(![s,N,C,g].includes(c))return;const x=Array.from(r.currentTarget.querySelectorAll("[role=tab]:not(.is-disabled)")),w=x.indexOf(r.target);let p;c===C||c===s?w===0?p=x.length-1:p=w-1:w<x.length-1?p=w+1:p=0,x[p].focus({preventScroll:!0}),x[p].click(),ee()},ee=()=>{S.value&&(B.value=!0)},q=()=>B.value=!1;return R(l,r=>{r==="hidden"?S.value=!1:r==="visible"&&setTimeout(()=>S.value=!0,50)}),R(E,r=>{r?setTimeout(()=>S.value=!0,50):S.value=!1}),le(f,M),ue(()=>setTimeout(()=>z(),0)),Ee(()=>M()),n({scrollToActiveTab:z,removeFocus:q}),R(()=>e.panes,()=>P.update(),{flush:"post",deep:!0}),()=>{const r=d.value?[b("span",{class:[t.e("nav-prev"),t.is("disabled",!d.value.prev)],onClick:h},[b(V,null,{default:()=>[b(Se,null,null)]})]),b("span",{class:[t.e("nav-next"),t.is("disabled",!d.value.next)],onClick:_},[b(V,null,{default:()=>[b(xe,null,null)]})])]:null,c=e.panes.map((s,N)=>{var C,g,x,w;const p=s.uid,j=s.props.disabled,G=(g=(C=s.props.name)!=null?C:s.index)!=null?g:`${N}`,J=!j&&(s.isClosable||e.editable);s.index=`${N}`;const he=J?b(V,{class:"is-icon-close",onClick:A=>v("tabRemove",s,A)},{default:()=>[b(ke,null,null)]}):null,ye=((w=(x=s.slots).label)==null?void 0:w.call(x))||s.props.label,ge=!j&&s.active?0:-1;return b("div",{ref:`tab-${p}`,class:[t.e("item"),t.is(i.props.tabPosition),t.is("active",s.active),t.is("disabled",j),t.is("closable",J),t.is("focus",B.value)],id:`tab-${G}`,key:`tab-${p}`,"aria-controls":`pane-${G}`,role:"tab","aria-selected":s.active,tabindex:ge,onFocus:()=>ee(),onBlur:()=>q(),onClick:A=>{q(),v("tabClick",s,G,A)},onKeydown:A=>{J&&(A.code===D.delete||A.code===D.backspace)&&v("tabRemove",s,A)}},[ye,he])});return b("div",{ref:f,class:[t.e("nav-wrap"),t.is("scrollable",!!d.value),t.is(i.props.tabPosition)]},[r,b("div",{class:t.e("nav-scroll"),ref:u},[b("div",{class:[t.e("nav"),t.is(i.props.tabPosition),t.is("stretch",e.stretch&&["top","bottom"].includes(i.props.tabPosition))],ref:y,style:a.value,role:"tablist",onKeydown:pe},[e.type?null:b(We,{ref:m,tabs:[...e.panes]},null),c])])])}}}),Qe=I({type:{type:String,values:["card","border-card",""],default:""},activeName:{type:[String,Number]},closable:Boolean,addable:Boolean,modelValue:{type:[String,Number]},editable:Boolean,tabPosition:{type:String,values:["top","right","bottom","left"],default:"top"},beforeLeave:{type:Z(Function),default:()=>!0},stretch:Boolean}),W=e=>ze(e)||Ae(e),et={[be]:e=>W(e),tabClick:(e,n)=>n instanceof Event,tabChange:e=>W(e),edit:(e,n)=>["remove","add"].includes(n),tabRemove:e=>W(e),tabAdd:()=>!0};var tt=F({name:"ElTabs",props:Qe,emits:et,setup(e,{emit:n,slots:v,expose:P}){var i,t;const l=K("tabs"),{children:E,addChild:u,removeChild:y}=qe(H(),"ElTabPane"),f=T(),m=T((t=(i=e.modelValue)!=null?i:e.activeName)!=null?t:"0"),d=a=>{m.value=a,n(be,a),n("tabChange",a)},o=async a=>{var h,_,z;if(!(m.value===a||te(a)))try{await((h=e.beforeLeave)==null?void 0:h.call(e,a,m.value))!==!1&&(d(a),(z=(_=f.value)==null?void 0:_.removeFocus)==null||z.call(_))}catch{}},B=(a,h,_)=>{a.props.disabled||(o(h),n("tabClick",a,_))},S=(a,h)=>{a.props.disabled||te(a.props.name)||(h.stopPropagation(),n("edit",a.props.name,"remove"),n("tabRemove",a.props.name))},$=()=>{n("edit",void 0,"add"),n("tabAdd")};return Be({from:'"activeName"',replacement:'"model-value" or "v-model"',scope:"ElTabs",version:"2.3.0",ref:"https://element-plus.org/en-US/component/tabs.html#attributes",type:"Attribute"},L(()=>!!e.activeName)),R(()=>e.activeName,a=>o(a)),R(()=>e.modelValue,a=>o(a)),R(m,async()=>{var a;await Q(),(a=f.value)==null||a.scrollToActiveTab()}),Oe(U,{props:e,currentName:m,registerPane:u,unregisterPane:y}),P({currentName:m}),()=>{const a=e.editable||e.addable?b("span",{class:l.e("new-tab"),tabindex:"0",onClick:$,onKeydown:z=>{z.code===D.enter&&$()}},[b(V,{class:l.is("icon-plus")},{default:()=>[b(Re,null,null)]})]):null,h=b("div",{class:[l.e("header"),l.is(e.tabPosition)]},[a,b(Ye,{ref:f,currentName:m.value,editable:e.editable,type:e.type,panes:E.value,stretch:e.stretch,onTabClick:B,onTabRemove:S},null)]),_=b("div",{class:l.e("content")},[de(v,"default")]);return b("div",{class:[l.b(),l.m(e.tabPosition),{[l.m("card")]:e.type==="card",[l.m("border-card")]:e.type==="border-card"}]},[...e.tabPosition!=="bottom"?[h,_]:[_,h]])}}});const at=I({label:{type:String,default:""},name:{type:[String,Number]},closable:Boolean,disabled:Boolean,lazy:Boolean}),st=["id","aria-hidden","aria-labelledby"],fe="ElTabPane",nt=F({name:fe}),lt=F({...nt,props:at,setup(e){const n=e,v=H(),P=Fe(),i=X(U);i||Y(fe,"usage: <el-tabs><el-tab-pane /></el-tabs/>");const t=K("tab-pane"),l=T(),E=L(()=>n.closable||i.props.closable),u=ae(()=>{var o;return i.currentName.value===((o=n.name)!=null?o:l.value)}),y=T(u.value),f=L(()=>{var o;return(o=n.name)!=null?o:l.value}),m=ae(()=>!n.lazy||y.value||u.value);R(u,o=>{o&&(y.value=!0)});const d=Le({uid:v.uid,slots:P,props:n,paneName:f,active:u,index:l,isClosable:E});return ue(()=>{i.registerPane(d)}),Me(()=>{i.unregisterPane(d.uid)}),(o,B)=>k(m)?Ve((oe(),re("div",{key:0,id:`pane-${k(f)}`,class:ie(k(t).b()),role:"tabpanel","aria-hidden":!k(u),"aria-labelledby":`tab-${k(f)}`},[de(o.$slots,"default")],10,st)),[[De,k(u)]]):Ie("v-if",!0)}});var me=ce(lt,[["__file","/home/runner/work/element-plus/element-plus/packages/components/tabs/src/tab-pane.vue"]]);const it=Ke(tt,{TabPane:me}),ct=He(me);export{ct as E,it as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
