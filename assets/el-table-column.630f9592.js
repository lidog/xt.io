import{i as zl,e as Ne,f as jt,g as Rn,h as Pt,S as et,j as Ee,k as tt,l as _l,M as Vl,m as Ln,t as Wt,n as An,p as gt,q as Tn,v as Gl,x as Ul,y as Yl,z as ql,A as Xl,B as ke,C as jl,D as It,G as mt,H as bt,I as nt,J as re,K as k,L as yt,N as Ql,O as Bt,P as ie,Q as On,R as Re,T as ee,a as R,U as $e,V as Ct,W as Qt,X as wt,Y as Nn,Z as ce,_ as Mn,$ as se,o as K,a0 as Te,w as be,a1 as ae,a2 as B,u as O,a3 as xe,c as Y,a4 as ze,a5 as lt,a6 as Fe,F as at,d as it,a7 as Se,a8 as ye,a9 as Fn,aa as Ve,ab as Le,ac as Zl,ad as Jl,ae as kn,af as $n,ag as Hn,ah as Dt,ai as _e,aj as ea,ak as ta,al as na,am as Pn,an as la,ao as Kt,ap as aa,aq as ra,ar as Wn,as as de,at as In,b as Ce,au as Zt,av as Bn,aw as Ge,ax as sa,ay as zt,az as Dn,aA as Xe,aB as St,aC as P,aD as oa,aE as Jt,aF as Ie,aG as en,aH as tn,aI as nn,aJ as ia,aK as Kn,aL as ua,aM as da,aN as ca}from"./index.c537ef80.js";import{i as ut,a as rt,b as fa,g as ha,U as ln,c as an,d as rn,e as xt,S as Be,f as zn,k as _n,h as va,j as pa,l as Vn,m as ga,n as ma,o as ba,p as ya,q as dt}from"./event.efc7a7bd.js";var Ca=/\s/;function wa(e){for(var t=e.length;t--&&Ca.test(e.charAt(t)););return t}var Sa=/^\s+/;function xa(e){return e&&e.slice(0,wa(e)+1).replace(Sa,"")}var sn=0/0,Ea=/^[-+]0x[0-9a-f]+$/i,Ra=/^0b[01]+$/i,La=/^0o[0-7]+$/i,Aa=parseInt;function on(e){if(typeof e=="number")return e;if(zl(e))return sn;if(Ne(e)){var t=typeof e.valueOf=="function"?e.valueOf():e;e=Ne(t)?t+"":t}if(typeof e!="string")return e===0?e:+e;e=xa(e);var n=Ra.test(e);return n||La.test(e)?Aa(e.slice(2),n?2:8):Ea.test(e)?sn:+e}function _t(e){return e}function Ta(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}var Oa=800,Na=16,Ma=Date.now;function Fa(e){var t=0,n=0;return function(){var l=Ma(),r=Na-(l-n);if(n=l,r>0){if(++t>=Oa)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}function ka(e){return function(){return e}}var $a=jt?function(e,t){return jt(e,"toString",{configurable:!0,enumerable:!1,value:ka(t),writable:!0})}:_t;const Ha=$a;var Pa=Fa(Ha);const Gn=Pa;var un=Math.max;function Un(e,t,n){return t=un(t===void 0?e.length-1:t,0),function(){for(var l=arguments,r=-1,s=un(l.length-t,0),i=Array(s);++r<s;)i[r]=l[t+r];r=-1;for(var a=Array(t+1);++r<t;)a[r]=l[r];return a[t]=n(i),Ta(e,this,a)}}function Wa(e,t){return Gn(Un(e,t,_t),e+"")}function Ia(e,t,n){if(!Ne(n))return!1;var l=typeof t;return(l=="number"?ut(n)&&Rn(t,n.length):l=="string"&&t in n)?Pt(n[t],e):!1}function Ba(e){return Wa(function(t,n){var l=-1,r=n.length,s=r>1?n[r-1]:void 0,i=r>2?n[2]:void 0;for(s=e.length>3&&typeof s=="function"?(r--,s):void 0,i&&Ia(n[0],n[1],i)&&(s=r<3?void 0:s,r=1),t=Object(t);++l<r;){var a=n[l];a&&e(t,a,l,s)}return t})}var dn=et?et.isConcatSpreadable:void 0;function Da(e){return Ee(e)||rt(e)||!!(dn&&e&&e[dn])}function Vt(e,t,n,l,r){var s=-1,i=e.length;for(n||(n=Da),r||(r=[]);++s<i;){var a=e[s];t>0&&n(a)?t>1?Vt(a,t-1,n,l,r):fa(r,a):l||(r[r.length]=a)}return r}function Ka(e){var t=e==null?0:e.length;return t?Vt(e,1):[]}function za(e){return Gn(Un(e,void 0,Ka),e+"")}var _a="[object Object]",Va=Function.prototype,Ga=Object.prototype,Yn=Va.toString,Ua=Ga.hasOwnProperty,Ya=Yn.call(Object);function qa(e){if(!tt(e)||_l(e)!=_a)return!1;var t=ha(e);if(t===null)return!0;var n=Ua.call(t,"constructor")&&t.constructor;return typeof n=="function"&&n instanceof n&&Yn.call(n)==Ya}var Xa="__lodash_hash_undefined__";function ja(e){return this.__data__.set(e,Xa),this}function Qa(e){return this.__data__.has(e)}function st(e){var t=-1,n=e==null?0:e.length;for(this.__data__=new Vl;++t<n;)this.add(e[t])}st.prototype.add=st.prototype.push=ja;st.prototype.has=Qa;function Za(e,t){for(var n=-1,l=e==null?0:e.length;++n<l;)if(t(e[n],n,e))return!0;return!1}function Ja(e,t){return e.has(t)}var er=1,tr=2;function qn(e,t,n,l,r,s){var i=n&er,a=e.length,o=t.length;if(a!=o&&!(i&&o>a))return!1;var u=s.get(e),d=s.get(t);if(u&&d)return u==t&&d==e;var f=-1,v=!0,p=n&tr?new st:void 0;for(s.set(e,t),s.set(t,e);++f<a;){var h=e[f],m=t[f];if(l)var g=i?l(m,h,f,t,e,s):l(h,m,f,e,t,s);if(g!==void 0){if(g)continue;v=!1;break}if(p){if(!Za(t,function(y,b){if(!Ja(p,b)&&(h===y||r(h,y,n,l,s)))return p.push(b)})){v=!1;break}}else if(!(h===m||r(h,m,n,l,s))){v=!1;break}}return s.delete(e),s.delete(t),v}function nr(e){var t=-1,n=Array(e.size);return e.forEach(function(l,r){n[++t]=[r,l]}),n}function lr(e){var t=-1,n=Array(e.size);return e.forEach(function(l){n[++t]=l}),n}var ar=1,rr=2,sr="[object Boolean]",or="[object Date]",ir="[object Error]",ur="[object Map]",dr="[object Number]",cr="[object RegExp]",fr="[object Set]",hr="[object String]",vr="[object Symbol]",pr="[object ArrayBuffer]",gr="[object DataView]",cn=et?et.prototype:void 0,ht=cn?cn.valueOf:void 0;function mr(e,t,n,l,r,s,i){switch(n){case gr:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case pr:return!(e.byteLength!=t.byteLength||!s(new ln(e),new ln(t)));case sr:case or:case dr:return Pt(+e,+t);case ir:return e.name==t.name&&e.message==t.message;case cr:case hr:return e==t+"";case ur:var a=nr;case fr:var o=l&ar;if(a||(a=lr),e.size!=t.size&&!o)return!1;var u=i.get(e);if(u)return u==t;l|=rr,i.set(e,t);var d=qn(a(e),a(t),l,r,s,i);return i.delete(e),d;case vr:if(ht)return ht.call(e)==ht.call(t)}return!1}var br=1,yr=Object.prototype,Cr=yr.hasOwnProperty;function wr(e,t,n,l,r,s){var i=n&br,a=an(e),o=a.length,u=an(t),d=u.length;if(o!=d&&!i)return!1;for(var f=o;f--;){var v=a[f];if(!(i?v in t:Cr.call(t,v)))return!1}var p=s.get(e),h=s.get(t);if(p&&h)return p==t&&h==e;var m=!0;s.set(e,t),s.set(t,e);for(var g=i;++f<o;){v=a[f];var y=e[v],b=t[v];if(l)var x=i?l(b,y,v,t,e,s):l(y,b,v,e,t,s);if(!(x===void 0?y===b||r(y,b,n,l,s):x)){m=!1;break}g||(g=v=="constructor")}if(m&&!g){var c=e.constructor,E=t.constructor;c!=E&&"constructor"in e&&"constructor"in t&&!(typeof c=="function"&&c instanceof c&&typeof E=="function"&&E instanceof E)&&(m=!1)}return s.delete(e),s.delete(t),m}var Sr=1,fn="[object Arguments]",hn="[object Array]",Ye="[object Object]",xr=Object.prototype,vn=xr.hasOwnProperty;function Er(e,t,n,l,r,s){var i=Ee(e),a=Ee(t),o=i?hn:rn(e),u=a?hn:rn(t);o=o==fn?Ye:o,u=u==fn?Ye:u;var d=o==Ye,f=u==Ye,v=o==u;if(v&&xt(e)){if(!xt(t))return!1;i=!0,d=!1}if(v&&!d)return s||(s=new Be),i||zn(e)?qn(e,t,n,l,r,s):mr(e,t,o,n,l,r,s);if(!(n&Sr)){var p=d&&vn.call(e,"__wrapped__"),h=f&&vn.call(t,"__wrapped__");if(p||h){var m=p?e.value():e,g=h?t.value():t;return s||(s=new Be),r(m,g,n,l,s)}}return v?(s||(s=new Be),wr(e,t,n,l,r,s)):!1}function ct(e,t,n,l,r){return e===t?!0:e==null||t==null||!tt(e)&&!tt(t)?e!==e&&t!==t:Er(e,t,n,l,ct,r)}var Rr=1,Lr=2;function Ar(e,t,n,l){var r=n.length,s=r,i=!l;if(e==null)return!s;for(e=Object(e);r--;){var a=n[r];if(i&&a[2]?a[1]!==e[a[0]]:!(a[0]in e))return!1}for(;++r<s;){a=n[r];var o=a[0],u=e[o],d=a[1];if(i&&a[2]){if(u===void 0&&!(o in e))return!1}else{var f=new Be;if(l)var v=l(u,d,o,e,t,f);if(!(v===void 0?ct(d,u,Rr|Lr,l,f):v))return!1}}return!0}function Xn(e){return e===e&&!Ne(e)}function Tr(e){for(var t=_n(e),n=t.length;n--;){var l=t[n],r=e[l];t[n]=[l,r,Xn(r)]}return t}function jn(e,t){return function(n){return n==null?!1:n[e]===t&&(t!==void 0||e in Object(n))}}function Or(e){var t=Tr(e);return t.length==1&&t[0][2]?jn(t[0][0],t[0][1]):function(n){return n===e||Ar(n,e,t)}}function Nr(e,t){return e!=null&&t in Object(e)}function Mr(e,t,n){t=Ln(t,e);for(var l=-1,r=t.length,s=!1;++l<r;){var i=Wt(t[l]);if(!(s=e!=null&&n(e,i)))break;e=e[i]}return s||++l!=r?s:(r=e==null?0:e.length,!!r&&va(r)&&Rn(i,r)&&(Ee(e)||rt(e)))}function Qn(e,t){return e!=null&&Mr(e,t,Nr)}var Fr=1,kr=2;function $r(e,t){return An(e)&&Xn(t)?jn(Wt(e),t):function(n){var l=gt(n,e);return l===void 0&&l===t?Qn(n,e):ct(t,l,Fr|kr)}}function Hr(e){return function(t){return t==null?void 0:t[e]}}function Pr(e){return function(t){return Tn(t,e)}}function Wr(e){return An(e)?Hr(Wt(e)):Pr(e)}function Ir(e){return typeof e=="function"?e:e==null?_t:typeof e=="object"?Ee(e)?$r(e[0],e[1]):Or(e):Wr(e)}function Br(e){return function(t,n,l){for(var r=-1,s=Object(t),i=l(t),a=i.length;a--;){var o=i[e?a:++r];if(n(s[o],o,s)===!1)break}return t}}var Dr=Br();const Zn=Dr;function Kr(e,t){return e&&Zn(e,t,_n)}function zr(e,t){return function(n,l){if(n==null)return n;if(!ut(n))return e(n,l);for(var r=n.length,s=t?r:-1,i=Object(n);(t?s--:++s<r)&&l(i[s],s,i)!==!1;);return n}}var _r=zr(Kr);const Vr=_r;var Gr=function(){return Gl.Date.now()};const vt=Gr;var Ur="Expected a function",Yr=Math.max,qr=Math.min;function ot(e,t,n){var l,r,s,i,a,o,u=0,d=!1,f=!1,v=!0;if(typeof e!="function")throw new TypeError(Ur);t=on(t)||0,Ne(n)&&(d=!!n.leading,f="maxWait"in n,s=f?Yr(on(n.maxWait)||0,t):s,v="trailing"in n?!!n.trailing:v);function p(S){var C=l,L=r;return l=r=void 0,u=S,i=e.apply(L,C),i}function h(S){return u=S,a=setTimeout(y,t),d?p(S):i}function m(S){var C=S-o,L=S-u,N=t-C;return f?qr(N,s-L):N}function g(S){var C=S-o,L=S-u;return o===void 0||C>=t||C<0||f&&L>=s}function y(){var S=vt();if(g(S))return b(S);a=setTimeout(y,m(S))}function b(S){return a=void 0,v&&l?p(S):(l=r=void 0,i)}function x(){a!==void 0&&clearTimeout(a),u=0,l=o=r=a=void 0}function c(){return a===void 0?i:b(vt())}function E(){var S=vt(),C=g(S);if(l=arguments,r=this,o=S,C){if(a===void 0)return h(o);if(f)return clearTimeout(a),a=setTimeout(y,t),p(o)}return a===void 0&&(a=setTimeout(y,t)),i}return E.cancel=x,E.flush=c,E}function Et(e,t,n){(n!==void 0&&!Pt(e[t],n)||n===void 0&&!(t in e))&&Ul(e,t,n)}function Xr(e){return tt(e)&&ut(e)}function Rt(e,t){if(!(t==="constructor"&&typeof e[t]=="function")&&t!="__proto__")return e[t]}function jr(e){return pa(e,Vn(e))}function Qr(e,t,n,l,r,s,i){var a=Rt(e,n),o=Rt(t,n),u=i.get(o);if(u){Et(e,n,u);return}var d=s?s(a,o,n+"",e,t,i):void 0,f=d===void 0;if(f){var v=Ee(o),p=!v&&xt(o),h=!v&&!p&&zn(o);d=o,v||p||h?Ee(a)?d=a:Xr(a)?d=ga(a):p?(f=!1,d=ma(o,!0)):h?(f=!1,d=ba(o,!0)):d=[]:qa(o)||rt(o)?(d=a,rt(a)?d=jr(a):(!Ne(a)||Yl(a))&&(d=ya(o))):f=!1}f&&(i.set(o,d),r(d,o,l,s,i),i.delete(o)),Et(e,n,d)}function Jn(e,t,n,l,r){e!==t&&Zn(t,function(s,i){if(r||(r=new Be),Ne(s))Qr(e,t,i,n,Jn,l,r);else{var a=l?l(Rt(e,i),s,i+"",e,t,r):void 0;a===void 0&&(a=s),Et(e,i,a)}},Vn)}function Zr(e,t){var n=-1,l=ut(e)?Array(e.length):[];return Vr(e,function(r,s,i){l[++n]=t(r,s,i)}),l}function Jr(e,t){var n=Ee(e)?ql:Zr;return n(e,Ir(t))}function es(e,t){return Vt(Jr(e,t),1)}function ts(e,t){return ct(e,t)}var ns=Ba(function(e,t,n){Jn(e,t,n)});const el=ns;function ls(e,t,n){for(var l=-1,r=t.length,s={};++l<r;){var i=t[l],a=Tn(e,i);n(a,i)&&Xl(s,Ln(i,e),a)}return s}function as(e,t){return ls(e,t,function(n,l){return Qn(e,l)})}var rs=za(function(e,t){return e==null?{}:as(e,t)});const ss=rs,we=new Map;let pn;ke&&(document.addEventListener("mousedown",e=>pn=e),document.addEventListener("mouseup",e=>{for(const t of we.values())for(const{documentHandler:n}of t)n(e,pn)}));function gn(e,t){let n=[];return Array.isArray(t.arg)?n=t.arg:jl(t.arg)&&n.push(t.arg),function(l,r){const s=t.instance.popperRef,i=l.target,a=r==null?void 0:r.target,o=!t||!t.instance,u=!i||!a,d=e.contains(i)||e.contains(a),f=e===i,v=n.length&&n.some(h=>h==null?void 0:h.contains(i))||n.length&&n.includes(a),p=s&&(s.contains(i)||s.contains(a));o||u||d||f||v||p||t.value(l,r)}}const os={beforeMount(e,t){we.has(e)||we.set(e,[]),we.get(e).push({documentHandler:gn(e,t),bindingFn:t.value})},updated(e,t){we.has(e)||we.set(e,[]);const n=we.get(e),l=n.findIndex(s=>s.bindingFn===t.oldValue),r={documentHandler:gn(e,t),bindingFn:t.value};l>=0?n.splice(l,1,r):n.push(r)},unmounted(e){we.delete(e)}};var mn=!1,Ae,Lt,At,je,Qe,tl,Ze,Tt,Ot,Nt,nl,Mt,Ft,ll,al;function le(){if(!mn){mn=!0;var e=navigator.userAgent,t=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),n=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(Mt=/\b(iPhone|iP[ao]d)/.exec(e),Ft=/\b(iP[ao]d)/.exec(e),Nt=/Android/i.exec(e),ll=/FBAN\/\w+;/i.exec(e),al=/Mobile/i.exec(e),nl=!!/Win64/.exec(e),t){Ae=t[1]?parseFloat(t[1]):t[5]?parseFloat(t[5]):NaN,Ae&&document&&document.documentMode&&(Ae=document.documentMode);var l=/(?:Trident\/(\d+.\d+))/.exec(e);tl=l?parseFloat(l[1])+4:Ae,Lt=t[2]?parseFloat(t[2]):NaN,At=t[3]?parseFloat(t[3]):NaN,je=t[4]?parseFloat(t[4]):NaN,je?(t=/(?:Chrome\/(\d+\.\d+))/.exec(e),Qe=t&&t[1]?parseFloat(t[1]):NaN):Qe=NaN}else Ae=Lt=At=Qe=je=NaN;if(n){if(n[1]){var r=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);Ze=r?parseFloat(r[1].replace("_",".")):!0}else Ze=!1;Tt=!!n[2],Ot=!!n[3]}else Ze=Tt=Ot=!1}}var kt={ie:function(){return le()||Ae},ieCompatibilityMode:function(){return le()||tl>Ae},ie64:function(){return kt.ie()&&nl},firefox:function(){return le()||Lt},opera:function(){return le()||At},webkit:function(){return le()||je},safari:function(){return kt.webkit()},chrome:function(){return le()||Qe},windows:function(){return le()||Tt},osx:function(){return le()||Ze},linux:function(){return le()||Ot},iphone:function(){return le()||Mt},mobile:function(){return le()||Mt||Ft||Nt||al},nativeApp:function(){return le()||ll},android:function(){return le()||Nt},ipad:function(){return le()||Ft}},is=kt,qe=!!(typeof window<"u"&&window.document&&window.document.createElement),us={canUseDOM:qe,canUseWorkers:typeof Worker<"u",canUseEventListeners:qe&&!!(window.addEventListener||window.attachEvent),canUseViewport:qe&&!!window.screen,isInWorker:!qe},rl=us,sl;rl.canUseDOM&&(sl=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0);function ds(e,t){if(!rl.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,l=n in document;if(!l){var r=document.createElement("div");r.setAttribute(n,"return;"),l=typeof r[n]=="function"}return!l&&sl&&e==="wheel"&&(l=document.implementation.hasFeature("Events.wheel","3.0")),l}var cs=ds,bn=10,yn=40,Cn=800;function ol(e){var t=0,n=0,l=0,r=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),l=t*bn,r=n*bn,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(l=e.deltaX),(l||r)&&e.deltaMode&&(e.deltaMode==1?(l*=yn,r*=yn):(l*=Cn,r*=Cn)),l&&!t&&(t=l<1?-1:1),r&&!n&&(n=r<1?-1:1),{spinX:t,spinY:n,pixelX:l,pixelY:r}}ol.getEventType=function(){return is.firefox()?"DOMMouseScroll":cs("wheel")?"wheel":"mousewheel"};var fs=ol;/**
* Checks if an event is supported in the current execution environment.
*
* NOTE: This will not work correctly for non-generic events such as `change`,
* `reset`, `load`, `error`, and `select`.
*
* Borrows from Modernizr.
*
* @param {string} eventNameSuffix Event name, e.g. "click".
* @param {?boolean} capture Check if the capture phase is supported.
* @return {boolean} True if the event is supported.
* @internal
* @license Modernizr 3.0.0pre (Custom Build) | MIT
*/const hs=function(e,t){if(e&&e.addEventListener){const n=function(l){const r=fs(l);t&&Reflect.apply(t,this,[l,r])};e.addEventListener("wheel",n,{passive:!0})}},vs={beforeMount(e,t){hs(e,t.value)}},il={modelValue:{type:[Number,String,Boolean],default:void 0},label:{type:[String,Boolean,Number,Object]},indeterminate:Boolean,disabled:Boolean,checked:Boolean,name:{type:String,default:void 0},trueLabel:{type:[String,Number],default:void 0},falseLabel:{type:[String,Number],default:void 0},id:{type:String,default:void 0},controls:{type:String,default:void 0},border:Boolean,size:It,tabindex:[String,Number],validateEvent:{type:Boolean,default:!0}},ul={[dt]:e=>mt(e)||bt(e)||nt(e),change:e=>mt(e)||bt(e)||nt(e)},We=Symbol("checkboxGroupContextKey"),ps=({model:e,isChecked:t})=>{const n=re(We,void 0),l=k(()=>{var s,i;const a=(s=n==null?void 0:n.max)==null?void 0:s.value,o=(i=n==null?void 0:n.min)==null?void 0:i.value;return!yt(a)&&e.value.length>=a&&!t.value||!yt(o)&&e.value.length<=o&&t.value});return{isDisabled:Ql(k(()=>(n==null?void 0:n.disabled.value)||l.value)),isLimitDisabled:l}},gs=(e,{model:t,isLimitExceeded:n,hasOwnLabel:l,isDisabled:r,isLabeledByFormItem:s})=>{const i=re(We,void 0),{formItem:a}=Bt(),{emit:o}=ee();function u(h){var m,g;return h===e.trueLabel||h===!0?(m=e.trueLabel)!=null?m:!0:(g=e.falseLabel)!=null?g:!1}function d(h,m){o("change",u(h),m)}function f(h){if(n.value)return;const m=h.target;o("change",u(m.checked),h)}async function v(h){n.value||!l.value&&!r.value&&s.value&&(h.composedPath().some(y=>y.tagName==="LABEL")||(t.value=u([!1,e.falseLabel].includes(t.value)),await Re(),d(t.value,h)))}const p=k(()=>(i==null?void 0:i.validateEvent)||e.validateEvent);return ie(()=>e.modelValue,()=>{p.value&&(a==null||a.validate("change").catch(h=>On()))}),{handleChange:f,onClickRoot:v}},ms=e=>{const t=R(!1),{emit:n}=ee(),l=re(We,void 0),r=k(()=>yt(l)===!1),s=R(!1);return{model:k({get(){var a,o;return r.value?(a=l==null?void 0:l.modelValue)==null?void 0:a.value:(o=e.modelValue)!=null?o:t.value},set(a){var o,u;r.value&&$e(a)?(s.value=((o=l==null?void 0:l.max)==null?void 0:o.value)!==void 0&&a.length>(l==null?void 0:l.max.value),s.value===!1&&((u=l==null?void 0:l.changeEvent)==null||u.call(l,a))):(n(dt,a),t.value=a)}}),isGroup:r,isLimitExceeded:s}},bs=(e,t,{model:n})=>{const l=re(We,void 0),r=R(!1),s=k(()=>{const u=n.value;return nt(u)?u:$e(u)?Ct(e.label)?u.map(Qt).some(d=>ts(d,e.label)):u.map(Qt).includes(e.label):u!=null?u===e.trueLabel:!!u}),i=wt(k(()=>{var u;return(u=l==null?void 0:l.size)==null?void 0:u.value}),{prop:!0}),a=wt(k(()=>{var u;return(u=l==null?void 0:l.size)==null?void 0:u.value})),o=k(()=>!!(t.default||e.label));return{checkboxButtonSize:i,isChecked:s,isFocused:r,checkboxSize:a,hasOwnLabel:o}},ys=(e,{model:t})=>{function n(){$e(t.value)&&!t.value.includes(e.label)?t.value.push(e.label):t.value=e.trueLabel||!0}e.checked&&n()},dl=(e,t)=>{const{formItem:n}=Bt(),{model:l,isGroup:r,isLimitExceeded:s}=ms(e),{isFocused:i,isChecked:a,checkboxButtonSize:o,checkboxSize:u,hasOwnLabel:d}=bs(e,t,{model:l}),{isDisabled:f}=ps({model:l,isChecked:a}),{inputId:v,isLabeledByFormItem:p}=Nn(e,{formItemContext:n,disableIdGeneration:d,disableIdManagement:r}),{handleChange:h,onClickRoot:m}=gs(e,{model:l,isLimitExceeded:s,hasOwnLabel:d,isDisabled:f,isLabeledByFormItem:p});return ys(e,{model:l}),{inputId:v,isLabeledByFormItem:p,isChecked:a,isDisabled:f,isFocused:i,checkboxButtonSize:o,checkboxSize:u,hasOwnLabel:d,model:l,handleChange:h,onClickRoot:m}},Cs=["tabindex","role","aria-checked"],ws=["id","aria-hidden","name","tabindex","disabled","true-value","false-value"],Ss=["id","aria-hidden","disabled","value","name","tabindex"],xs=ce({name:"ElCheckbox"}),Es=ce({...xs,props:il,emits:ul,setup(e){const t=e,n=Mn(),{inputId:l,isLabeledByFormItem:r,isChecked:s,isDisabled:i,isFocused:a,checkboxSize:o,hasOwnLabel:u,model:d,handleChange:f,onClickRoot:v}=dl(t,n),p=se("checkbox"),h=k(()=>[p.b(),p.m(o.value),p.is("disabled",i.value),p.is("bordered",t.border),p.is("checked",s.value)]),m=k(()=>[p.e("input"),p.is("disabled",i.value),p.is("checked",s.value),p.is("indeterminate",t.indeterminate),p.is("focus",a.value)]);return(g,y)=>(K(),Te(Fn(!O(u)&&O(r)?"span":"label"),{class:B(O(h)),"aria-controls":g.indeterminate?g.controls:null,onClick:O(v)},{default:be(()=>[ae("span",{class:B(O(m)),tabindex:g.indeterminate?0:void 0,role:g.indeterminate?"checkbox":void 0,"aria-checked":g.indeterminate?"mixed":void 0},[g.trueLabel||g.falseLabel?xe((K(),Y("input",{key:0,id:O(l),"onUpdate:modelValue":y[0]||(y[0]=b=>ze(d)?d.value=b:null),class:B(O(p).e("original")),type:"checkbox","aria-hidden":g.indeterminate?"true":"false",name:g.name,tabindex:g.tabindex,disabled:O(i),"true-value":g.trueLabel,"false-value":g.falseLabel,onChange:y[1]||(y[1]=(...b)=>O(f)&&O(f)(...b)),onFocus:y[2]||(y[2]=b=>a.value=!0),onBlur:y[3]||(y[3]=b=>a.value=!1)},null,42,ws)),[[lt,O(d)]]):xe((K(),Y("input",{key:1,id:O(l),"onUpdate:modelValue":y[4]||(y[4]=b=>ze(d)?d.value=b:null),class:B(O(p).e("original")),type:"checkbox","aria-hidden":g.indeterminate?"true":"false",disabled:O(i),value:g.label,name:g.name,tabindex:g.tabindex,onChange:y[5]||(y[5]=(...b)=>O(f)&&O(f)(...b)),onFocus:y[6]||(y[6]=b=>a.value=!0),onBlur:y[7]||(y[7]=b=>a.value=!1)},null,42,Ss)),[[lt,O(d)]]),ae("span",{class:B(O(p).e("inner"))},null,2)],10,Cs),O(u)?(K(),Y("span",{key:0,class:B(O(p).e("label"))},[Fe(g.$slots,"default"),g.$slots.default?ye("v-if",!0):(K(),Y(at,{key:0},[it(Se(g.label),1)],64))],2)):ye("v-if",!0)]),_:3},8,["class","aria-controls","onClick"]))}});var Rs=Ve(Es,[["__file","/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox.vue"]]);const Ls=["name","tabindex","disabled","true-value","false-value"],As=["name","tabindex","disabled","value"],Ts=ce({name:"ElCheckboxButton"}),Os=ce({...Ts,props:il,emits:ul,setup(e){const t=e,n=Mn(),{isFocused:l,isChecked:r,isDisabled:s,checkboxButtonSize:i,model:a,handleChange:o}=dl(t,n),u=re(We,void 0),d=se("checkbox"),f=k(()=>{var p,h,m,g;const y=(h=(p=u==null?void 0:u.fill)==null?void 0:p.value)!=null?h:"";return{backgroundColor:y,borderColor:y,color:(g=(m=u==null?void 0:u.textColor)==null?void 0:m.value)!=null?g:"",boxShadow:y?`-1px 0 0 0 ${y}`:void 0}}),v=k(()=>[d.b("button"),d.bm("button",i.value),d.is("disabled",s.value),d.is("checked",r.value),d.is("focus",l.value)]);return(p,h)=>(K(),Y("label",{class:B(O(v))},[p.trueLabel||p.falseLabel?xe((K(),Y("input",{key:0,"onUpdate:modelValue":h[0]||(h[0]=m=>ze(a)?a.value=m:null),class:B(O(d).be("button","original")),type:"checkbox",name:p.name,tabindex:p.tabindex,disabled:O(s),"true-value":p.trueLabel,"false-value":p.falseLabel,onChange:h[1]||(h[1]=(...m)=>O(o)&&O(o)(...m)),onFocus:h[2]||(h[2]=m=>l.value=!0),onBlur:h[3]||(h[3]=m=>l.value=!1)},null,42,Ls)),[[lt,O(a)]]):xe((K(),Y("input",{key:1,"onUpdate:modelValue":h[4]||(h[4]=m=>ze(a)?a.value=m:null),class:B(O(d).be("button","original")),type:"checkbox",name:p.name,tabindex:p.tabindex,disabled:O(s),value:p.label,onChange:h[5]||(h[5]=(...m)=>O(o)&&O(o)(...m)),onFocus:h[6]||(h[6]=m=>l.value=!0),onBlur:h[7]||(h[7]=m=>l.value=!1)},null,42,As)),[[lt,O(a)]]),p.$slots.default||p.label?(K(),Y("span",{key:2,class:B(O(d).be("button","inner")),style:Le(O(r)?O(f):void 0)},[Fe(p.$slots,"default",{},()=>[it(Se(p.label),1)])],6)):ye("v-if",!0)],2))}});var cl=Ve(Os,[["__file","/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue"]]);const Ns=Zl({modelValue:{type:Jl(Array),default:()=>[]},disabled:Boolean,min:Number,max:Number,size:It,label:String,fill:String,textColor:String,tag:{type:String,default:"div"},validateEvent:{type:Boolean,default:!0}}),Ms={[dt]:e=>$e(e),change:e=>$e(e)},Fs=ce({name:"ElCheckboxGroup"}),ks=ce({...Fs,props:Ns,emits:Ms,setup(e,{emit:t}){const n=e,l=se("checkbox"),{formItem:r}=Bt(),{inputId:s,isLabeledByFormItem:i}=Nn(n,{formItemContext:r}),a=async u=>{t(dt,u),await Re(),t("change",u)},o=k({get(){return n.modelValue},set(u){a(u)}});return kn(We,{...ss($n(n),["size","min","max","disabled","validateEvent","fill","textColor"]),modelValue:o,changeEvent:a}),ie(()=>n.modelValue,()=>{n.validateEvent&&(r==null||r.validate("change").catch(u=>On()))}),(u,d)=>{var f;return K(),Te(Fn(u.tag),{id:O(s),class:B(O(l).b("group")),role:"group","aria-label":O(i)?void 0:u.label||"checkbox-group","aria-labelledby":O(i)?(f=O(r))==null?void 0:f.labelId:void 0},{default:be(()=>[Fe(u.$slots,"default")]),_:3},8,["id","class","aria-label","aria-labelledby"])}}});var fl=Ve(ks,[["__file","/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue"]]);const He=Hn(Rs,{CheckboxButton:cl,CheckboxGroup:fl});Dt(cl);Dt(fl);/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var $s=/["'&<>]/,Hs=Ps;function Ps(e){var t=""+e,n=$s.exec(t);if(!n)return t;var l,r="",s=0,i=0;for(s=n.index;s<t.length;s++){switch(t.charCodeAt(s)){case 34:l="&quot;";break;case 38:l="&amp;";break;case 39:l="&#39;";break;case 60:l="&lt;";break;case 62:l="&gt;";break;default:continue}i!==s&&(r+=t.substring(i,s)),i=s+1,r+=l}return i!==s?r+t.substring(i,s):r}const pt=function(e){var t;return(t=e.target)==null?void 0:t.closest("td")},Ws=function(e,t,n,l,r){if(!t&&!l&&(!r||Array.isArray(r)&&!r.length))return e;typeof n=="string"?n=n==="descending"?-1:1:n=n&&n<0?-1:1;const s=l?null:function(a,o){return r?(Array.isArray(r)||(r=[r]),r.map(u=>typeof u=="string"?gt(a,u):u(a,o,e))):(t!=="$key"&&Ct(a)&&"$value"in a&&(a=a.$value),[Ct(a)?gt(a,t):a])},i=function(a,o){if(l)return l(a.value,o.value);for(let u=0,d=a.key.length;u<d;u++){if(a.key[u]<o.key[u])return-1;if(a.key[u]>o.key[u])return 1}return 0};return e.map((a,o)=>({value:a,index:o,key:s?s(a,o):null})).sort((a,o)=>{let u=i(a,o);return u||(u=a.index-o.index),u*+n}).map(a=>a.value)},hl=function(e,t){let n=null;return e.columns.forEach(l=>{l.id===t&&(n=l)}),n},Is=function(e,t){let n=null;for(let l=0;l<e.columns.length;l++){const r=e.columns[l];if(r.columnKey===t){n=r;break}}return n||ea("ElTable",`No column matching with column-key: ${t}`),n},wn=function(e,t,n){const l=(t.className||"").match(new RegExp(`${n}-table_[^\\s]+`,"gm"));return l?hl(e,l[0]):null},j=(e,t)=>{if(!e)throw new Error("Row is required when get row identity");if(typeof t=="string"){if(!t.includes("."))return`${e[t]}`;const n=t.split(".");let l=e;for(const r of n)l=l[r];return`${l}`}else if(typeof t=="function")return t.call(null,e)},Oe=function(e,t){const n={};return(e||[]).forEach((l,r)=>{n[j(l,t)]={row:l,index:r}}),n};function Bs(e,t){const n={};let l;for(l in e)n[l]=e[l];for(l in t)if(_e(t,l)){const r=t[l];typeof r<"u"&&(n[l]=r)}return n}function Gt(e){return e===""||e!==void 0&&(e=Number.parseInt(e,10),Number.isNaN(e)&&(e="")),e}function vl(e){return e===""||e!==void 0&&(e=Gt(e),Number.isNaN(e)&&(e=80)),e}function Ds(e){return typeof e=="number"?e:typeof e=="string"?/^\d+(?:px)?$/.test(e)?Number.parseInt(e,10):e:null}function Ks(...e){return e.length===0?t=>t:e.length===1?e[0]:e.reduce((t,n)=>(...l)=>t(n(...l)))}function De(e,t,n){let l=!1;const r=e.indexOf(t),s=r!==-1,i=a=>{a==="add"?e.push(t):e.splice(r,1),l=!0,$e(t.children)&&t.children.forEach(o=>{De(e,o,n!=null?n:!s)})};return nt(n)?n&&!s?i("add"):!n&&s&&i("remove"):i(s?"remove":"add"),l}function zs(e,t,n="children",l="hasChildren"){const r=i=>!(Array.isArray(i)&&i.length);function s(i,a,o){t(i,a,o),a.forEach(u=>{if(u[l]){t(u,null,o+1);return}const d=u[n];r(d)||s(u,d,o+1)})}e.forEach(i=>{if(i[l]){t(i,null,0);return}const a=i[n];r(a)||s(i,a,0)})}let me;function _s(e,t,n,l,r){r=el({enterable:!0,showArrow:!0},r);const s=e==null?void 0:e.dataset.prefix,i=e==null?void 0:e.querySelector(`.${s}-scrollbar__wrap`);function a(){const g=r.effect==="light",y=document.createElement("div");return y.className=[`${s}-popper`,g?"is-light":"is-dark",r.popperClass||""].join(" "),n=Hs(n),y.innerHTML=n,y.style.zIndex=String(l()),e==null||e.appendChild(y),y}function o(){const g=document.createElement("div");return g.className=`${s}-popper__arrow`,g}function u(){d&&d.update()}me==null||me(),me=()=>{try{d&&d.destroy(),p&&(e==null||e.removeChild(p)),t.removeEventListener("mouseenter",f),t.removeEventListener("mouseleave",v),i==null||i.removeEventListener("scroll",me),me=void 0}catch{}};let d=null,f=u,v=me;r.enterable&&({onOpen:f,onClose:v}=ta({showAfter:r.showAfter,hideAfter:r.hideAfter,open:u,close:me}));const p=a();p.onmouseenter=f,p.onmouseleave=v;const h=[];if(r.offset&&h.push({name:"offset",options:{offset:[0,r.offset]}}),r.showArrow){const g=p.appendChild(o());h.push({name:"arrow",options:{element:g,padding:10}})}const m=r.popperOptions||{};return d=na(t,p,{placement:r.placement||"top",strategy:"fixed",...m,modifiers:m.modifiers?h.concat(m.modifiers):h}),t.addEventListener("mouseenter",f),t.addEventListener("mouseleave",v),i==null||i.addEventListener("scroll",me),d}function pl(e){return e.children?es(e.children,pl):[e]}function Sn(e,t){return e+t.colSpan}const gl=(e,t,n,l)=>{let r=0,s=e;const i=n.states.columns.value;if(l){const o=pl(l[e]);r=i.slice(0,i.indexOf(o[0])).reduce(Sn,0),s=r+o.reduce(Sn,0)-1}else r=e;let a;switch(t){case"left":s<n.states.fixedLeafColumnsLength.value&&(a="left");break;case"right":r>=i.length-n.states.rightFixedLeafColumnsLength.value&&(a="right");break;default:s<n.states.fixedLeafColumnsLength.value?a="left":r>=i.length-n.states.rightFixedLeafColumnsLength.value&&(a="right")}return a?{direction:a,start:r,after:s}:{}},Ut=(e,t,n,l,r,s=0)=>{const i=[],{direction:a,start:o,after:u}=gl(t,n,l,r);if(a){const d=a==="left";i.push(`${e}-fixed-column--${a}`),d&&u+s===l.states.fixedLeafColumnsLength.value-1?i.push("is-last-column"):!d&&o-s===l.states.columns.value.length-l.states.rightFixedLeafColumnsLength.value&&i.push("is-first-column")}return i};function xn(e,t){return e+(t.realWidth===null||Number.isNaN(t.realWidth)?Number(t.width):t.realWidth)}const Yt=(e,t,n,l)=>{const{direction:r,start:s=0,after:i=0}=gl(e,t,n,l);if(!r)return;const a={},o=r==="left",u=n.states.columns.value;return o?a.left=u.slice(0,s).reduce(xn,0):a.right=u.slice(i+1).reverse().reduce(xn,0),a},Pe=(e,t)=>{!e||Number.isNaN(e[t])||(e[t]=`${e[t]}px`)};function Vs(e){const t=ee(),n=R(!1),l=R([]);return{updateExpandRows:()=>{const o=e.data.value||[],u=e.rowKey.value;if(n.value)l.value=o.slice();else if(u){const d=Oe(l.value,u);l.value=o.reduce((f,v)=>{const p=j(v,u);return d[p]&&f.push(v),f},[])}else l.value=[]},toggleRowExpansion:(o,u)=>{De(l.value,o,u)&&t.emit("expand-change",o,l.value.slice())},setExpandRowKeys:o=>{t.store.assertRowKey();const u=e.data.value||[],d=e.rowKey.value,f=Oe(u,d);l.value=o.reduce((v,p)=>{const h=f[p];return h&&v.push(h.row),v},[])},isRowExpanded:o=>{const u=e.rowKey.value;return u?!!Oe(l.value,u)[j(o,u)]:l.value.includes(o)},states:{expandRows:l,defaultExpandAll:n}}}function Gs(e){const t=ee(),n=R(null),l=R(null),r=u=>{t.store.assertRowKey(),n.value=u,i(u)},s=()=>{n.value=null},i=u=>{const{data:d,rowKey:f}=e;let v=null;f.value&&(v=(O(d)||[]).find(p=>j(p,f.value)===u)),l.value=v,t.emit("current-change",l.value,null)};return{setCurrentRowKey:r,restoreCurrentRowKey:s,setCurrentRowByKey:i,updateCurrentRow:u=>{const d=l.value;if(u&&u!==d){l.value=u,t.emit("current-change",l.value,d);return}!u&&d&&(l.value=null,t.emit("current-change",null,d))},updateCurrentRowData:()=>{const u=e.rowKey.value,d=e.data.value||[],f=l.value;if(!d.includes(f)&&f){if(u){const v=j(f,u);i(v)}else l.value=null;l.value===null&&t.emit("current-change",null,f)}else n.value&&(i(n.value),s())},states:{_currentRowKey:n,currentRow:l}}}function Us(e){const t=R([]),n=R({}),l=R(16),r=R(!1),s=R({}),i=R("hasChildren"),a=R("children"),o=ee(),u=k(()=>{if(!e.rowKey.value)return{};const y=e.data.value||[];return f(y)}),d=k(()=>{const y=e.rowKey.value,b=Object.keys(s.value),x={};return b.length&&b.forEach(c=>{if(s.value[c].length){const E={children:[]};s.value[c].forEach(S=>{const C=j(S,y);E.children.push(C),S[i.value]&&!x[C]&&(x[C]={children:[]})}),x[c]=E}}),x}),f=y=>{const b=e.rowKey.value,x={};return zs(y,(c,E,S)=>{const C=j(c,b);Array.isArray(E)?x[C]={children:E.map(L=>j(L,b)),level:S}:r.value&&(x[C]={children:[],lazy:!0,level:S})},a.value,i.value),x},v=(y=!1,b=(x=>(x=o.store)==null?void 0:x.states.defaultExpandAll.value)())=>{var x;const c=u.value,E=d.value,S=Object.keys(c),C={};if(S.length){const L=O(n),N=[],W=($,V)=>{if(y)return t.value?b||t.value.includes(V):!!(b||($==null?void 0:$.expanded));{const G=b||t.value&&t.value.includes(V);return!!(($==null?void 0:$.expanded)||G)}};S.forEach($=>{const V=L[$],G={...c[$]};if(G.expanded=W(V,$),G.lazy){const{loaded:Q=!1,loading:Z=!1}=V||{};G.loaded=!!Q,G.loading=!!Z,N.push($)}C[$]=G});const z=Object.keys(E);r.value&&z.length&&N.length&&z.forEach($=>{const V=L[$],G=E[$].children;if(N.includes($)){if(C[$].children.length!==0)throw new Error("[ElTable]children must be an empty array.");C[$].children=G}else{const{loaded:Q=!1,loading:Z=!1}=V||{};C[$]={lazy:!0,loaded:!!Q,loading:!!Z,expanded:W(V,$),children:G,level:""}}})}n.value=C,(x=o.store)==null||x.updateTableScrollY()};ie(()=>t.value,()=>{v(!0)}),ie(()=>u.value,()=>{v()}),ie(()=>d.value,()=>{v()});const p=y=>{t.value=y,v()},h=(y,b)=>{o.store.assertRowKey();const x=e.rowKey.value,c=j(y,x),E=c&&n.value[c];if(c&&E&&"expanded"in E){const S=E.expanded;b=typeof b>"u"?!E.expanded:b,n.value[c].expanded=b,S!==b&&o.emit("expand-change",y,b),o.store.updateTableScrollY()}},m=y=>{o.store.assertRowKey();const b=e.rowKey.value,x=j(y,b),c=n.value[x];r.value&&c&&"loaded"in c&&!c.loaded?g(y,x,c):h(y,void 0)},g=(y,b,x)=>{const{load:c}=o.props;c&&!n.value[b].loaded&&(n.value[b].loading=!0,c(y,x,E=>{if(!Array.isArray(E))throw new TypeError("[ElTable] data must be an array");n.value[b].loading=!1,n.value[b].loaded=!0,n.value[b].expanded=!0,E.length&&(s.value[b]=E),o.emit("expand-change",y,!0)}))};return{loadData:g,loadOrToggle:m,toggleTreeExpansion:h,updateTreeExpandKeys:p,updateTreeData:v,normalize:f,states:{expandRowKeys:t,treeData:n,indent:l,lazy:r,lazyTreeNodeMap:s,lazyColumnIdentifier:i,childrenColumnName:a}}}const Ys=(e,t)=>{const n=t.sortingColumn;return!n||typeof n.sortable=="string"?e:Ws(e,t.sortProp,t.sortOrder,n.sortMethod,n.sortBy)},Je=e=>{const t=[];return e.forEach(n=>{n.children?t.push.apply(t,Je(n.children)):t.push(n)}),t};function qs(){var e;const t=ee(),{size:n}=$n((e=t.proxy)==null?void 0:e.$props),l=R(null),r=R([]),s=R([]),i=R(!1),a=R([]),o=R([]),u=R([]),d=R([]),f=R([]),v=R([]),p=R([]),h=R([]),m=[],g=R(0),y=R(0),b=R(0),x=R(!1),c=R([]),E=R(!1),S=R(!1),C=R(null),L=R({}),N=R(null),W=R(null),z=R(null),$=R(null),V=R(null);ie(r,()=>t.state&&ve(!1),{deep:!0});const G=()=>{if(!l.value)throw new Error("[ElTable] prop row-key is required")},Q=A=>{var M;(M=A.children)==null||M.forEach(I=>{I.fixed=A.fixed,Q(I)})},Z=()=>{a.value.forEach(D=>{Q(D)}),d.value=a.value.filter(D=>D.fixed===!0||D.fixed==="left"),f.value=a.value.filter(D=>D.fixed==="right"),d.value.length>0&&a.value[0]&&a.value[0].type==="selection"&&!a.value[0].fixed&&(a.value[0].fixed=!0,d.value.unshift(a.value[0]));const A=a.value.filter(D=>!D.fixed);o.value=[].concat(d.value).concat(A).concat(f.value);const M=Je(A),I=Je(d.value),H=Je(f.value);g.value=M.length,y.value=I.length,b.value=H.length,u.value=[].concat(I).concat(M).concat(H),i.value=d.value.length>0||f.value.length>0},ve=(A,M=!1)=>{A&&Z(),M?t.state.doLayout():t.state.debouncedUpdateLayout()},T=A=>c.value.includes(A),w=()=>{x.value=!1,c.value.length&&(c.value=[],t.emit("selection-change",[]))},F=()=>{let A;if(l.value){A=[];const M=Oe(c.value,l.value),I=Oe(r.value,l.value);for(const H in M)_e(M,H)&&!I[H]&&A.push(M[H].row)}else A=c.value.filter(M=>!r.value.includes(M));if(A.length){const M=c.value.filter(I=>!A.includes(I));c.value=M,t.emit("selection-change",M.slice())}},_=()=>(c.value||[]).slice(),U=(A,M=void 0,I=!0)=>{if(De(c.value,A,M)){const D=(c.value||[]).slice();I&&t.emit("select",D,A),t.emit("selection-change",D)}},X=()=>{var A,M;const I=S.value?!x.value:!(x.value||c.value.length);x.value=I;let H=!1,D=0;const J=(M=(A=t==null?void 0:t.store)==null?void 0:A.states)==null?void 0:M.rowKey.value;r.value.forEach((ue,Me)=>{const ge=Me+D;C.value?C.value.call(null,ue,ge)&&De(c.value,ue,I)&&(H=!0):De(c.value,ue,I)&&(H=!0),D+=oe(j(ue,J))}),H&&t.emit("selection-change",c.value?c.value.slice():[]),t.emit("select-all",c.value)},te=()=>{const A=Oe(c.value,l.value);r.value.forEach(M=>{const I=j(M,l.value),H=A[I];H&&(c.value[H.index]=M)})},ne=()=>{var A,M,I;if(((A=r.value)==null?void 0:A.length)===0){x.value=!1;return}let H;l.value&&(H=Oe(c.value,l.value));const D=function(ge){return H?!!H[j(ge,l.value)]:c.value.includes(ge)};let J=!0,ue=0,Me=0;for(let ge=0,Il=(r.value||[]).length;ge<Il;ge++){const Bl=(I=(M=t==null?void 0:t.store)==null?void 0:M.states)==null?void 0:I.rowKey.value,Dl=ge+Me,ft=r.value[ge],Kl=C.value&&C.value.call(null,ft,Dl);if(D(ft))ue++;else if(!C.value||Kl){J=!1;break}Me+=oe(j(ft,Bl))}ue===0&&(J=!1),x.value=J},oe=A=>{var M;if(!t||!t.store)return 0;const{treeData:I}=t.store.states;let H=0;const D=(M=I.value[A])==null?void 0:M.children;return D&&(H+=D.length,D.forEach(J=>{H+=oe(J)})),H},fe=(A,M)=>{Array.isArray(A)||(A=[A]);const I={};return A.forEach(H=>{L.value[H.id]=M,I[H.columnKey||H.id]=M}),I},q=(A,M,I)=>{W.value&&W.value!==A&&(W.value.order=null),W.value=A,z.value=M,$.value=I},pe=()=>{let A=O(s);Object.keys(L.value).forEach(M=>{const I=L.value[M];if(!I||I.length===0)return;const H=hl({columns:u.value},M);H&&H.filterMethod&&(A=A.filter(D=>I.some(J=>H.filterMethod.call(null,J,D,H))))}),N.value=A},Ue=()=>{r.value=Ys(N.value,{sortingColumn:W.value,sortProp:z.value,sortOrder:$.value})},Sl=(A=void 0)=>{A&&A.filter||pe(),Ue()},xl=A=>{const{tableHeaderRef:M}=t.refs;if(!M)return;const I=Object.assign({},M.filterPanels),H=Object.keys(I);if(!!H.length)if(typeof A=="string"&&(A=[A]),Array.isArray(A)){const D=A.map(J=>Is({columns:u.value},J));H.forEach(J=>{const ue=D.find(Me=>Me.id===J);ue&&(ue.filteredValue=[])}),t.store.commit("filterChange",{column:D,values:[],silent:!0,multi:!0})}else H.forEach(D=>{const J=u.value.find(ue=>ue.id===D);J&&(J.filteredValue=[])}),L.value={},t.store.commit("filterChange",{column:{},values:[],silent:!0})},El=()=>{!W.value||(q(null,null,null),t.store.commit("changeSortCondition",{silent:!0}))},{setExpandRowKeys:Rl,toggleRowExpansion:Xt,updateExpandRows:Ll,states:Al,isRowExpanded:Tl}=Vs({data:r,rowKey:l}),{updateTreeExpandKeys:Ol,toggleTreeExpansion:Nl,updateTreeData:Ml,loadOrToggle:Fl,states:kl}=Us({data:r,rowKey:l}),{updateCurrentRowData:$l,updateCurrentRow:Hl,setCurrentRowKey:Pl,states:Wl}=Gs({data:r,rowKey:l});return{assertRowKey:G,updateColumns:Z,scheduleLayout:ve,isSelected:T,clearSelection:w,cleanSelection:F,getSelectionRows:_,toggleRowSelection:U,_toggleAllSelection:X,toggleAllSelection:null,updateSelectionByRowKey:te,updateAllSelected:ne,updateFilters:fe,updateCurrentRow:Hl,updateSort:q,execFilter:pe,execSort:Ue,execQuery:Sl,clearFilter:xl,clearSort:El,toggleRowExpansion:Xt,setExpandRowKeysAdapter:A=>{Rl(A),Ol(A)},setCurrentRowKey:Pl,toggleRowExpansionAdapter:(A,M)=>{u.value.some(({type:H})=>H==="expand")?Xt(A,M):Nl(A,M)},isRowExpanded:Tl,updateExpandRows:Ll,updateCurrentRowData:$l,loadOrToggle:Fl,updateTreeData:Ml,states:{tableSize:n,rowKey:l,data:r,_data:s,isComplex:i,_columns:a,originColumns:o,columns:u,fixedColumns:d,rightFixedColumns:f,leafColumns:v,fixedLeafColumns:p,rightFixedLeafColumns:h,updateOrderFns:m,leafColumnsLength:g,fixedLeafColumnsLength:y,rightFixedLeafColumnsLength:b,isAllSelected:x,selection:c,reserveSelection:E,selectOnIndeterminate:S,selectable:C,filters:L,filteredData:N,sortingColumn:W,sortProp:z,sortOrder:$,hoverRow:V,...Al,...kl,...Wl}}}function $t(e,t){return e.map(n=>{var l;return n.id===t.id?t:((l=n.children)!=null&&l.length&&(n.children=$t(n.children,t)),n)})}function Ht(e){e.forEach(t=>{var n,l;t.no=(n=t.getColumnIndex)==null?void 0:n.call(t),(l=t.children)!=null&&l.length&&Ht(t.children)}),e.sort((t,n)=>t.no-n.no)}function Xs(){const e=ee(),t=qs();return{ns:se("table"),...t,mutations:{setData(i,a){const o=O(i._data)!==a;i.data.value=a,i._data.value=a,e.store.execQuery(),e.store.updateCurrentRowData(),e.store.updateExpandRows(),e.store.updateTreeData(e.store.states.defaultExpandAll.value),O(i.reserveSelection)?(e.store.assertRowKey(),e.store.updateSelectionByRowKey()):o?e.store.clearSelection():e.store.cleanSelection(),e.store.updateAllSelected(),e.$ready&&e.store.scheduleLayout()},insertColumn(i,a,o,u){const d=O(i._columns);let f=[];o?(o&&!o.children&&(o.children=[]),o.children.push(a),f=$t(d,o)):(d.push(a),f=d),Ht(f),i._columns.value=f,i.updateOrderFns.push(u),a.type==="selection"&&(i.selectable.value=a.selectable,i.reserveSelection.value=a.reserveSelection),e.$ready&&(e.store.updateColumns(),e.store.scheduleLayout())},updateColumnOrder(i,a){var o;((o=a.getColumnIndex)==null?void 0:o.call(a))!==a.no&&(Ht(i._columns.value),e.$ready&&e.store.updateColumns())},removeColumn(i,a,o,u){const d=O(i._columns)||[];if(o)o.children.splice(o.children.findIndex(v=>v.id===a.id),1),Re(()=>{var v;((v=o.children)==null?void 0:v.length)===0&&delete o.children}),i._columns.value=$t(d,o);else{const v=d.indexOf(a);v>-1&&(d.splice(v,1),i._columns.value=d)}const f=i.updateOrderFns.indexOf(u);f>-1&&i.updateOrderFns.splice(f,1),e.$ready&&(e.store.updateColumns(),e.store.scheduleLayout())},sort(i,a){const{prop:o,order:u,init:d}=a;if(o){const f=O(i.columns).find(v=>v.property===o);f&&(f.order=u,e.store.updateSort(f,o,u),e.store.commit("changeSortCondition",{init:d}))}},changeSortCondition(i,a){const{sortingColumn:o,sortProp:u,sortOrder:d}=i,f=O(o),v=O(u),p=O(d);p===null&&(i.sortingColumn.value=null,i.sortProp.value=null);const h={filter:!0};e.store.execQuery(h),(!a||!(a.silent||a.init))&&e.emit("sort-change",{column:f,prop:v,order:p}),e.store.updateTableScrollY()},filterChange(i,a){const{column:o,values:u,silent:d}=a,f=e.store.updateFilters(o,u);e.store.execQuery(),d||e.emit("filter-change",f),e.store.updateTableScrollY()},toggleAllSelection(){e.store.toggleAllSelection()},rowSelectedChanged(i,a){e.store.toggleRowSelection(a),e.store.updateAllSelected()},setHoverRow(i,a){i.hoverRow.value=a},setCurrentRow(i,a){e.store.updateCurrentRow(a)}},commit:function(i,...a){const o=e.store.mutations;if(o[i])o[i].apply(e,[e.store.states].concat(a));else throw new Error(`Action not found: ${i}`)},updateTableScrollY:function(){Re(()=>e.layout.updateScrollY.apply(e.layout))}}}const Ke={rowKey:"rowKey",defaultExpandAll:"defaultExpandAll",selectOnIndeterminate:"selectOnIndeterminate",indent:"indent",lazy:"lazy",data:"data",["treeProps.hasChildren"]:{key:"lazyColumnIdentifier",default:"hasChildren"},["treeProps.children"]:{key:"childrenColumnName",default:"children"}};function js(e,t){if(!e)throw new Error("Table is required.");const n=Xs();return n.toggleAllSelection=ot(n._toggleAllSelection,10),Object.keys(Ke).forEach(l=>{ml(bl(t,l),l,n)}),Qs(n,t),n}function Qs(e,t){Object.keys(Ke).forEach(n=>{ie(()=>bl(t,n),l=>{ml(l,n,e)})})}function ml(e,t,n){let l=e,r=Ke[t];typeof Ke[t]=="object"&&(r=r.key,l=l||Ke[t].default),n.states[r].value=l}function bl(e,t){if(t.includes(".")){const n=t.split(".");let l=e;return n.forEach(r=>{l=l[r]}),l}else return e[t]}class Zs{constructor(t){this.observers=[],this.table=null,this.store=null,this.columns=[],this.fit=!0,this.showHeader=!0,this.height=R(null),this.scrollX=R(!1),this.scrollY=R(!1),this.bodyWidth=R(null),this.fixedWidth=R(null),this.rightFixedWidth=R(null),this.gutterWidth=0;for(const n in t)_e(t,n)&&(ze(this[n])?this[n].value=t[n]:this[n]=t[n]);if(!this.table)throw new Error("Table is required for Table Layout");if(!this.store)throw new Error("Store is required for Table Layout")}updateScrollY(){if(this.height.value===null)return!1;const n=this.table.refs.scrollBarRef;if(this.table.vnode.el&&(n==null?void 0:n.wrapRef)){let l=!0;const r=this.scrollY.value;return l=n.wrapRef.scrollHeight>n.wrapRef.clientHeight,this.scrollY.value=l,r!==l}return!1}setHeight(t,n="height"){if(!ke)return;const l=this.table.vnode.el;if(t=Ds(t),this.height.value=Number(t),!l&&(t||t===0))return Re(()=>this.setHeight(t,n));typeof t=="number"?(l.style[n]=`${t}px`,this.updateElsHeight()):typeof t=="string"&&(l.style[n]=t,this.updateElsHeight())}setMaxHeight(t){this.setHeight(t,"max-height")}getFlattenColumns(){const t=[];return this.table.store.states.columns.value.forEach(l=>{l.isColumnGroup?t.push.apply(t,l.columns):t.push(l)}),t}updateElsHeight(){this.updateScrollY(),this.notifyObservers("scrollable")}headerDisplayNone(t){if(!t)return!0;let n=t;for(;n.tagName!=="DIV";){if(getComputedStyle(n).display==="none")return!0;n=n.parentElement}return!1}updateColumnsWidth(){if(!ke)return;const t=this.fit,n=this.table.vnode.el.clientWidth;let l=0;const r=this.getFlattenColumns(),s=r.filter(o=>typeof o.width!="number");if(r.forEach(o=>{typeof o.width=="number"&&o.realWidth&&(o.realWidth=null)}),s.length>0&&t){if(r.forEach(o=>{l+=Number(o.width||o.minWidth||80)}),l<=n){this.scrollX.value=!1;const o=n-l;if(s.length===1)s[0].realWidth=Number(s[0].minWidth||80)+o;else{const u=s.reduce((v,p)=>v+Number(p.minWidth||80),0),d=o/u;let f=0;s.forEach((v,p)=>{if(p===0)return;const h=Math.floor(Number(v.minWidth||80)*d);f+=h,v.realWidth=Number(v.minWidth||80)+h}),s[0].realWidth=Number(s[0].minWidth||80)+o-f}}else this.scrollX.value=!0,s.forEach(o=>{o.realWidth=Number(o.minWidth)});this.bodyWidth.value=Math.max(l,n),this.table.state.resizeState.value.width=this.bodyWidth.value}else r.forEach(o=>{!o.width&&!o.minWidth?o.realWidth=80:o.realWidth=Number(o.width||o.minWidth),l+=o.realWidth}),this.scrollX.value=l>n,this.bodyWidth.value=l;const i=this.store.states.fixedColumns.value;if(i.length>0){let o=0;i.forEach(u=>{o+=Number(u.realWidth||u.width)}),this.fixedWidth.value=o}const a=this.store.states.rightFixedColumns.value;if(a.length>0){let o=0;a.forEach(u=>{o+=Number(u.realWidth||u.width)}),this.rightFixedWidth.value=o}this.notifyObservers("columns")}addObserver(t){this.observers.push(t)}removeObserver(t){const n=this.observers.indexOf(t);n!==-1&&this.observers.splice(n,1)}notifyObservers(t){this.observers.forEach(l=>{var r,s;switch(t){case"columns":(r=l.state)==null||r.onColumnsChange(this);break;case"scrollable":(s=l.state)==null||s.onScrollableChange(this);break;default:throw new Error(`Table Layout don't have event ${t}.`)}})}}const{CheckboxGroup:Js}=He,eo=ce({name:"ElTableFilterPanel",components:{ElCheckbox:He,ElCheckboxGroup:Js,ElScrollbar:Pn,ElTooltip:la,ElIcon:Kt,ArrowDown:aa,ArrowUp:ra},directives:{ClickOutside:os},props:{placement:{type:String,default:"bottom-start"},store:{type:Object},column:{type:Object},upDataColumn:{type:Function}},setup(e){const t=ee(),{t:n}=Wn(),l=se("table-filter"),r=t==null?void 0:t.parent;r.filterPanels.value[e.column.id]||(r.filterPanels.value[e.column.id]=t);const s=R(!1),i=R(null),a=k(()=>e.column&&e.column.filters),o=k({get:()=>{var c;return(((c=e.column)==null?void 0:c.filteredValue)||[])[0]},set:c=>{u.value&&(typeof c<"u"&&c!==null?u.value.splice(0,1,c):u.value.splice(0,1))}}),u=k({get(){return e.column?e.column.filteredValue||[]:[]},set(c){e.column&&e.upDataColumn("filteredValue",c)}}),d=k(()=>e.column?e.column.filterMultiple:!0),f=c=>c.value===o.value,v=()=>{s.value=!1},p=c=>{c.stopPropagation(),s.value=!s.value},h=()=>{s.value=!1},m=()=>{b(u.value),v()},g=()=>{u.value=[],b(u.value),v()},y=c=>{o.value=c,b(typeof c<"u"&&c!==null?u.value:[]),v()},b=c=>{e.store.commit("filterChange",{column:e.column,values:c}),e.store.updateAllSelected()};ie(s,c=>{e.column&&e.upDataColumn("filterOpened",c)},{immediate:!0});const x=k(()=>{var c,E;return(E=(c=i.value)==null?void 0:c.popperRef)==null?void 0:E.contentRef});return{tooltipVisible:s,multiple:d,filteredValue:u,filterValue:o,filters:a,handleConfirm:m,handleReset:g,handleSelect:y,isActive:f,t:n,ns:l,showFilterPanel:p,hideFilterPanel:h,popperPaneRef:x,tooltip:i}}}),to={key:0},no=["disabled"],lo=["label","onClick"];function ao(e,t,n,l,r,s){const i=de("el-checkbox"),a=de("el-checkbox-group"),o=de("el-scrollbar"),u=de("arrow-up"),d=de("arrow-down"),f=de("el-icon"),v=de("el-tooltip"),p=In("click-outside");return K(),Te(v,{ref:"tooltip",visible:e.tooltipVisible,offset:0,placement:e.placement,"show-arrow":!1,"stop-popper-mouse-event":!1,teleported:"",effect:"light",pure:"","popper-class":e.ns.b(),persistent:""},{content:be(()=>[e.multiple?(K(),Y("div",to,[ae("div",{class:B(e.ns.e("content"))},[Ce(o,{"wrap-class":e.ns.e("wrap")},{default:be(()=>[Ce(a,{modelValue:e.filteredValue,"onUpdate:modelValue":t[0]||(t[0]=h=>e.filteredValue=h),class:B(e.ns.e("checkbox-group"))},{default:be(()=>[(K(!0),Y(at,null,Zt(e.filters,h=>(K(),Te(i,{key:h.value,label:h.value},{default:be(()=>[it(Se(h.text),1)]),_:2},1032,["label"]))),128))]),_:1},8,["modelValue","class"])]),_:1},8,["wrap-class"])],2),ae("div",{class:B(e.ns.e("bottom"))},[ae("button",{class:B({[e.ns.is("disabled")]:e.filteredValue.length===0}),disabled:e.filteredValue.length===0,type:"button",onClick:t[1]||(t[1]=(...h)=>e.handleConfirm&&e.handleConfirm(...h))},Se(e.t("el.table.confirmFilter")),11,no),ae("button",{type:"button",onClick:t[2]||(t[2]=(...h)=>e.handleReset&&e.handleReset(...h))},Se(e.t("el.table.resetFilter")),1)],2)])):(K(),Y("ul",{key:1,class:B(e.ns.e("list"))},[ae("li",{class:B([e.ns.e("list-item"),{[e.ns.is("active")]:e.filterValue===void 0||e.filterValue===null}]),onClick:t[3]||(t[3]=h=>e.handleSelect(null))},Se(e.t("el.table.clearFilter")),3),(K(!0),Y(at,null,Zt(e.filters,h=>(K(),Y("li",{key:h.value,class:B([e.ns.e("list-item"),e.ns.is("active",e.isActive(h))]),label:h.value,onClick:m=>e.handleSelect(h.value)},Se(h.text),11,lo))),128))],2))]),default:be(()=>[xe((K(),Y("span",{class:B([`${e.ns.namespace.value}-table__column-filter-trigger`,`${e.ns.namespace.value}-none-outline`]),onClick:t[4]||(t[4]=(...h)=>e.showFilterPanel&&e.showFilterPanel(...h))},[Ce(f,null,{default:be(()=>[e.column.filterOpened?(K(),Te(u,{key:0})):(K(),Te(d,{key:1}))]),_:1})],2)),[[p,e.hideFilterPanel,e.popperPaneRef]])]),_:1},8,["visible","placement","popper-class"])}var ro=Ve(eo,[["render",ao],["__file","/home/runner/work/element-plus/element-plus/packages/components/table/src/filter-panel.vue"]]);function yl(e){const t=ee();Bn(()=>{n.value.addObserver(t)}),Ge(()=>{l(n.value),r(n.value)}),sa(()=>{l(n.value),r(n.value)}),zt(()=>{n.value.removeObserver(t)});const n=k(()=>{const s=e.layout;if(!s)throw new Error("Can not find table layout.");return s}),l=s=>{var i;const a=((i=e.vnode.el)==null?void 0:i.querySelectorAll("colgroup > col"))||[];if(!a.length)return;const o=s.getFlattenColumns(),u={};o.forEach(d=>{u[d.id]=d});for(let d=0,f=a.length;d<f;d++){const v=a[d],p=v.getAttribute("name"),h=u[p];h&&v.setAttribute("width",h.realWidth||h.width)}},r=s=>{var i,a;const o=((i=e.vnode.el)==null?void 0:i.querySelectorAll("colgroup > col[name=gutter]"))||[];for(let d=0,f=o.length;d<f;d++)o[d].setAttribute("width",s.scrollY.value?s.gutterWidth:"0");const u=((a=e.vnode.el)==null?void 0:a.querySelectorAll("th.gutter"))||[];for(let d=0,f=u.length;d<f;d++){const v=u[d];v.style.width=s.scrollY.value?`${s.gutterWidth}px`:"0",v.style.display=s.scrollY.value?"":"none"}};return{tableLayout:n.value,onColumnsChange:l,onScrollableChange:r}}const he=Symbol("ElTable");function so(e,t){const n=ee(),l=re(he),r=m=>{m.stopPropagation()},s=(m,g)=>{!g.filters&&g.sortable?h(m,g,!1):g.filterable&&!g.sortable&&r(m),l==null||l.emit("header-click",g,m)},i=(m,g)=>{l==null||l.emit("header-contextmenu",g,m)},a=R(null),o=R(!1),u=R({}),d=(m,g)=>{if(!!ke&&!(g.children&&g.children.length>0)&&a.value&&e.border){o.value=!0;const y=l;t("set-drag-visible",!0);const x=(y==null?void 0:y.vnode.el).getBoundingClientRect().left,c=n.vnode.el.querySelector(`th.${g.id}`),E=c.getBoundingClientRect(),S=E.left-x+30;Dn(c,"noclick"),u.value={startMouseLeft:m.clientX,startLeft:E.right-x,startColumnLeft:E.left-x,tableLeft:x};const C=y==null?void 0:y.refs.resizeProxy;C.style.left=`${u.value.startLeft}px`,document.onselectstart=function(){return!1},document.ondragstart=function(){return!1};const L=W=>{const z=W.clientX-u.value.startMouseLeft,$=u.value.startLeft+z;C.style.left=`${Math.max(S,$)}px`},N=()=>{if(o.value){const{startColumnLeft:W,startLeft:z}=u.value,V=Number.parseInt(C.style.left,10)-W;g.width=g.realWidth=V,y==null||y.emit("header-dragend",g.width,z-W,g,m),requestAnimationFrame(()=>{e.store.scheduleLayout(!1,!0)}),document.body.style.cursor="",o.value=!1,a.value=null,u.value={},t("set-drag-visible",!1)}document.removeEventListener("mousemove",L),document.removeEventListener("mouseup",N),document.onselectstart=null,document.ondragstart=null,setTimeout(()=>{St(c,"noclick")},0)};document.addEventListener("mousemove",L),document.addEventListener("mouseup",N)}},f=(m,g)=>{var y;if(g.children&&g.children.length>0)return;const b=(y=m.target)==null?void 0:y.closest("th");if(!(!g||!g.resizable)&&!o.value&&e.border){const x=b.getBoundingClientRect(),c=document.body.style;x.width>12&&x.right-m.pageX<8?(c.cursor="col-resize",Xe(b,"is-sortable")&&(b.style.cursor="col-resize"),a.value=g):o.value||(c.cursor="",Xe(b,"is-sortable")&&(b.style.cursor="pointer"),a.value=null)}},v=()=>{!ke||(document.body.style.cursor="")},p=({order:m,sortOrders:g})=>{if(m==="")return g[0];const y=g.indexOf(m||null);return g[y>g.length-2?0:y+1]},h=(m,g,y)=>{var b;m.stopPropagation();const x=g.order===y?null:y||p(g),c=(b=m.target)==null?void 0:b.closest("th");if(c&&Xe(c,"noclick")){St(c,"noclick");return}if(!g.sortable)return;const E=e.store.states;let S=E.sortProp.value,C;const L=E.sortingColumn.value;(L!==g||L===g&&L.order===null)&&(L&&(L.order=null),E.sortingColumn.value=g,S=g.property),x?C=g.order=x:C=g.order=null,E.sortProp.value=S,E.sortOrder.value=C,l==null||l.store.commit("changeSortCondition")};return{handleHeaderClick:s,handleHeaderContextMenu:i,handleMouseDown:d,handleMouseMove:f,handleMouseOut:v,handleSortClick:h,handleFilterClick:r}}function oo(e){const t=re(he),n=se("table");return{getHeaderRowStyle:a=>{const o=t==null?void 0:t.props.headerRowStyle;return typeof o=="function"?o.call(null,{rowIndex:a}):o},getHeaderRowClass:a=>{const o=[],u=t==null?void 0:t.props.headerRowClassName;return typeof u=="string"?o.push(u):typeof u=="function"&&o.push(u.call(null,{rowIndex:a})),o.join(" ")},getHeaderCellStyle:(a,o,u,d)=>{var f;let v=(f=t==null?void 0:t.props.headerCellStyle)!=null?f:{};typeof v=="function"&&(v=v.call(null,{rowIndex:a,columnIndex:o,row:u,column:d}));const p=Yt(o,d.fixed,e.store,u);return Pe(p,"left"),Pe(p,"right"),Object.assign({},v,p)},getHeaderCellClass:(a,o,u,d)=>{const f=Ut(n.b(),o,d.fixed,e.store,u),v=[d.id,d.order,d.headerAlign,d.className,d.labelClassName,...f];d.children||v.push("is-leaf"),d.sortable&&v.push("is-sortable");const p=t==null?void 0:t.props.headerCellClassName;return typeof p=="string"?v.push(p):typeof p=="function"&&v.push(p.call(null,{rowIndex:a,columnIndex:o,row:u,column:d})),v.push(n.e("cell")),v.filter(h=>Boolean(h)).join(" ")}}}const Cl=e=>{const t=[];return e.forEach(n=>{n.children?(t.push(n),t.push.apply(t,Cl(n.children))):t.push(n)}),t},io=e=>{let t=1;const n=(s,i)=>{if(i&&(s.level=i.level+1,t<s.level&&(t=s.level)),s.children){let a=0;s.children.forEach(o=>{n(o,s),a+=o.colSpan}),s.colSpan=a}else s.colSpan=1};e.forEach(s=>{s.level=1,n(s,void 0)});const l=[];for(let s=0;s<t;s++)l.push([]);return Cl(e).forEach(s=>{s.children?(s.rowSpan=1,s.children.forEach(i=>i.isSubColumn=!0)):s.rowSpan=t-s.level+1,l[s.level-1].push(s)}),l};function uo(e){const t=re(he),n=k(()=>io(e.store.states.originColumns.value));return{isGroup:k(()=>{const s=n.value.length>1;return s&&t&&(t.state.isGroup.value=!0),s}),toggleAllSelection:s=>{s.stopPropagation(),t==null||t.store.commit("toggleAllSelection")},columnRows:n}}var co=ce({name:"ElTableHeader",components:{ElCheckbox:He},props:{fixed:{type:String,default:""},store:{required:!0,type:Object},border:Boolean,defaultSort:{type:Object,default:()=>({prop:"",order:""})}},setup(e,{emit:t}){const n=ee(),l=re(he),r=se("table"),s=R({}),{onColumnsChange:i,onScrollableChange:a}=yl(l);Ge(async()=>{await Re(),await Re();const{prop:S,order:C}=e.defaultSort;l==null||l.store.commit("sort",{prop:S,order:C,init:!0})});const{handleHeaderClick:o,handleHeaderContextMenu:u,handleMouseDown:d,handleMouseMove:f,handleMouseOut:v,handleSortClick:p,handleFilterClick:h}=so(e,t),{getHeaderRowStyle:m,getHeaderRowClass:g,getHeaderCellStyle:y,getHeaderCellClass:b}=oo(e),{isGroup:x,toggleAllSelection:c,columnRows:E}=uo(e);return n.state={onColumnsChange:i,onScrollableChange:a},n.filterPanels=s,{ns:r,filterPanels:s,onColumnsChange:i,onScrollableChange:a,columnRows:E,getHeaderRowClass:g,getHeaderRowStyle:m,getHeaderCellClass:b,getHeaderCellStyle:y,handleHeaderClick:o,handleHeaderContextMenu:u,handleMouseDown:d,handleMouseMove:f,handleMouseOut:v,handleSortClick:p,handleFilterClick:h,isGroup:x,toggleAllSelection:c}},render(){const{ns:e,isGroup:t,columnRows:n,getHeaderCellStyle:l,getHeaderCellClass:r,getHeaderRowClass:s,getHeaderRowStyle:i,handleHeaderClick:a,handleHeaderContextMenu:o,handleMouseDown:u,handleMouseMove:d,handleSortClick:f,handleMouseOut:v,store:p,$parent:h}=this;let m=1;return P("thead",{class:{[e.is("group")]:t}},n.map((g,y)=>P("tr",{class:s(y),key:y,style:i(y)},g.map((b,x)=>(b.rowSpan>m&&(m=b.rowSpan),P("th",{class:r(y,x,g,b),colspan:b.colSpan,key:`${b.id}-thead`,rowspan:b.rowSpan,style:l(y,x,g,b),onClick:c=>a(c,b),onContextmenu:c=>o(c,b),onMousedown:c=>u(c,b),onMousemove:c=>d(c,b),onMouseout:v},[P("div",{class:["cell",b.filteredValue&&b.filteredValue.length>0?"highlight":""]},[b.renderHeader?b.renderHeader({column:b,$index:x,store:p,_self:h}):b.label,b.sortable&&P("span",{onClick:c=>f(c,b),class:"caret-wrapper"},[P("i",{onClick:c=>f(c,b,"ascending"),class:"sort-caret ascending"}),P("i",{onClick:c=>f(c,b,"descending"),class:"sort-caret descending"})]),b.filterable&&P(ro,{store:p,placement:b.filterPlacement||"bottom-start",column:b,upDataColumn:(c,E)=>{b[c]=E}})])]))))))}});function fo(e){const t=re(he),n=R(""),l=R(P("div")),{nextZIndex:r}=oa(),s=(p,h,m)=>{var g;const y=t,b=pt(p);let x;const c=(g=y==null?void 0:y.vnode.el)==null?void 0:g.dataset.prefix;b&&(x=wn({columns:e.store.states.columns.value},b,c),x&&(y==null||y.emit(`cell-${m}`,h,x,b,p))),y==null||y.emit(`row-${m}`,h,x,p)},i=(p,h)=>{s(p,h,"dblclick")},a=(p,h)=>{e.store.commit("setCurrentRow",h),s(p,h,"click")},o=(p,h)=>{s(p,h,"contextmenu")},u=ot(p=>{e.store.commit("setHoverRow",p)},30),d=ot(()=>{e.store.commit("setHoverRow",null)},30);return{handleDoubleClick:i,handleClick:a,handleContextMenu:o,handleMouseEnter:u,handleMouseLeave:d,handleCellMouseEnter:(p,h,m)=>{var g;const y=t,b=pt(p),x=(g=y==null?void 0:y.vnode.el)==null?void 0:g.dataset.prefix;if(b){const L=wn({columns:e.store.states.columns.value},b,x),N=y.hoverState={cell:b,column:L,row:h};y==null||y.emit("cell-mouse-enter",N.row,N.column,N.cell,p)}if(!m)return;const c=p.target.querySelector(".cell");if(!(Xe(c,`${x}-tooltip`)&&c.childNodes.length))return;const E=document.createRange();E.setStart(c,0),E.setEnd(c,c.childNodes.length);const S=Math.round(E.getBoundingClientRect().width),C=(Number.parseInt(Jt(c,"paddingLeft"),10)||0)+(Number.parseInt(Jt(c,"paddingRight"),10)||0);(S+C>c.offsetWidth||c.scrollWidth>c.offsetWidth)&&_s(t==null?void 0:t.refs.tableWrapper,b,b.innerText||b.textContent,r,m)},handleCellMouseLeave:p=>{if(!pt(p))return;const m=t==null?void 0:t.hoverState;t==null||t.emit("cell-mouse-leave",m==null?void 0:m.row,m==null?void 0:m.column,m==null?void 0:m.cell,p)},tooltipContent:n,tooltipTrigger:l}}function ho(e){const t=re(he),n=se("table");return{getRowStyle:(u,d)=>{const f=t==null?void 0:t.props.rowStyle;return typeof f=="function"?f.call(null,{row:u,rowIndex:d}):f||null},getRowClass:(u,d)=>{const f=[n.e("row")];(t==null?void 0:t.props.highlightCurrentRow)&&u===e.store.states.currentRow.value&&f.push("current-row"),e.stripe&&d%2===1&&f.push(n.em("row","striped"));const v=t==null?void 0:t.props.rowClassName;return typeof v=="string"?f.push(v):typeof v=="function"&&f.push(v.call(null,{row:u,rowIndex:d})),f},getCellStyle:(u,d,f,v)=>{const p=t==null?void 0:t.props.cellStyle;let h=p!=null?p:{};typeof p=="function"&&(h=p.call(null,{rowIndex:u,columnIndex:d,row:f,column:v}));const m=Yt(d,e==null?void 0:e.fixed,e.store);return Pe(m,"left"),Pe(m,"right"),Object.assign({},h,m)},getCellClass:(u,d,f,v,p)=>{const h=Ut(n.b(),d,e==null?void 0:e.fixed,e.store,void 0,p),m=[v.id,v.align,v.className,...h],g=t==null?void 0:t.props.cellClassName;return typeof g=="string"?m.push(g):typeof g=="function"&&m.push(g.call(null,{rowIndex:u,columnIndex:d,row:f,column:v})),m.push(n.e("cell")),m.filter(y=>Boolean(y)).join(" ")},getSpan:(u,d,f,v)=>{let p=1,h=1;const m=t==null?void 0:t.props.spanMethod;if(typeof m=="function"){const g=m({row:u,column:d,rowIndex:f,columnIndex:v});Array.isArray(g)?(p=g[0],h=g[1]):typeof g=="object"&&(p=g.rowspan,h=g.colspan)}return{rowspan:p,colspan:h}},getColspanRealWidth:(u,d,f)=>{if(d<1)return u[f].realWidth;const v=u.map(({realWidth:p,width:h})=>p||h).slice(f,f+d);return Number(v.reduce((p,h)=>Number(p)+Number(h),-1))}}}function vo(e){const t=re(he),n=se("table"),{handleDoubleClick:l,handleClick:r,handleContextMenu:s,handleMouseEnter:i,handleMouseLeave:a,handleCellMouseEnter:o,handleCellMouseLeave:u,tooltipContent:d,tooltipTrigger:f}=fo(e),{getRowStyle:v,getRowClass:p,getCellStyle:h,getCellClass:m,getSpan:g,getColspanRealWidth:y}=ho(e),b=k(()=>e.store.states.columns.value.findIndex(({type:C})=>C==="default")),x=(C,L)=>{const N=t.props.rowKey;return N?j(C,N):L},c=(C,L,N,W=!1)=>{const{tooltipEffect:z,tooltipOptions:$,store:V}=e,{indent:G,columns:Q}=V.states,Z=p(C,L);let ve=!0;return N&&(Z.push(n.em("row",`level-${N.level}`)),ve=N.display),P("tr",{style:[ve?null:{display:"none"},v(C,L)],class:Z,key:x(C,L),onDblclick:w=>l(w,C),onClick:w=>r(w,C),onContextmenu:w=>s(w,C),onMouseenter:()=>i(L),onMouseleave:a},Q.value.map((w,F)=>{const{rowspan:_,colspan:U}=g(C,w,L,F);if(!_||!U)return null;const X={...w};X.realWidth=y(Q.value,U,F);const te={store:e.store,_self:e.context||t,column:X,row:C,$index:L,cellIndex:F,expanded:W};F===b.value&&N&&(te.treeNode={indent:N.level*G.value,level:N.level},typeof N.expanded=="boolean"&&(te.treeNode.expanded=N.expanded,"loading"in N&&(te.treeNode.loading=N.loading),"noLazyChildren"in N&&(te.treeNode.noLazyChildren=N.noLazyChildren)));const ne=`${L},${F}`,oe=X.columnKey||X.rawColumnKey||"",fe=E(F,w,te),q=w.showOverflowTooltip&&el({effect:z},$,w.showOverflowTooltip);return P("td",{style:h(L,F,C,w),class:m(L,F,C,w,U-1),key:`${oe}${ne}`,rowspan:_,colspan:U,onMouseenter:pe=>o(pe,C,q),onMouseleave:u},[fe])}))},E=(C,L,N)=>L.renderCell(N);return{wrappedRowRender:(C,L)=>{const N=e.store,{isRowExpanded:W,assertRowKey:z}=N,{treeData:$,lazyTreeNodeMap:V,childrenColumnName:G,rowKey:Q}=N.states,Z=N.states.columns.value;if(Z.some(({type:T})=>T==="expand")){const T=W(C),w=c(C,L,void 0,T),F=t.renderExpanded;return T?F?[[w,P("tr",{key:`expanded-row__${w.key}`},[P("td",{colspan:Z.length,class:`${n.e("cell")} ${n.e("expanded-cell")}`},[F({row:C,$index:L,store:N,expanded:T})])])]]:(console.error("[Element Error]renderExpanded is required."),w):[[w]]}else if(Object.keys($.value).length){z();const T=j(C,Q.value);let w=$.value[T],F=null;w&&(F={expanded:w.expanded,level:w.level,display:!0},typeof w.lazy=="boolean"&&(typeof w.loaded=="boolean"&&w.loaded&&(F.noLazyChildren=!(w.children&&w.children.length)),F.loading=w.loading));const _=[c(C,L,F)];if(w){let U=0;const X=(ne,oe)=>{!(ne&&ne.length&&oe)||ne.forEach(fe=>{const q={display:oe.display&&oe.expanded,level:oe.level+1,expanded:!1,noLazyChildren:!1,loading:!1},pe=j(fe,Q.value);if(pe==null)throw new Error("For nested data item, row-key is required.");if(w={...$.value[pe]},w&&(q.expanded=w.expanded,w.level=w.level||q.level,w.display=!!(w.expanded&&q.display),typeof w.lazy=="boolean"&&(typeof w.loaded=="boolean"&&w.loaded&&(q.noLazyChildren=!(w.children&&w.children.length)),q.loading=w.loading)),U++,_.push(c(fe,L+U,q)),w){const Ue=V.value[pe]||fe[G.value];X(Ue,w)}})};w.display=!0;const te=V.value[T]||C[G.value];X(te,w)}return _}else return c(C,L,void 0)},tooltipContent:d,tooltipTrigger:f}}const po={store:{required:!0,type:Object},stripe:Boolean,tooltipEffect:String,tooltipOptions:{type:Object},context:{default:()=>({}),type:Object},rowClassName:[String,Function],rowStyle:[Object,Function],fixed:{type:String,default:""},highlight:Boolean};var go=ce({name:"ElTableBody",props:po,setup(e){const t=ee(),n=re(he),l=se("table"),{wrappedRowRender:r,tooltipContent:s,tooltipTrigger:i}=vo(e),{onColumnsChange:a,onScrollableChange:o}=yl(n);return ie(e.store.states.hoverRow,(u,d)=>{if(!e.store.states.isComplex.value||!ke)return;let f=window.requestAnimationFrame;f||(f=v=>window.setTimeout(v,16)),f(()=>{const v=t==null?void 0:t.vnode.el,p=Array.from((v==null?void 0:v.children)||[]).filter(g=>g==null?void 0:g.classList.contains(`${l.e("row")}`)),h=p[d],m=p[u];h&&St(h,"hover-row"),m&&Dn(m,"hover-row")})}),zt(()=>{var u;(u=me)==null||u()}),{ns:l,onColumnsChange:a,onScrollableChange:o,wrappedRowRender:r,tooltipContent:s,tooltipTrigger:i}},render(){const{wrappedRowRender:e,store:t}=this,n=t.states.data.value||[];return P("tbody",{},[n.reduce((l,r)=>l.concat(e(r,l.length)),[])])}});function qt(e){const t=e.tableLayout==="auto";let n=e.columns||[];t&&n.every(r=>r.width===void 0)&&(n=[]);const l=r=>{const s={key:`${e.tableLayout}_${r.id}`,style:{},name:void 0};return t?s.style={width:`${r.width}px`}:s.name=r.id,s};return P("colgroup",{},n.map(r=>P("col",l(r))))}qt.props=["columns","tableLayout"];function mo(){const e=re(he),t=e==null?void 0:e.store,n=k(()=>t.states.fixedLeafColumnsLength.value),l=k(()=>t.states.rightFixedColumns.value.length),r=k(()=>t.states.columns.value.length),s=k(()=>t.states.fixedColumns.value.length),i=k(()=>t.states.rightFixedColumns.value.length);return{leftFixedLeafCount:n,rightFixedLeafCount:l,columnsCount:r,leftFixedCount:s,rightFixedCount:i,columns:t.states.columns}}function bo(e){const{columns:t}=mo(),n=se("table");return{getCellClasses:(s,i)=>{const a=s[i],o=[n.e("cell"),a.id,a.align,a.labelClassName,...Ut(n.b(),i,a.fixed,e.store)];return a.className&&o.push(a.className),a.children||o.push(n.is("leaf")),o},getCellStyles:(s,i)=>{const a=Yt(i,s.fixed,e.store);return Pe(a,"left"),Pe(a,"right"),a},columns:t}}var yo=ce({name:"ElTableFooter",props:{fixed:{type:String,default:""},store:{required:!0,type:Object},summaryMethod:Function,sumText:String,border:Boolean,defaultSort:{type:Object,default:()=>({prop:"",order:""})}},setup(e){const{getCellClasses:t,getCellStyles:n,columns:l}=bo(e);return{ns:se("table"),getCellClasses:t,getCellStyles:n,columns:l}},render(){const{columns:e,getCellStyles:t,getCellClasses:n,summaryMethod:l,sumText:r,ns:s}=this,i=this.store.states.data.value;let a=[];return l?a=l({columns:e,data:i}):e.forEach((o,u)=>{if(u===0){a[u]=r;return}const d=i.map(h=>Number(h[o.property])),f=[];let v=!0;d.forEach(h=>{if(!Number.isNaN(+h)){v=!1;const m=`${h}`.split(".")[1];f.push(m?m.length:0)}});const p=Math.max.apply(null,f);v?a[u]="":a[u]=d.reduce((h,m)=>{const g=Number(m);return Number.isNaN(+g)?h:Number.parseFloat((h+m).toFixed(Math.min(p,20)))},0)}),P("table",{class:s.e("footer"),cellspacing:"0",cellpadding:"0",border:"0"},[qt({columns:e}),P("tbody",[P("tr",{},[...e.map((o,u)=>P("td",{key:u,colspan:o.colSpan,rowspan:o.rowSpan,class:n(e,u),style:t(o,u)},[P("div",{class:["cell",o.labelClassName]},[a[u]])]))])])])}});function Co(e){return{setCurrentRow:d=>{e.commit("setCurrentRow",d)},getSelectionRows:()=>e.getSelectionRows(),toggleRowSelection:(d,f)=>{e.toggleRowSelection(d,f,!1),e.updateAllSelected()},clearSelection:()=>{e.clearSelection()},clearFilter:d=>{e.clearFilter(d)},toggleAllSelection:()=>{e.commit("toggleAllSelection")},toggleRowExpansion:(d,f)=>{e.toggleRowExpansionAdapter(d,f)},clearSort:()=>{e.clearSort()},sort:(d,f)=>{e.commit("sort",{prop:d,order:f})}}}function wo(e,t,n,l){const r=R(!1),s=R(null),i=R(!1),a=T=>{i.value=T},o=R({width:null,height:null,headerHeight:null}),u=R(!1),d={display:"inline-block",verticalAlign:"middle"},f=R(),v=R(0),p=R(0),h=R(0),m=R(0);Ie(()=>{t.setHeight(e.height)}),Ie(()=>{t.setMaxHeight(e.maxHeight)}),ie(()=>[e.currentRowKey,n.states.rowKey],([T,w])=>{!O(w)||!O(T)||n.setCurrentRowKey(`${T}`)},{immediate:!0}),ie(()=>e.data,T=>{l.store.commit("setData",T)},{immediate:!0,deep:!0}),Ie(()=>{e.expandRowKeys&&n.setExpandRowKeysAdapter(e.expandRowKeys)});const g=()=>{l.store.commit("setHoverRow",null),l.hoverState&&(l.hoverState=null)},y=(T,w)=>{const{pixelX:F,pixelY:_}=w;Math.abs(F)>=Math.abs(_)&&(l.refs.bodyWrapper.scrollLeft+=w.pixelX/5)},b=k(()=>e.height||e.maxHeight||n.states.fixedColumns.value.length>0||n.states.rightFixedColumns.value.length>0),x=k(()=>({width:t.bodyWidth.value?`${t.bodyWidth.value}px`:""})),c=()=>{b.value&&t.updateElsHeight(),t.updateColumnsWidth(),requestAnimationFrame(L)};Ge(async()=>{await Re(),n.updateColumns(),N(),requestAnimationFrame(c);const T=l.vnode.el,w=l.refs.headerWrapper;e.flexible&&T&&T.parentElement&&(T.parentElement.style.minWidth="0"),o.value={width:f.value=T.offsetWidth,height:T.offsetHeight,headerHeight:e.showHeader&&w?w.offsetHeight:null},n.states.columns.value.forEach(F=>{F.filteredValue&&F.filteredValue.length&&l.store.commit("filterChange",{column:F,values:F.filteredValue,silent:!0})}),l.$ready=!0});const E=(T,w)=>{if(!T)return;const F=Array.from(T.classList).filter(_=>!_.startsWith("is-scrolling-"));F.push(t.scrollX.value?w:"is-scrolling-none"),T.className=F.join(" ")},S=T=>{const{tableWrapper:w}=l.refs;E(w,T)},C=T=>{const{tableWrapper:w}=l.refs;return!!(w&&w.classList.contains(T))},L=function(){if(!l.refs.scrollBarRef)return;if(!t.scrollX.value){const ne="is-scrolling-none";C(ne)||S(ne);return}const T=l.refs.scrollBarRef.wrapRef;if(!T)return;const{scrollLeft:w,offsetWidth:F,scrollWidth:_}=T,{headerWrapper:U,footerWrapper:X}=l.refs;U&&(U.scrollLeft=w),X&&(X.scrollLeft=w);const te=_-F-1;w>=te?S("is-scrolling-right"):S(w===0?"is-scrolling-left":"is-scrolling-middle")},N=()=>{!l.refs.scrollBarRef||(l.refs.scrollBarRef.wrapRef&&en(l.refs.scrollBarRef.wrapRef,"scroll",L,{passive:!0}),e.fit?tn(l.vnode.el,W):en(window,"resize",W),tn(l.refs.bodyWrapper,()=>{var T,w;W(),(w=(T=l.refs)==null?void 0:T.scrollBarRef)==null||w.update()}))},W=()=>{var T,w,F;const _=l.vnode.el;if(!l.$ready||!_)return;let U=!1;const{width:X,height:te,headerHeight:ne}=o.value,oe=f.value=_.offsetWidth;X!==oe&&(U=!0);const fe=_.offsetHeight;(e.height||b.value)&&te!==fe&&(U=!0);const q=e.tableLayout==="fixed"?l.refs.headerWrapper:(T=l.refs.tableHeaderRef)==null?void 0:T.$el;e.showHeader&&(q==null?void 0:q.offsetHeight)!==ne&&(U=!0),v.value=((w=l.refs.tableWrapper)==null?void 0:w.scrollHeight)||0,h.value=(q==null?void 0:q.scrollHeight)||0,m.value=((F=l.refs.footerWrapper)==null?void 0:F.offsetHeight)||0,p.value=v.value-h.value-m.value,U&&(o.value={width:oe,height:fe,headerHeight:e.showHeader&&(q==null?void 0:q.offsetHeight)||0},c())},z=wt(),$=k(()=>{const{bodyWidth:T,scrollY:w,gutterWidth:F}=t;return T.value?`${T.value-(w.value?F:0)}px`:""}),V=k(()=>e.maxHeight?"fixed":e.tableLayout),G=k(()=>{if(e.data&&e.data.length)return null;let T="100%";e.height&&p.value&&(T=`${p.value}px`);const w=f.value;return{width:w?`${w}px`:"",height:T}}),Q=k(()=>e.height?{height:Number.isNaN(Number(e.height))?e.height:`${e.height}px`}:e.maxHeight?{maxHeight:Number.isNaN(Number(e.maxHeight))?e.maxHeight:`${e.maxHeight}px`}:{}),Z=k(()=>{if(e.height)return{height:"100%"};if(e.maxHeight){if(Number.isNaN(Number(e.maxHeight)))return{maxHeight:`calc(${e.maxHeight} - ${h.value+m.value}px)`};{const T=e.maxHeight;if(v.value>=Number(T))return{maxHeight:`${v.value-h.value-m.value}px`}}}return{}});return{isHidden:r,renderExpanded:s,setDragVisible:a,isGroup:u,handleMouseLeave:g,handleHeaderFooterMousewheel:y,tableSize:z,emptyBlockStyle:G,handleFixedMousewheel:(T,w)=>{const F=l.refs.bodyWrapper;if(Math.abs(w.spinY)>0){const _=F.scrollTop;w.pixelY<0&&_!==0&&T.preventDefault(),w.pixelY>0&&F.scrollHeight-F.clientHeight>_&&T.preventDefault(),F.scrollTop+=Math.ceil(w.pixelY/5)}else F.scrollLeft+=Math.ceil(w.pixelX/5)},resizeProxyVisible:i,bodyWidth:$,resizeState:o,doLayout:c,tableBodyStyles:x,tableLayout:V,scrollbarViewStyle:d,tableInnerStyle:Q,scrollbarStyle:Z}}function So(e){const t=R(),n=()=>{const r=e.vnode.el.querySelector(".hidden-columns"),s={childList:!0,subtree:!0},i=e.store.states.updateOrderFns;t.value=new MutationObserver(()=>{i.forEach(a=>a())}),t.value.observe(r,s)};Ge(()=>{n()}),zt(()=>{var l;(l=t.value)==null||l.disconnect()})}var xo={data:{type:Array,default:()=>[]},size:It,width:[String,Number],height:[String,Number],maxHeight:[String,Number],fit:{type:Boolean,default:!0},stripe:Boolean,border:Boolean,rowKey:[String,Function],showHeader:{type:Boolean,default:!0},showSummary:Boolean,sumText:String,summaryMethod:Function,rowClassName:[String,Function],rowStyle:[Object,Function],cellClassName:[String,Function],cellStyle:[Object,Function],headerRowClassName:[String,Function],headerRowStyle:[Object,Function],headerCellClassName:[String,Function],headerCellStyle:[Object,Function],highlightCurrentRow:Boolean,currentRowKey:[String,Number],emptyText:String,expandRowKeys:Array,defaultExpandAll:Boolean,defaultSort:Object,tooltipEffect:String,tooltipOptions:Object,spanMethod:Function,selectOnIndeterminate:{type:Boolean,default:!0},indent:{type:Number,default:16},treeProps:{type:Object,default:()=>({hasChildren:"hasChildren",children:"children"})},lazy:Boolean,load:Function,style:{type:Object,default:()=>({})},className:{type:String,default:""},tableLayout:{type:String,default:"fixed"},scrollbarAlwaysOn:{type:Boolean,default:!1},flexible:Boolean};const Eo=()=>{const e=R(),t=(s,i)=>{const a=e.value;a&&a.scrollTo(s,i)},n=(s,i)=>{const a=e.value;a&&bt(i)&&["Top","Left"].includes(s)&&a[`setScroll${s}`](i)};return{scrollBarRef:e,scrollTo:t,setScrollTop:s=>n("Top",s),setScrollLeft:s=>n("Left",s)}};let Ro=1;const Lo=ce({name:"ElTable",directives:{Mousewheel:vs},components:{TableHeader:co,TableBody:go,TableFooter:yo,ElScrollbar:Pn,hColgroup:qt},props:xo,emits:["select","select-all","selection-change","cell-mouse-enter","cell-mouse-leave","cell-contextmenu","cell-click","cell-dblclick","row-click","row-contextmenu","row-dblclick","header-click","header-contextmenu","sort-change","filter-change","current-change","header-dragend","expand-change"],setup(e){const{t}=Wn(),n=se("table"),l=ee();kn(he,l);const r=js(l,e);l.store=r;const s=new Zs({store:l.store,table:l,fit:e.fit,showHeader:e.showHeader});l.layout=s;const i=k(()=>(r.states.data.value||[]).length===0),{setCurrentRow:a,getSelectionRows:o,toggleRowSelection:u,clearSelection:d,clearFilter:f,toggleAllSelection:v,toggleRowExpansion:p,clearSort:h,sort:m}=Co(r),{isHidden:g,renderExpanded:y,setDragVisible:b,isGroup:x,handleMouseLeave:c,handleHeaderFooterMousewheel:E,tableSize:S,emptyBlockStyle:C,handleFixedMousewheel:L,resizeProxyVisible:N,bodyWidth:W,resizeState:z,doLayout:$,tableBodyStyles:V,tableLayout:G,scrollbarViewStyle:Q,tableInnerStyle:Z,scrollbarStyle:ve}=wo(e,s,r,l),{scrollBarRef:T,scrollTo:w,setScrollLeft:F,setScrollTop:_}=Eo(),U=ot($,50),X=`${n.namespace.value}-table_${Ro++}`;l.tableId=X,l.state={isGroup:x,resizeState:z,doLayout:$,debouncedUpdateLayout:U};const te=k(()=>e.sumText||t("el.table.sumText")),ne=k(()=>e.emptyText||t("el.table.emptyText"));return So(l),{ns:n,layout:s,store:r,handleHeaderFooterMousewheel:E,handleMouseLeave:c,tableId:X,tableSize:S,isHidden:g,isEmpty:i,renderExpanded:y,resizeProxyVisible:N,resizeState:z,isGroup:x,bodyWidth:W,tableBodyStyles:V,emptyBlockStyle:C,debouncedUpdateLayout:U,handleFixedMousewheel:L,setCurrentRow:a,getSelectionRows:o,toggleRowSelection:u,clearSelection:d,clearFilter:f,toggleAllSelection:v,toggleRowExpansion:p,clearSort:h,doLayout:$,sort:m,t,setDragVisible:b,context:l,computedSumText:te,computedEmptyText:ne,tableLayout:G,scrollbarViewStyle:Q,tableInnerStyle:Z,scrollbarStyle:ve,scrollBarRef:T,scrollTo:w,setScrollLeft:F,setScrollTop:_}}}),Ao=["data-prefix"],To={ref:"hiddenColumns",class:"hidden-columns"};function Oo(e,t,n,l,r,s){const i=de("hColgroup"),a=de("table-header"),o=de("table-body"),u=de("el-scrollbar"),d=de("table-footer"),f=In("mousewheel");return K(),Y("div",{ref:"tableWrapper",class:B([{[e.ns.m("fit")]:e.fit,[e.ns.m("striped")]:e.stripe,[e.ns.m("border")]:e.border||e.isGroup,[e.ns.m("hidden")]:e.isHidden,[e.ns.m("group")]:e.isGroup,[e.ns.m("fluid-height")]:e.maxHeight,[e.ns.m("scrollable-x")]:e.layout.scrollX.value,[e.ns.m("scrollable-y")]:e.layout.scrollY.value,[e.ns.m("enable-row-hover")]:!e.store.states.isComplex.value,[e.ns.m("enable-row-transition")]:(e.store.states.data.value||[]).length!==0&&(e.store.states.data.value||[]).length<100,"has-footer":e.showSummary},e.ns.m(e.tableSize),e.className,e.ns.b(),e.ns.m(`layout-${e.tableLayout}`)]),style:Le(e.style),"data-prefix":e.ns.namespace.value,onMouseleave:t[0]||(t[0]=v=>e.handleMouseLeave())},[ae("div",{class:B(e.ns.e("inner-wrapper")),style:Le(e.tableInnerStyle)},[ae("div",To,[Fe(e.$slots,"default")],512),e.showHeader&&e.tableLayout==="fixed"?xe((K(),Y("div",{key:0,ref:"headerWrapper",class:B(e.ns.e("header-wrapper"))},[ae("table",{ref:"tableHeader",class:B(e.ns.e("header")),style:Le(e.tableBodyStyles),border:"0",cellpadding:"0",cellspacing:"0"},[Ce(i,{columns:e.store.states.columns.value,"table-layout":e.tableLayout},null,8,["columns","table-layout"]),Ce(a,{ref:"tableHeaderRef",border:e.border,"default-sort":e.defaultSort,store:e.store,onSetDragVisible:e.setDragVisible},null,8,["border","default-sort","store","onSetDragVisible"])],6)],2)),[[f,e.handleHeaderFooterMousewheel]]):ye("v-if",!0),ae("div",{ref:"bodyWrapper",class:B(e.ns.e("body-wrapper"))},[Ce(u,{ref:"scrollBarRef","view-style":e.scrollbarViewStyle,"wrap-style":e.scrollbarStyle,always:e.scrollbarAlwaysOn},{default:be(()=>[ae("table",{ref:"tableBody",class:B(e.ns.e("body")),cellspacing:"0",cellpadding:"0",border:"0",style:Le({width:e.bodyWidth,tableLayout:e.tableLayout})},[Ce(i,{columns:e.store.states.columns.value,"table-layout":e.tableLayout},null,8,["columns","table-layout"]),e.showHeader&&e.tableLayout==="auto"?(K(),Te(a,{key:0,ref:"tableHeaderRef",border:e.border,"default-sort":e.defaultSort,store:e.store,onSetDragVisible:e.setDragVisible},null,8,["border","default-sort","store","onSetDragVisible"])):ye("v-if",!0),Ce(o,{context:e.context,highlight:e.highlightCurrentRow,"row-class-name":e.rowClassName,"tooltip-effect":e.tooltipEffect,"tooltip-options":e.tooltipOptions,"row-style":e.rowStyle,store:e.store,stripe:e.stripe},null,8,["context","highlight","row-class-name","tooltip-effect","tooltip-options","row-style","store","stripe"])],6),e.isEmpty?(K(),Y("div",{key:0,ref:"emptyBlock",style:Le(e.emptyBlockStyle),class:B(e.ns.e("empty-block"))},[ae("span",{class:B(e.ns.e("empty-text"))},[Fe(e.$slots,"empty",{},()=>[it(Se(e.computedEmptyText),1)])],2)],6)):ye("v-if",!0),e.$slots.append?(K(),Y("div",{key:1,ref:"appendWrapper",class:B(e.ns.e("append-wrapper"))},[Fe(e.$slots,"append")],2)):ye("v-if",!0)]),_:3},8,["view-style","wrap-style","always"])],2),e.showSummary?xe((K(),Y("div",{key:1,ref:"footerWrapper",class:B(e.ns.e("footer-wrapper"))},[Ce(d,{border:e.border,"default-sort":e.defaultSort,store:e.store,style:Le(e.tableBodyStyles),"sum-text":e.computedSumText,"summary-method":e.summaryMethod},null,8,["border","default-sort","store","style","sum-text","summary-method"])],2)),[[nn,!e.isEmpty],[f,e.handleHeaderFooterMousewheel]]):ye("v-if",!0),e.border||e.isGroup?(K(),Y("div",{key:2,class:B(e.ns.e("border-left-patch"))},null,2)):ye("v-if",!0)],6),xe(ae("div",{ref:"resizeProxy",class:B(e.ns.e("column-resize-proxy"))},null,2),[[nn,e.resizeProxyVisible]])],46,Ao)}var No=Ve(Lo,[["render",Oo],["__file","/home/runner/work/element-plus/element-plus/packages/components/table/src/table.vue"]]);const Mo={selection:"table-column--selection",expand:"table__expand-column"},Fo={default:{order:""},selection:{width:48,minWidth:48,realWidth:48,order:""},expand:{width:48,minWidth:48,realWidth:48,order:""},index:{width:48,minWidth:48,realWidth:48,order:""}},ko=e=>Mo[e]||"",$o={selection:{renderHeader({store:e}){function t(){return e.states.data.value&&e.states.data.value.length===0}return P(He,{disabled:t(),size:e.states.tableSize.value,indeterminate:e.states.selection.value.length>0&&!e.states.isAllSelected.value,"onUpdate:modelValue":e.toggleAllSelection,modelValue:e.states.isAllSelected.value})},renderCell({row:e,column:t,store:n,$index:l}){return P(He,{disabled:t.selectable?!t.selectable.call(null,e,l):!1,size:n.states.tableSize.value,onChange:()=>{n.commit("rowSelectedChanged",e)},onClick:r=>r.stopPropagation(),modelValue:n.isSelected(e)})},sortable:!1,resizable:!1},index:{renderHeader({column:e}){return e.label||"#"},renderCell({column:e,$index:t}){let n=t+1;const l=e.index;return typeof l=="number"?n=t+l:typeof l=="function"&&(n=l(t)),P("div",{},[n])},sortable:!1},expand:{renderHeader({column:e}){return e.label||""},renderCell({row:e,store:t,expanded:n}){const{ns:l}=t,r=[l.e("expand-icon")];return n&&r.push(l.em("expand-icon","expanded")),P("div",{class:r,onClick:function(i){i.stopPropagation(),t.toggleRowExpansion(e)}},{default:()=>[P(Kt,null,{default:()=>[P(Kn)]})]})},sortable:!1,resizable:!1}};function Ho({row:e,column:t,$index:n}){var l;const r=t.property,s=r&&ia(e,r).value;return t&&t.formatter?t.formatter(e,t,s,n):((l=s==null?void 0:s.toString)==null?void 0:l.call(s))||""}function Po({row:e,treeNode:t,store:n},l=!1){const{ns:r}=n;if(!t)return l?[P("span",{class:r.e("placeholder")})]:null;const s=[],i=function(a){a.stopPropagation(),!t.loading&&n.loadOrToggle(e)};if(t.indent&&s.push(P("span",{class:r.e("indent"),style:{"padding-left":`${t.indent}px`}})),typeof t.expanded=="boolean"&&!t.noLazyChildren){const a=[r.e("expand-icon"),t.expanded?r.em("expand-icon","expanded"):""];let o=Kn;t.loading&&(o=ua),s.push(P("div",{class:a,onClick:i},{default:()=>[P(Kt,{class:{[r.is("loading")]:t.loading}},{default:()=>[P(o)]})]}))}else s.push(P("span",{class:r.e("placeholder")}));return s}function En(e,t){return e.reduce((n,l)=>(n[l]=l,n),t)}function Wo(e,t){const n=ee();return{registerComplexWatchers:()=>{const s=["fixed"],i={realWidth:"width",realMinWidth:"minWidth"},a=En(s,i);Object.keys(a).forEach(o=>{const u=i[o];_e(t,u)&&ie(()=>t[u],d=>{let f=d;u==="width"&&o==="realWidth"&&(f=Gt(d)),u==="minWidth"&&o==="realMinWidth"&&(f=vl(d)),n.columnConfig.value[u]=f,n.columnConfig.value[o]=f;const v=u==="fixed";e.value.store.scheduleLayout(v)})})},registerNormalWatchers:()=>{const s=["label","filters","filterMultiple","sortable","index","formatter","className","labelClassName","showOverflowTooltip"],i={property:"prop",align:"realAlign",headerAlign:"realHeaderAlign"},a=En(s,i);Object.keys(a).forEach(o=>{const u=i[o];_e(t,u)&&ie(()=>t[u],d=>{n.columnConfig.value[o]=d})})}}}function Io(e,t,n){const l=ee(),r=R(""),s=R(!1),i=R(),a=R(),o=se("table");Ie(()=>{i.value=e.align?`is-${e.align}`:null,i.value}),Ie(()=>{a.value=e.headerAlign?`is-${e.headerAlign}`:i.value,a.value});const u=k(()=>{let c=l.vnode.vParent||l.parent;for(;c&&!c.tableId&&!c.columnId;)c=c.vnode.vParent||c.parent;return c}),d=k(()=>{const{store:c}=l.parent;if(!c)return!1;const{treeData:E}=c.states,S=E.value;return S&&Object.keys(S).length>0}),f=R(Gt(e.width)),v=R(vl(e.minWidth)),p=c=>(f.value&&(c.width=f.value),v.value&&(c.minWidth=v.value),!f.value&&v.value&&(c.width=void 0),c.minWidth||(c.minWidth=80),c.realWidth=Number(c.width===void 0?c.minWidth:c.width),c),h=c=>{const E=c.type,S=$o[E]||{};Object.keys(S).forEach(L=>{const N=S[L];L!=="className"&&N!==void 0&&(c[L]=N)});const C=ko(E);if(C){const L=`${O(o.namespace)}-${C}`;c.className=c.className?`${c.className} ${L}`:L}return c},m=c=>{Array.isArray(c)?c.forEach(S=>E(S)):E(c);function E(S){var C;((C=S==null?void 0:S.type)==null?void 0:C.name)==="ElTableColumn"&&(S.vParent=l)}};return{columnId:r,realAlign:i,isSubColumn:s,realHeaderAlign:a,columnOrTableParent:u,setColumnWidth:p,setColumnForcedProps:h,setColumnRenders:c=>{e.renderHeader||c.type!=="selection"&&(c.renderHeader=S=>{l.columnConfig.value.label;const C=t.header;return C?C(S):c.label});let E=c.renderCell;return c.type==="expand"?(c.renderCell=S=>P("div",{class:"cell"},[E(S)]),n.value.renderExpanded=S=>t.default?t.default(S):t.default):(E=E||Ho,c.renderCell=S=>{let C=null;if(t.default){const z=t.default(S);C=z.some($=>$.type!==da)?z:E(S)}else C=E(S);const L=d.value&&S.cellIndex===0&&S.column.type!=="selection",N=Po(S,L),W={class:"cell",style:{}};return c.showOverflowTooltip&&(W.class=`${W.class} ${O(o.namespace)}-tooltip`,W.style={width:`${(S.column.realWidth||Number(S.column.width))-1}px`}),m(C),P("div",W,[N,C])}),c},getPropsData:(...c)=>c.reduce((E,S)=>(Array.isArray(S)&&S.forEach(C=>{E[C]=e[C]}),E),{}),getColumnElIndex:(c,E)=>Array.prototype.indexOf.call(c,E),updateColumnOrder:()=>{n.value.store.commit("updateColumnOrder",l.columnConfig.value)}}}var Bo={type:{type:String,default:"default"},label:String,className:String,labelClassName:String,property:String,prop:String,width:{type:[String,Number],default:""},minWidth:{type:[String,Number],default:""},renderHeader:Function,sortable:{type:[Boolean,String],default:!1},sortMethod:Function,sortBy:[String,Function,Array],resizable:{type:Boolean,default:!0},columnKey:String,align:String,headerAlign:String,showOverflowTooltip:[Boolean,Object],fixed:[Boolean,String],formatter:Function,selectable:Function,reserveSelection:Boolean,filterMethod:Function,filteredValue:Array,filters:Array,filterPlacement:String,filterMultiple:{type:Boolean,default:!0},index:[Number,Function],sortOrders:{type:Array,default:()=>["ascending","descending",null],validator:e=>e.every(t=>["ascending","descending",null].includes(t))}};let Do=1;var wl=ce({name:"ElTableColumn",components:{ElCheckbox:He},props:Bo,setup(e,{slots:t}){const n=ee(),l=R({}),r=k(()=>{let x=n.parent;for(;x&&!x.tableId;)x=x.parent;return x}),{registerNormalWatchers:s,registerComplexWatchers:i}=Wo(r,e),{columnId:a,isSubColumn:o,realHeaderAlign:u,columnOrTableParent:d,setColumnWidth:f,setColumnForcedProps:v,setColumnRenders:p,getPropsData:h,getColumnElIndex:m,realAlign:g,updateColumnOrder:y}=Io(e,t,r),b=d.value;a.value=`${b.tableId||b.columnId}_column_${Do++}`,Bn(()=>{o.value=r.value!==b;const x=e.type||"default",c=e.sortable===""?!0:e.sortable,E={...Fo[x],id:a.value,type:x,property:e.prop||e.property,align:g,headerAlign:u,showOverflowTooltip:e.showOverflowTooltip,filterable:e.filters||e.filterMethod,filteredValue:[],filterPlacement:"",isColumnGroup:!1,isSubColumn:!1,filterOpened:!1,sortable:c,index:e.index,rawColumnKey:n.vnode.key};let W=h(["columnKey","label","className","labelClassName","type","renderHeader","formatter","fixed","resizable"],["sortMethod","sortBy","sortOrders"],["selectable","reserveSelection"],["filterMethod","filters","filterMultiple","filterOpened","filteredValue","filterPlacement"]);W=Bs(E,W),W=Ks(p,f,v)(W),l.value=W,s(),i()}),Ge(()=>{var x;const c=d.value,E=o.value?c.vnode.el.children:(x=c.refs.hiddenColumns)==null?void 0:x.children,S=()=>m(E||[],n.vnode.el);l.value.getColumnIndex=S,S()>-1&&r.value.store.commit("insertColumn",l.value,o.value?c.columnConfig.value:null,y)}),ca(()=>{r.value.store.commit("removeColumn",l.value,o.value?b.columnConfig.value:null,y)}),n.columnId=a.value,n.columnConfig=l},render(){var e,t,n;try{const l=(t=(e=this.$slots).default)==null?void 0:t.call(e,{row:{},column:{},$index:-1}),r=[];if(Array.isArray(l))for(const i of l)((n=i.type)==null?void 0:n.name)==="ElTableColumn"||i.shapeFlag&2?r.push(i):i.type===at&&Array.isArray(i.children)&&i.children.forEach(a=>{(a==null?void 0:a.patchFlag)!==1024&&!mt(a==null?void 0:a.children)&&r.push(a)});return P("div",r)}catch{return P("div",[])}}});const Go=Hn(No,{TableColumn:wl}),Uo=Dt(wl);export{os as C,Uo as E,Go as a,ot as d,Ka as f,ts as i};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
