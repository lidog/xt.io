import{aw as V,aF as Z,aN as G,aW as O,Z as A,ar as Q,J as W,bJ as _,K as M,o as E,c as X,a1 as I,a6 as b,a2 as f,u as e,a7 as x,b as R,w as v,a0 as K,a9 as ee,ao as oe,a8 as U,ab as q,aa as H,bK as se,bL as te,_ as ae,bc as j,$ as ne,a as z,ae as le,a3 as re,bb as ie,b5 as de,bM as ce,aI as ue,ba as me,bd as fe,ag as pe}from"./index.d0210e13.js";import{b as ge,c as ve,d as be,a as he,u as ye,e as Ce,E as Ee}from"./el-overlay.a5c5a263.js";const ke=(r,i,d)=>{let h={offsetX:0,offsetY:0};const a=t=>{const g=t.clientX,C=t.clientY,{offsetX:c,offsetY:u}=h,s=r.value.getBoundingClientRect(),m=s.left,k=s.top,T=s.width,F=s.height,S=document.documentElement.clientWidth,$=document.documentElement.clientHeight,B=-m+c,Y=-k+u,N=S-m-T+c,P=$-k-F+u,L=D=>{const o=Math.min(Math.max(c+D.clientX-g,B),N),l=Math.min(Math.max(u+D.clientY-C,Y),P);h={offsetX:o,offsetY:l},r.value.style.transform=`translate(${O(o)}, ${O(l)})`},n=()=>{document.removeEventListener("mousemove",L),document.removeEventListener("mouseup",n)};document.addEventListener("mousemove",L),document.addEventListener("mouseup",n)},p=()=>{i.value&&r.value&&i.value.addEventListener("mousedown",a)},y=()=>{i.value&&r.value&&i.value.removeEventListener("mousedown",a)};V(()=>{Z(()=>{d.value?p():y()})}),G(()=>{y()})},J=Symbol("dialogInjectionKey"),we=["aria-label"],$e=["id"],Le=A({name:"ElDialogContent"}),De=A({...Le,props:ge,emits:ve,setup(r){const i=r,{t:d}=Q(),{Close:h}=se,{dialogRef:a,headerRef:p,bodyId:y,ns:t,style:g}=W(J),{focusTrapRef:C}=W(_),c=te(C,a),u=M(()=>i.draggable);return ke(a,p,u),(s,m)=>(E(),X("div",{ref:e(c),class:f([e(t).b(),e(t).is("fullscreen",s.fullscreen),e(t).is("draggable",e(u)),e(t).is("align-center",s.alignCenter),{[e(t).m("center")]:s.center},s.customClass]),style:q(e(g)),tabindex:"-1"},[I("header",{ref_key:"headerRef",ref:p,class:f(e(t).e("header"))},[b(s.$slots,"header",{},()=>[I("span",{role:"heading",class:f(e(t).e("title"))},x(s.title),3)]),s.showClose?(E(),X("button",{key:0,"aria-label":e(d)("el.dialog.close"),class:f(e(t).e("headerbtn")),type:"button",onClick:m[0]||(m[0]=k=>s.$emit("close"))},[R(e(oe),{class:f(e(t).e("close"))},{default:v(()=>[(E(),K(ee(s.closeIcon||e(h))))]),_:1},8,["class"])],10,we)):U("v-if",!0)],2),I("div",{id:e(y),class:f(e(t).e("body"))},[b(s.$slots,"default")],10,$e),s.$slots.footer?(E(),X("footer",{key:0,class:f(e(t).e("footer"))},[b(s.$slots,"footer")],2)):U("v-if",!0)],6))}});var Me=H(De,[["__file","/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog-content.vue"]]);const Ie=["aria-label","aria-labelledby","aria-describedby"],Re=A({name:"ElDialog",inheritAttrs:!1}),Ae=A({...Re,props:be,emits:he,setup(r,{expose:i}){const d=r,h=ae();j({scope:"el-dialog",from:"the title slot",replacement:"the header slot",version:"3.0.0",ref:"https://element-plus.org/en-US/component/dialog.html#slots"},M(()=>!!h.title)),j({scope:"el-dialog",from:"custom-class",replacement:"class",version:"2.3.0",ref:"https://element-plus.org/en-US/component/dialog.html#attributes",type:"Attribute"},M(()=>!!d.customClass));const a=ne("dialog"),p=z(),y=z(),t=z(),{visible:g,titleId:C,bodyId:c,style:u,overlayDialogStyle:s,rendered:m,zIndex:k,afterEnter:T,afterLeave:F,beforeLeave:S,handleClose:$,onModalClick:B,onOpenAutoFocus:Y,onCloseAutoFocus:N,onCloseRequested:P,onFocusoutPrevented:L}=ye(d,p);le(J,{dialogRef:p,headerRef:y,bodyId:c,ns:a,rendered:m,style:u});const n=Ce(B),D=M(()=>d.draggable&&!d.fullscreen);return i({visible:g,dialogContentRef:t}),(o,l)=>(E(),K(fe,{to:"body",disabled:!o.appendToBody},[R(me,{name:"dialog-fade",onAfterEnter:e(T),onAfterLeave:e(F),onBeforeLeave:e(S),persisted:""},{default:v(()=>[re(R(e(Ee),{"custom-mask-event":"",mask:o.modal,"overlay-class":o.modalClass,"z-index":e(k)},{default:v(()=>[I("div",{role:"dialog","aria-modal":"true","aria-label":o.title||void 0,"aria-labelledby":o.title?void 0:e(C),"aria-describedby":e(c),class:f(`${e(a).namespace.value}-overlay-dialog`),style:q(e(s)),onClick:l[0]||(l[0]=(...w)=>e(n).onClick&&e(n).onClick(...w)),onMousedown:l[1]||(l[1]=(...w)=>e(n).onMousedown&&e(n).onMousedown(...w)),onMouseup:l[2]||(l[2]=(...w)=>e(n).onMouseup&&e(n).onMouseup(...w))},[R(e(ie),{loop:"",trapped:e(g),"focus-start-el":"container",onFocusAfterTrapped:e(Y),onFocusAfterReleased:e(N),onFocusoutPrevented:e(L),onReleaseRequested:e(P)},{default:v(()=>[e(m)?(E(),K(Me,de({key:0,ref_key:"dialogContentRef",ref:t},o.$attrs,{"custom-class":o.customClass,center:o.center,"align-center":o.alignCenter,"close-icon":o.closeIcon,draggable:e(D),fullscreen:o.fullscreen,"show-close":o.showClose,title:o.title,onClose:e($)}),ce({header:v(()=>[o.$slots.title?b(o.$slots,"title",{key:1}):b(o.$slots,"header",{key:0,close:e($),titleId:e(C),titleClass:e(a).e("title")})]),default:v(()=>[b(o.$slots,"default")]),_:2},[o.$slots.footer?{name:"footer",fn:v(()=>[b(o.$slots,"footer")])}:void 0]),1040,["custom-class","center","align-center","close-icon","draggable","fullscreen","show-close","title","onClose"])):U("v-if",!0)]),_:3},8,["trapped","onFocusAfterTrapped","onFocusAfterReleased","onFocusoutPrevented","onReleaseRequested"])],46,Ie)]),_:3},8,["mask","overlay-class","z-index"]),[[ue,e(g)]])]),_:3},8,["onAfterEnter","onAfterLeave","onBeforeLeave"])],8,["disabled"]))}});var Te=H(Ae,[["__file","/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue"]]);const Be=pe(Te);export{Be as E};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
