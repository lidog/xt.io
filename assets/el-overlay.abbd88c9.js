import{B as S,a4 as Z,aj as K,$ as F,bp as G,aA as T,P as B,aE as J,az as Q,bq as R,aB as X,b8 as w,ac as k,ad as E,Z as ee,b as oe,br as x,a6 as I,aC as te,aY as le,I as ne,aD as ae,aU as P,a as v,bs as se,K as D,aW as ue,R as ce,aw as de,T as ie,bt as re,bj as N}from"./index.6930c6e0.js";import{q as z}from"./event.dd67551c.js";let p;const fe=e=>{var t;if(!S)return 0;if(p!==void 0)return p;const o=document.createElement("div");o.className=`${e}-scrollbar__wrap`,o.style.visibility="hidden",o.style.width="100px",o.style.position="absolute",o.style.top="-9999px",document.body.appendChild(o);const l=o.offsetWidth;o.style.overflow="scroll";const a=document.createElement("div");a.style.width="100%",o.appendChild(a);const s=a.offsetWidth;return(t=o.parentNode)==null||t.removeChild(o),p=l-s,p},ye=(e,t={})=>{Z(e)||K("[useLockscreen]","You need to pass a ref param to this function");const o=t.ns||F("popup"),l=G(()=>o.bm("parent","hidden"));if(!S||T(document.body,l.value))return;let a=0,s=!1,n="0";const i=()=>{setTimeout(()=>{X(document==null?void 0:document.body,l.value),s&&document&&(document.body.style.width=n)},200)};B(e,c=>{if(!c){i();return}s=!T(document.body,l.value),s&&(n=document.body.style.width),a=fe(o.namespace.value);const f=document.documentElement.clientHeight<document.body.scrollHeight,r=J(document.body,"overflowY");a>0&&(f||r==="scroll")&&s&&(document.body.style.width=`calc(100% - ${a}px)`),Q(document.body,l.value)}),R(()=>i())},me=e=>{if(!e)return{onClick:w,onMousedown:w,onMouseup:w};let t=!1,o=!1;return{onClick:n=>{t&&o&&e(n),t=o=!1},onMousedown:n=>{t=n.target===n.currentTarget},onMouseup:n=>{o=n.target===n.currentTarget}}},ve=k({mask:{type:Boolean,default:!0},customMaskEvent:{type:Boolean,default:!1},overlayClass:{type:E([String,Array,Object])},zIndex:{type:E([String,Number])}}),pe={click:e=>e instanceof MouseEvent},be="overlay";var Ce=ee({name:"ElOverlay",props:ve,emits:pe,setup(e,{slots:t,emit:o}){const l=F(be),a=c=>{o("click",c)},{onClick:s,onMousedown:n,onMouseup:i}=me(e.customMaskEvent?void 0:a);return()=>e.mask?oe("div",{class:[l.b(),e.overlayClass],style:{zIndex:e.zIndex},onClick:s,onMousedown:n,onMouseup:i},[I(t,"default")],x.STYLE|x.CLASS|x.PROPS,["onClick","onMouseup","onMousedown"]):te("div",{class:e.overlayClass,style:{zIndex:e.zIndex,position:"fixed",top:"0px",right:"0px",bottom:"0px",left:"0px"}},[I(t,"default")])}});const xe=Ce,he=k({center:{type:Boolean,default:!1},alignCenter:{type:Boolean,default:!1},closeIcon:{type:le},customClass:{type:String,default:""},draggable:{type:Boolean,default:!1},fullscreen:{type:Boolean,default:!1},showClose:{type:Boolean,default:!0},title:{type:String,default:""}}),Be={close:()=>!0},Ee=k({...he,appendToBody:{type:Boolean,default:!1},beforeClose:{type:E(Function)},destroyOnClose:{type:Boolean,default:!1},closeOnClickModal:{type:Boolean,default:!0},closeOnPressEscape:{type:Boolean,default:!0},lockScroll:{type:Boolean,default:!0},modal:{type:Boolean,default:!0},openDelay:{type:Number,default:0},closeDelay:{type:Number,default:0},top:{type:String},modelValue:{type:Boolean,default:!1},modalClass:String,width:{type:[String,Number]},zIndex:{type:Number},trapFocus:{type:Boolean,default:!1}}),Se={open:()=>!0,opened:()=>!0,close:()=>!0,closed:()=>!0,[z]:e=>ne(e),openAutoFocus:()=>!0,closeAutoFocus:()=>!0},ke=(e,t)=>{const l=ie().emit,{nextZIndex:a}=ae();let s="";const n=P(),i=P(),c=v(!1),f=v(!1),r=v(!1),b=v(e.zIndex||a());let y,m;const A=se("namespace",re),L=D(()=>{const u={},d=`--${A.value}-dialog`;return e.fullscreen||(e.top&&(u[`${d}-margin-top`]=e.top),e.width&&(u[`${d}-width`]=ue(e.width))),u}),W=D(()=>e.alignCenter?{display:"flex"}:{});function $(){l("opened")}function _(){l("closed"),l(z,!1),e.destroyOnClose&&(r.value=!1)}function V(){l("close")}function O(){m==null||m(),y==null||y(),e.openDelay&&e.openDelay>0?{stop:y}=N(()=>M(),e.openDelay):M()}function C(){y==null||y(),m==null||m(),e.closeDelay&&e.closeDelay>0?{stop:m}=N(()=>g(),e.closeDelay):g()}function h(){function u(d){d||(f.value=!0,c.value=!1)}e.beforeClose?e.beforeClose(u):C()}function Y(){e.closeOnClickModal&&h()}function M(){!S||(c.value=!0)}function g(){c.value=!1}function H(){l("openAutoFocus")}function j(){l("closeAutoFocus")}function q(u){var d;((d=u.detail)==null?void 0:d.focusReason)==="pointer"&&u.preventDefault()}e.lockScroll&&ye(c);function U(){e.closeOnPressEscape&&h()}return B(()=>e.modelValue,u=>{u?(f.value=!1,O(),r.value=!0,b.value=e.zIndex?b.value++:a(),ce(()=>{l("open"),t.value&&(t.value.scrollTop=0)})):c.value&&C()}),B(()=>e.fullscreen,u=>{!t.value||(u?(s=t.value.style.transform,t.value.style.transform=""):t.value.style.transform=s)}),de(()=>{e.modelValue&&(c.value=!0,r.value=!0,O())}),{afterEnter:$,afterLeave:_,beforeLeave:V,handleClose:h,onModalClick:Y,close:C,doClose:g,onOpenAutoFocus:H,onCloseAutoFocus:j,onCloseRequested:U,onFocusoutPrevented:q,titleId:n,bodyId:i,closed:f,style:L,overlayDialogStyle:W,rendered:r,visible:c,zIndex:b}};export{xe as E,Se as a,he as b,Be as c,Ee as d,me as e,ke as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWwtb3ZlcmxheS5hYmJkODhjOS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy91dGlscy9kb20vc2Nyb2xsLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvaG9va3MvdXNlLWxvY2tzY3JlZW4vaW5kZXgubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9ob29rcy91c2Utc2FtZS10YXJnZXQvaW5kZXgubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL292ZXJsYXkvc3JjL292ZXJsYXkubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL292ZXJsYXkvaW5kZXgubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RpYWxvZy9zcmMvZGlhbG9nLWNvbnRlbnQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RpYWxvZy9zcmMvZGlhbG9nLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kaWFsb2cvc3JjL3VzZS1kaWFsb2cubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQ2xpZW50IH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJztcbmltcG9ydCB7IGdldFN0eWxlIH0gZnJvbSAnLi9zdHlsZS5tanMnO1xuXG5jb25zdCBpc1Njcm9sbCA9IChlbCwgaXNWZXJ0aWNhbCkgPT4ge1xuICBpZiAoIWlzQ2xpZW50KVxuICAgIHJldHVybiBmYWxzZTtcbiAgY29uc3Qga2V5ID0ge1xuICAgIHVuZGVmaW5lZDogXCJvdmVyZmxvd1wiLFxuICAgIHRydWU6IFwib3ZlcmZsb3cteVwiLFxuICAgIGZhbHNlOiBcIm92ZXJmbG93LXhcIlxuICB9W1N0cmluZyhpc1ZlcnRpY2FsKV07XG4gIGNvbnN0IG92ZXJmbG93ID0gZ2V0U3R5bGUoZWwsIGtleSk7XG4gIHJldHVybiBbXCJzY3JvbGxcIiwgXCJhdXRvXCIsIFwib3ZlcmxheVwiXS5zb21lKChzKSA9PiBvdmVyZmxvdy5pbmNsdWRlcyhzKSk7XG59O1xuY29uc3QgZ2V0U2Nyb2xsQ29udGFpbmVyID0gKGVsLCBpc1ZlcnRpY2FsKSA9PiB7XG4gIGlmICghaXNDbGllbnQpXG4gICAgcmV0dXJuO1xuICBsZXQgcGFyZW50ID0gZWw7XG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBpZiAoW3dpbmRvdywgZG9jdW1lbnQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudF0uaW5jbHVkZXMocGFyZW50KSlcbiAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKGlzU2Nyb2xsKHBhcmVudCwgaXNWZXJ0aWNhbCkpXG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBwYXJlbnQ7XG59O1xubGV0IHNjcm9sbEJhcldpZHRoO1xuY29uc3QgZ2V0U2Nyb2xsQmFyV2lkdGggPSAobmFtZXNwYWNlKSA9PiB7XG4gIHZhciBfYTtcbiAgaWYgKCFpc0NsaWVudClcbiAgICByZXR1cm4gMDtcbiAgaWYgKHNjcm9sbEJhcldpZHRoICE9PSB2b2lkIDApXG4gICAgcmV0dXJuIHNjcm9sbEJhcldpZHRoO1xuICBjb25zdCBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIG91dGVyLmNsYXNzTmFtZSA9IGAke25hbWVzcGFjZX0tc2Nyb2xsYmFyX193cmFwYDtcbiAgb3V0ZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gIG91dGVyLnN0eWxlLndpZHRoID0gXCIxMDBweFwiO1xuICBvdXRlci5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgb3V0ZXIuc3R5bGUudG9wID0gXCItOTk5OXB4XCI7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpO1xuICBjb25zdCB3aWR0aE5vU2Nyb2xsID0gb3V0ZXIub2Zmc2V0V2lkdGg7XG4gIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gXCJzY3JvbGxcIjtcbiAgY29uc3QgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBpbm5lci5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICBvdXRlci5hcHBlbmRDaGlsZChpbm5lcik7XG4gIGNvbnN0IHdpZHRoV2l0aFNjcm9sbCA9IGlubmVyLm9mZnNldFdpZHRoO1xuICAoX2EgPSBvdXRlci5wYXJlbnROb2RlKSA9PSBudWxsID8gdm9pZCAwIDogX2EucmVtb3ZlQ2hpbGQob3V0ZXIpO1xuICBzY3JvbGxCYXJXaWR0aCA9IHdpZHRoTm9TY3JvbGwgLSB3aWR0aFdpdGhTY3JvbGw7XG4gIHJldHVybiBzY3JvbGxCYXJXaWR0aDtcbn07XG5mdW5jdGlvbiBzY3JvbGxJbnRvVmlldyhjb250YWluZXIsIHNlbGVjdGVkKSB7XG4gIGlmICghaXNDbGllbnQpXG4gICAgcmV0dXJuO1xuICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgY29udGFpbmVyLnNjcm9sbFRvcCA9IDA7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9mZnNldFBhcmVudHMgPSBbXTtcbiAgbGV0IHBvaW50ZXIgPSBzZWxlY3RlZC5vZmZzZXRQYXJlbnQ7XG4gIHdoaWxlIChwb2ludGVyICE9PSBudWxsICYmIGNvbnRhaW5lciAhPT0gcG9pbnRlciAmJiBjb250YWluZXIuY29udGFpbnMocG9pbnRlcikpIHtcbiAgICBvZmZzZXRQYXJlbnRzLnB1c2gocG9pbnRlcik7XG4gICAgcG9pbnRlciA9IHBvaW50ZXIub2Zmc2V0UGFyZW50O1xuICB9XG4gIGNvbnN0IHRvcCA9IHNlbGVjdGVkLm9mZnNldFRvcCArIG9mZnNldFBhcmVudHMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2ICsgY3Vyci5vZmZzZXRUb3AsIDApO1xuICBjb25zdCBib3R0b20gPSB0b3AgKyBzZWxlY3RlZC5vZmZzZXRIZWlnaHQ7XG4gIGNvbnN0IHZpZXdSZWN0VG9wID0gY29udGFpbmVyLnNjcm9sbFRvcDtcbiAgY29uc3Qgdmlld1JlY3RCb3R0b20gPSB2aWV3UmVjdFRvcCArIGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG4gIGlmICh0b3AgPCB2aWV3UmVjdFRvcCkge1xuICAgIGNvbnRhaW5lci5zY3JvbGxUb3AgPSB0b3A7XG4gIH0gZWxzZSBpZiAoYm90dG9tID4gdmlld1JlY3RCb3R0b20pIHtcbiAgICBjb250YWluZXIuc2Nyb2xsVG9wID0gYm90dG9tIC0gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbiAgfVxufVxuXG5leHBvcnQgeyBnZXRTY3JvbGxCYXJXaWR0aCwgZ2V0U2Nyb2xsQ29udGFpbmVyLCBpc1Njcm9sbCwgc2Nyb2xsSW50b1ZpZXcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjcm9sbC5tanMubWFwXG4iLCJpbXBvcnQgeyBpc1JlZiwgd2F0Y2gsIG9uU2NvcGVEaXNwb3NlIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAnQHZ1ZS9yZWFjdGl2aXR5JztcbmltcG9ydCB7IGlzQ2xpZW50IH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJztcbmltcG9ydCAnLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICcuLi8uLi91dGlscy9lcnJvci5tanMnO1xuaW1wb3J0IHsgaGFzQ2xhc3MsIHJlbW92ZUNsYXNzLCBnZXRTdHlsZSwgYWRkQ2xhc3MgfSBmcm9tICcuLi8uLi91dGlscy9kb20vc3R5bGUubWpzJztcbmltcG9ydCB7IGdldFNjcm9sbEJhcldpZHRoIH0gZnJvbSAnLi4vLi4vdXRpbHMvZG9tL3Njcm9sbC5tanMnO1xuXG5jb25zdCB1c2VMb2Nrc2NyZWVuID0gKHRyaWdnZXIsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAoIWlzUmVmKHRyaWdnZXIpKSB7XG4gICAgdGhyb3dFcnJvcihcIlt1c2VMb2Nrc2NyZWVuXVwiLCBcIllvdSBuZWVkIHRvIHBhc3MgYSByZWYgcGFyYW0gdG8gdGhpcyBmdW5jdGlvblwiKTtcbiAgfVxuICBjb25zdCBucyA9IG9wdGlvbnMubnMgfHwgdXNlTmFtZXNwYWNlKFwicG9wdXBcIik7XG4gIGNvbnN0IGhpZGRlbkNscyA9IGNvbXB1dGVkKCgpID0+IG5zLmJtKFwicGFyZW50XCIsIFwiaGlkZGVuXCIpKTtcbiAgaWYgKCFpc0NsaWVudCB8fCBoYXNDbGFzcyhkb2N1bWVudC5ib2R5LCBoaWRkZW5DbHMudmFsdWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBzY3JvbGxCYXJXaWR0aCA9IDA7XG4gIGxldCB3aXRob3V0SGlkZGVuQ2xhc3MgPSBmYWxzZTtcbiAgbGV0IGJvZHlXaWR0aCA9IFwiMFwiO1xuICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQgPT0gbnVsbCA/IHZvaWQgMCA6IGRvY3VtZW50LmJvZHksIGhpZGRlbkNscy52YWx1ZSk7XG4gICAgICBpZiAod2l0aG91dEhpZGRlbkNsYXNzICYmIGRvY3VtZW50KSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUud2lkdGggPSBib2R5V2lkdGg7XG4gICAgICB9XG4gICAgfSwgMjAwKTtcbiAgfTtcbiAgd2F0Y2godHJpZ2dlciwgKHZhbCkgPT4ge1xuICAgIGlmICghdmFsKSB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpdGhvdXRIaWRkZW5DbGFzcyA9ICFoYXNDbGFzcyhkb2N1bWVudC5ib2R5LCBoaWRkZW5DbHMudmFsdWUpO1xuICAgIGlmICh3aXRob3V0SGlkZGVuQ2xhc3MpIHtcbiAgICAgIGJvZHlXaWR0aCA9IGRvY3VtZW50LmJvZHkuc3R5bGUud2lkdGg7XG4gICAgfVxuICAgIHNjcm9sbEJhcldpZHRoID0gZ2V0U2Nyb2xsQmFyV2lkdGgobnMubmFtZXNwYWNlLnZhbHVlKTtcbiAgICBjb25zdCBib2R5SGFzT3ZlcmZsb3cgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDwgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQ7XG4gICAgY29uc3QgYm9keU92ZXJmbG93WSA9IGdldFN0eWxlKGRvY3VtZW50LmJvZHksIFwib3ZlcmZsb3dZXCIpO1xuICAgIGlmIChzY3JvbGxCYXJXaWR0aCA+IDAgJiYgKGJvZHlIYXNPdmVyZmxvdyB8fCBib2R5T3ZlcmZsb3dZID09PSBcInNjcm9sbFwiKSAmJiB3aXRob3V0SGlkZGVuQ2xhc3MpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUud2lkdGggPSBgY2FsYygxMDAlIC0gJHtzY3JvbGxCYXJXaWR0aH1weClgO1xuICAgIH1cbiAgICBhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCBoaWRkZW5DbHMudmFsdWUpO1xuICB9KTtcbiAgb25TY29wZURpc3Bvc2UoKCkgPT4gY2xlYW51cCgpKTtcbn07XG5cbmV4cG9ydCB7IHVzZUxvY2tzY3JlZW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiIsImltcG9ydCB7IE5PT1AgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHVzZVNhbWVUYXJnZXQgPSAoaGFuZGxlQ2xpY2spID0+IHtcbiAgaWYgKCFoYW5kbGVDbGljaykge1xuICAgIHJldHVybiB7IG9uQ2xpY2s6IE5PT1AsIG9uTW91c2Vkb3duOiBOT09QLCBvbk1vdXNldXA6IE5PT1AgfTtcbiAgfVxuICBsZXQgbW91c2Vkb3duVGFyZ2V0ID0gZmFsc2U7XG4gIGxldCBtb3VzZXVwVGFyZ2V0ID0gZmFsc2U7XG4gIGNvbnN0IG9uQ2xpY2sgPSAoZSkgPT4ge1xuICAgIGlmIChtb3VzZWRvd25UYXJnZXQgJiYgbW91c2V1cFRhcmdldCkge1xuICAgICAgaGFuZGxlQ2xpY2soZSk7XG4gICAgfVxuICAgIG1vdXNlZG93blRhcmdldCA9IG1vdXNldXBUYXJnZXQgPSBmYWxzZTtcbiAgfTtcbiAgY29uc3Qgb25Nb3VzZWRvd24gPSAoZSkgPT4ge1xuICAgIG1vdXNlZG93blRhcmdldCA9IGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQ7XG4gIH07XG4gIGNvbnN0IG9uTW91c2V1cCA9IChlKSA9PiB7XG4gICAgbW91c2V1cFRhcmdldCA9IGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQ7XG4gIH07XG4gIHJldHVybiB7IG9uQ2xpY2ssIG9uTW91c2Vkb3duLCBvbk1vdXNldXAgfTtcbn07XG5cbmV4cG9ydCB7IHVzZVNhbWVUYXJnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUsIHJlbmRlclNsb3QsIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlU2FtZVRhcmdldCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1zYW1lLXRhcmdldC9pbmRleC5tanMnO1xuaW1wb3J0IHsgUGF0Y2hGbGFncyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS92bm9kZS5tanMnO1xuXG5jb25zdCBvdmVybGF5UHJvcHMgPSBidWlsZFByb3BzKHtcbiAgbWFzazoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBjdXN0b21NYXNrRXZlbnQ6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIG92ZXJsYXlDbGFzczoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKFtcbiAgICAgIFN0cmluZyxcbiAgICAgIEFycmF5LFxuICAgICAgT2JqZWN0XG4gICAgXSlcbiAgfSxcbiAgekluZGV4OiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoW1N0cmluZywgTnVtYmVyXSlcbiAgfVxufSk7XG5jb25zdCBvdmVybGF5RW1pdHMgPSB7XG4gIGNsaWNrOiAoZXZ0KSA9PiBldnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50XG59O1xuY29uc3QgQkxPQ0sgPSBcIm92ZXJsYXlcIjtcbnZhciBPdmVybGF5ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJFbE92ZXJsYXlcIixcbiAgcHJvcHM6IG92ZXJsYXlQcm9wcyxcbiAgZW1pdHM6IG92ZXJsYXlFbWl0cyxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGVtaXQgfSkge1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKEJMT0NLKTtcbiAgICBjb25zdCBvbk1hc2tDbGljayA9IChlKSA9PiB7XG4gICAgICBlbWl0KFwiY2xpY2tcIiwgZSk7XG4gICAgfTtcbiAgICBjb25zdCB7IG9uQ2xpY2ssIG9uTW91c2Vkb3duLCBvbk1vdXNldXAgfSA9IHVzZVNhbWVUYXJnZXQocHJvcHMuY3VzdG9tTWFza0V2ZW50ID8gdm9pZCAwIDogb25NYXNrQ2xpY2spO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMubWFzayA/IGNyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3M6IFtucy5iKCksIHByb3BzLm92ZXJsYXlDbGFzc10sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgekluZGV4OiBwcm9wcy56SW5kZXhcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGljayxcbiAgICAgICAgb25Nb3VzZWRvd24sXG4gICAgICAgIG9uTW91c2V1cFxuICAgICAgfSwgW3JlbmRlclNsb3Qoc2xvdHMsIFwiZGVmYXVsdFwiKV0sIFBhdGNoRmxhZ3MuU1RZTEUgfCBQYXRjaEZsYWdzLkNMQVNTIHwgUGF0Y2hGbGFncy5QUk9QUywgW1wib25DbGlja1wiLCBcIm9uTW91c2V1cFwiLCBcIm9uTW91c2Vkb3duXCJdKSA6IGgoXCJkaXZcIiwge1xuICAgICAgICBjbGFzczogcHJvcHMub3ZlcmxheUNsYXNzLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHpJbmRleDogcHJvcHMuekluZGV4LFxuICAgICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gICAgICAgICAgdG9wOiBcIjBweFwiLFxuICAgICAgICAgIHJpZ2h0OiBcIjBweFwiLFxuICAgICAgICAgIGJvdHRvbTogXCIwcHhcIixcbiAgICAgICAgICBsZWZ0OiBcIjBweFwiXG4gICAgICAgIH1cbiAgICAgIH0sIFtyZW5kZXJTbG90KHNsb3RzLCBcImRlZmF1bHRcIildKTtcbiAgICB9O1xuICB9XG59KTtcblxuZXhwb3J0IHsgT3ZlcmxheSBhcyBkZWZhdWx0LCBvdmVybGF5RW1pdHMsIG92ZXJsYXlQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3ZlcmxheS5tanMubWFwXG4iLCJpbXBvcnQgT3ZlcmxheSBmcm9tICcuL3NyYy9vdmVybGF5Lm1qcyc7XG5leHBvcnQgeyBvdmVybGF5RW1pdHMsIG92ZXJsYXlQcm9wcyB9IGZyb20gJy4vc3JjL292ZXJsYXkubWpzJztcblxuY29uc3QgRWxPdmVybGF5ID0gT3ZlcmxheTtcblxuZXhwb3J0IHsgRWxPdmVybGF5LCBFbE92ZXJsYXkgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiaW1wb3J0ICcuLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lLm1qcyc7XG5pbXBvcnQgeyBpY29uUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvaWNvbi5tanMnO1xuXG5jb25zdCBkaWFsb2dDb250ZW50UHJvcHMgPSBidWlsZFByb3BzKHtcbiAgY2VudGVyOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICBhbGlnbkNlbnRlcjoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgY2xvc2VJY29uOiB7XG4gICAgdHlwZTogaWNvblByb3BUeXBlXG4gIH0sXG4gIGN1c3RvbUNsYXNzOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IFwiXCJcbiAgfSxcbiAgZHJhZ2dhYmxlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICBmdWxsc2NyZWVuOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICBzaG93Q2xvc2U6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJcIlxuICB9XG59KTtcbmNvbnN0IGRpYWxvZ0NvbnRlbnRFbWl0cyA9IHtcbiAgY2xvc2U6ICgpID0+IHRydWVcbn07XG5cbmV4cG9ydCB7IGRpYWxvZ0NvbnRlbnRFbWl0cywgZGlhbG9nQ29udGVudFByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaWFsb2ctY29udGVudC5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2NvbnN0YW50cy9pbmRleC5tanMnO1xuaW1wb3J0IHsgZGlhbG9nQ29udGVudFByb3BzIH0gZnJvbSAnLi9kaWFsb2ctY29udGVudC5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuaW1wb3J0IHsgVVBEQVRFX01PREVMX0VWRU5UIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2V2ZW50Lm1qcyc7XG5pbXBvcnQgeyBpc0Jvb2xlYW4gfSBmcm9tICdAdnVldXNlL2NvcmUnO1xuXG5jb25zdCBkaWFsb2dQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICAuLi5kaWFsb2dDb250ZW50UHJvcHMsXG4gIGFwcGVuZFRvQm9keToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgYmVmb3JlQ2xvc2U6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShGdW5jdGlvbilcbiAgfSxcbiAgZGVzdHJveU9uQ2xvc2U6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIGNsb3NlT25DbGlja01vZGFsOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIGNsb3NlT25QcmVzc0VzY2FwZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBsb2NrU2Nyb2xsOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIG1vZGFsOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIG9wZW5EZWxheToge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIGNsb3NlRGVsYXk6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICB0b3A6IHtcbiAgICB0eXBlOiBTdHJpbmdcbiAgfSxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgbW9kYWxDbGFzczogU3RyaW5nLFxuICB3aWR0aDoge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl1cbiAgfSxcbiAgekluZGV4OiB7XG4gICAgdHlwZTogTnVtYmVyXG4gIH0sXG4gIHRyYXBGb2N1czoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfVxufSk7XG5jb25zdCBkaWFsb2dFbWl0cyA9IHtcbiAgb3BlbjogKCkgPT4gdHJ1ZSxcbiAgb3BlbmVkOiAoKSA9PiB0cnVlLFxuICBjbG9zZTogKCkgPT4gdHJ1ZSxcbiAgY2xvc2VkOiAoKSA9PiB0cnVlLFxuICBbVVBEQVRFX01PREVMX0VWRU5UXTogKHZhbHVlKSA9PiBpc0Jvb2xlYW4odmFsdWUpLFxuICBvcGVuQXV0b0ZvY3VzOiAoKSA9PiB0cnVlLFxuICBjbG9zZUF1dG9Gb2N1czogKCkgPT4gdHJ1ZVxufTtcblxuZXhwb3J0IHsgZGlhbG9nRW1pdHMsIGRpYWxvZ1Byb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaWFsb2cubWpzLm1hcFxuIiwiaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlLCByZWYsIGNvbXB1dGVkLCB3YXRjaCwgbmV4dFRpY2ssIG9uTW91bnRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyB1c2VUaW1lb3V0Rm4sIGlzQ2xpZW50IH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vY29uc3RhbnRzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uL2NvbmZpZy1wcm92aWRlci9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlWkluZGV4IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLXotaW5kZXgvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZUlkIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLWlkL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VHbG9iYWxDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWctcHJvdmlkZXIvc3JjL2hvb2tzL3VzZS1nbG9iYWwtY29uZmlnLm1qcyc7XG5pbXBvcnQgeyBkZWZhdWx0TmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgYWRkVW5pdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbS9zdHlsZS5tanMnO1xuaW1wb3J0IHsgVVBEQVRFX01PREVMX0VWRU5UIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2V2ZW50Lm1qcyc7XG5pbXBvcnQgeyB1c2VMb2Nrc2NyZWVuIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLWxvY2tzY3JlZW4vaW5kZXgubWpzJztcblxuY29uc3QgdXNlRGlhbG9nID0gKHByb3BzLCB0YXJnZXRSZWYpID0+IHtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgY29uc3QgZW1pdCA9IGluc3RhbmNlLmVtaXQ7XG4gIGNvbnN0IHsgbmV4dFpJbmRleCB9ID0gdXNlWkluZGV4KCk7XG4gIGxldCBsYXN0UG9zaXRpb24gPSBcIlwiO1xuICBjb25zdCB0aXRsZUlkID0gdXNlSWQoKTtcbiAgY29uc3QgYm9keUlkID0gdXNlSWQoKTtcbiAgY29uc3QgdmlzaWJsZSA9IHJlZihmYWxzZSk7XG4gIGNvbnN0IGNsb3NlZCA9IHJlZihmYWxzZSk7XG4gIGNvbnN0IHJlbmRlcmVkID0gcmVmKGZhbHNlKTtcbiAgY29uc3QgekluZGV4ID0gcmVmKHByb3BzLnpJbmRleCB8fCBuZXh0WkluZGV4KCkpO1xuICBsZXQgb3BlblRpbWVyID0gdm9pZCAwO1xuICBsZXQgY2xvc2VUaW1lciA9IHZvaWQgMDtcbiAgY29uc3QgbmFtZXNwYWNlID0gdXNlR2xvYmFsQ29uZmlnKFwibmFtZXNwYWNlXCIsIGRlZmF1bHROYW1lc3BhY2UpO1xuICBjb25zdCBzdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBzdHlsZTIgPSB7fTtcbiAgICBjb25zdCB2YXJQcmVmaXggPSBgLS0ke25hbWVzcGFjZS52YWx1ZX0tZGlhbG9nYDtcbiAgICBpZiAoIXByb3BzLmZ1bGxzY3JlZW4pIHtcbiAgICAgIGlmIChwcm9wcy50b3ApIHtcbiAgICAgICAgc3R5bGUyW2Ake3ZhclByZWZpeH0tbWFyZ2luLXRvcGBdID0gcHJvcHMudG9wO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLndpZHRoKSB7XG4gICAgICAgIHN0eWxlMltgJHt2YXJQcmVmaXh9LXdpZHRoYF0gPSBhZGRVbml0KHByb3BzLndpZHRoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlMjtcbiAgfSk7XG4gIGNvbnN0IG92ZXJsYXlEaWFsb2dTdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAocHJvcHMuYWxpZ25DZW50ZXIpIHtcbiAgICAgIHJldHVybiB7IGRpc3BsYXk6IFwiZmxleFwiIH07XG4gICAgfVxuICAgIHJldHVybiB7fTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGFmdGVyRW50ZXIoKSB7XG4gICAgZW1pdChcIm9wZW5lZFwiKTtcbiAgfVxuICBmdW5jdGlvbiBhZnRlckxlYXZlKCkge1xuICAgIGVtaXQoXCJjbG9zZWRcIik7XG4gICAgZW1pdChVUERBVEVfTU9ERUxfRVZFTlQsIGZhbHNlKTtcbiAgICBpZiAocHJvcHMuZGVzdHJveU9uQ2xvc2UpIHtcbiAgICAgIHJlbmRlcmVkLnZhbHVlID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGJlZm9yZUxlYXZlKCkge1xuICAgIGVtaXQoXCJjbG9zZVwiKTtcbiAgfVxuICBmdW5jdGlvbiBvcGVuKCkge1xuICAgIGNsb3NlVGltZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGNsb3NlVGltZXIoKTtcbiAgICBvcGVuVGltZXIgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5UaW1lcigpO1xuICAgIGlmIChwcm9wcy5vcGVuRGVsYXkgJiYgcHJvcHMub3BlbkRlbGF5ID4gMCkge1xuICAgICAgO1xuICAgICAgKHsgc3RvcDogb3BlblRpbWVyIH0gPSB1c2VUaW1lb3V0Rm4oKCkgPT4gZG9PcGVuKCksIHByb3BzLm9wZW5EZWxheSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb09wZW4oKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgb3BlblRpbWVyID09IG51bGwgPyB2b2lkIDAgOiBvcGVuVGltZXIoKTtcbiAgICBjbG9zZVRpbWVyID09IG51bGwgPyB2b2lkIDAgOiBjbG9zZVRpbWVyKCk7XG4gICAgaWYgKHByb3BzLmNsb3NlRGVsYXkgJiYgcHJvcHMuY2xvc2VEZWxheSA+IDApIHtcbiAgICAgIDtcbiAgICAgICh7IHN0b3A6IGNsb3NlVGltZXIgfSA9IHVzZVRpbWVvdXRGbigoKSA9PiBkb0Nsb3NlKCksIHByb3BzLmNsb3NlRGVsYXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9DbG9zZSgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVDbG9zZSgpIHtcbiAgICBmdW5jdGlvbiBoaWRlKHNob3VsZENhbmNlbCkge1xuICAgICAgaWYgKHNob3VsZENhbmNlbClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2xvc2VkLnZhbHVlID0gdHJ1ZTtcbiAgICAgIHZpc2libGUudmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHByb3BzLmJlZm9yZUNsb3NlKSB7XG4gICAgICBwcm9wcy5iZWZvcmVDbG9zZShoaWRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25Nb2RhbENsaWNrKCkge1xuICAgIGlmIChwcm9wcy5jbG9zZU9uQ2xpY2tNb2RhbCkge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZG9PcGVuKCkge1xuICAgIGlmICghaXNDbGllbnQpXG4gICAgICByZXR1cm47XG4gICAgdmlzaWJsZS52YWx1ZSA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gZG9DbG9zZSgpIHtcbiAgICB2aXNpYmxlLnZhbHVlID0gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gb25PcGVuQXV0b0ZvY3VzKCkge1xuICAgIGVtaXQoXCJvcGVuQXV0b0ZvY3VzXCIpO1xuICB9XG4gIGZ1bmN0aW9uIG9uQ2xvc2VBdXRvRm9jdXMoKSB7XG4gICAgZW1pdChcImNsb3NlQXV0b0ZvY3VzXCIpO1xuICB9XG4gIGZ1bmN0aW9uIG9uRm9jdXNvdXRQcmV2ZW50ZWQoZXZlbnQpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCgoX2EgPSBldmVudC5kZXRhaWwpID09IG51bGwgPyB2b2lkIDAgOiBfYS5mb2N1c1JlYXNvbikgPT09IFwicG9pbnRlclwiKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuICBpZiAocHJvcHMubG9ja1Njcm9sbCkge1xuICAgIHVzZUxvY2tzY3JlZW4odmlzaWJsZSk7XG4gIH1cbiAgZnVuY3Rpb24gb25DbG9zZVJlcXVlc3RlZCgpIHtcbiAgICBpZiAocHJvcHMuY2xvc2VPblByZXNzRXNjYXBlKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfVxuICB3YXRjaCgoKSA9PiBwcm9wcy5tb2RlbFZhbHVlLCAodmFsKSA9PiB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgY2xvc2VkLnZhbHVlID0gZmFsc2U7XG4gICAgICBvcGVuKCk7XG4gICAgICByZW5kZXJlZC52YWx1ZSA9IHRydWU7XG4gICAgICB6SW5kZXgudmFsdWUgPSBwcm9wcy56SW5kZXggPyB6SW5kZXgudmFsdWUrKyA6IG5leHRaSW5kZXgoKTtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgZW1pdChcIm9wZW5cIik7XG4gICAgICAgIGlmICh0YXJnZXRSZWYudmFsdWUpIHtcbiAgICAgICAgICB0YXJnZXRSZWYudmFsdWUuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2aXNpYmxlLnZhbHVlKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgd2F0Y2goKCkgPT4gcHJvcHMuZnVsbHNjcmVlbiwgKHZhbCkgPT4ge1xuICAgIGlmICghdGFyZ2V0UmVmLnZhbHVlKVxuICAgICAgcmV0dXJuO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIGxhc3RQb3NpdGlvbiA9IHRhcmdldFJlZi52YWx1ZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICB0YXJnZXRSZWYudmFsdWUuc3R5bGUudHJhbnNmb3JtID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0UmVmLnZhbHVlLnN0eWxlLnRyYW5zZm9ybSA9IGxhc3RQb3NpdGlvbjtcbiAgICB9XG4gIH0pO1xuICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5tb2RlbFZhbHVlKSB7XG4gICAgICB2aXNpYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICAgIHJlbmRlcmVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgIG9wZW4oKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGFmdGVyRW50ZXIsXG4gICAgYWZ0ZXJMZWF2ZSxcbiAgICBiZWZvcmVMZWF2ZSxcbiAgICBoYW5kbGVDbG9zZSxcbiAgICBvbk1vZGFsQ2xpY2ssXG4gICAgY2xvc2UsXG4gICAgZG9DbG9zZSxcbiAgICBvbk9wZW5BdXRvRm9jdXMsXG4gICAgb25DbG9zZUF1dG9Gb2N1cyxcbiAgICBvbkNsb3NlUmVxdWVzdGVkLFxuICAgIG9uRm9jdXNvdXRQcmV2ZW50ZWQsXG4gICAgdGl0bGVJZCxcbiAgICBib2R5SWQsXG4gICAgY2xvc2VkLFxuICAgIHN0eWxlLFxuICAgIG92ZXJsYXlEaWFsb2dTdHlsZSxcbiAgICByZW5kZXJlZCxcbiAgICB2aXNpYmxlLFxuICAgIHpJbmRleFxuICB9O1xufTtcblxuZXhwb3J0IHsgdXNlRGlhbG9nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtZGlhbG9nLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJzY3JvbGxCYXJXaWR0aCIsImdldFNjcm9sbEJhcldpZHRoIiwibmFtZXNwYWNlIiwiX2EiLCJpc0NsaWVudCIsIm91dGVyIiwid2lkdGhOb1Njcm9sbCIsImlubmVyIiwid2lkdGhXaXRoU2Nyb2xsIiwidXNlTG9ja3NjcmVlbiIsInRyaWdnZXIiLCJvcHRpb25zIiwiaXNSZWYiLCJ0aHJvd0Vycm9yIiwibnMiLCJ1c2VOYW1lc3BhY2UiLCJoaWRkZW5DbHMiLCJjb21wdXRlZCIsImhhc0NsYXNzIiwid2l0aG91dEhpZGRlbkNsYXNzIiwiYm9keVdpZHRoIiwiY2xlYW51cCIsInJlbW92ZUNsYXNzIiwid2F0Y2giLCJ2YWwiLCJib2R5SGFzT3ZlcmZsb3ciLCJib2R5T3ZlcmZsb3dZIiwiZ2V0U3R5bGUiLCJhZGRDbGFzcyIsIm9uU2NvcGVEaXNwb3NlIiwidXNlU2FtZVRhcmdldCIsImhhbmRsZUNsaWNrIiwiTk9PUCIsIm1vdXNlZG93blRhcmdldCIsIm1vdXNldXBUYXJnZXQiLCJlIiwib3ZlcmxheVByb3BzIiwiYnVpbGRQcm9wcyIsImRlZmluZVByb3BUeXBlIiwib3ZlcmxheUVtaXRzIiwiZXZ0IiwiQkxPQ0siLCJPdmVybGF5IiwiZGVmaW5lQ29tcG9uZW50IiwicHJvcHMiLCJzbG90cyIsImVtaXQiLCJvbk1hc2tDbGljayIsIm9uQ2xpY2siLCJvbk1vdXNlZG93biIsIm9uTW91c2V1cCIsImNyZWF0ZVZOb2RlIiwicmVuZGVyU2xvdCIsIlBhdGNoRmxhZ3MiLCJoIiwiRWxPdmVybGF5IiwiZGlhbG9nQ29udGVudFByb3BzIiwiaWNvblByb3BUeXBlIiwiZGlhbG9nQ29udGVudEVtaXRzIiwiZGlhbG9nUHJvcHMiLCJkaWFsb2dFbWl0cyIsIlVQREFURV9NT0RFTF9FVkVOVCIsInZhbHVlIiwiaXNCb29sZWFuIiwidXNlRGlhbG9nIiwidGFyZ2V0UmVmIiwiZ2V0Q3VycmVudEluc3RhbmNlIiwibmV4dFpJbmRleCIsInVzZVpJbmRleCIsImxhc3RQb3NpdGlvbiIsInRpdGxlSWQiLCJ1c2VJZCIsImJvZHlJZCIsInZpc2libGUiLCJyZWYiLCJjbG9zZWQiLCJyZW5kZXJlZCIsInpJbmRleCIsIm9wZW5UaW1lciIsImNsb3NlVGltZXIiLCJ1c2VHbG9iYWxDb25maWciLCJkZWZhdWx0TmFtZXNwYWNlIiwic3R5bGUiLCJzdHlsZTIiLCJ2YXJQcmVmaXgiLCJhZGRVbml0Iiwib3ZlcmxheURpYWxvZ1N0eWxlIiwiYWZ0ZXJFbnRlciIsImFmdGVyTGVhdmUiLCJiZWZvcmVMZWF2ZSIsIm9wZW4iLCJ1c2VUaW1lb3V0Rm4iLCJkb09wZW4iLCJjbG9zZSIsImRvQ2xvc2UiLCJoYW5kbGVDbG9zZSIsImhpZGUiLCJzaG91bGRDYW5jZWwiLCJvbk1vZGFsQ2xpY2siLCJvbk9wZW5BdXRvRm9jdXMiLCJvbkNsb3NlQXV0b0ZvY3VzIiwib25Gb2N1c291dFByZXZlbnRlZCIsImV2ZW50Iiwib25DbG9zZVJlcXVlc3RlZCIsIm5leHRUaWNrIiwib25Nb3VudGVkIl0sIm1hcHBpbmdzIjoiMlVBMkJBLElBQUlBLEVBQ0osTUFBTUMsR0FBcUJDLEdBQWMsQ0FDdkMsSUFBSUMsRUFDSixHQUFJLENBQUNDLEVBQ0gsTUFBTyxHQUNULEdBQUlKLElBQW1CLE9BQ3JCLE9BQU9BLEVBQ1QsTUFBTUssRUFBUSxTQUFTLGNBQWMsS0FBSyxFQUMxQ0EsRUFBTSxVQUFZLEdBQUdILG9CQUNyQkcsRUFBTSxNQUFNLFdBQWEsU0FDekJBLEVBQU0sTUFBTSxNQUFRLFFBQ3BCQSxFQUFNLE1BQU0sU0FBVyxXQUN2QkEsRUFBTSxNQUFNLElBQU0sVUFDbEIsU0FBUyxLQUFLLFlBQVlBLENBQUssRUFDL0IsTUFBTUMsRUFBZ0JELEVBQU0sWUFDNUJBLEVBQU0sTUFBTSxTQUFXLFNBQ3ZCLE1BQU1FLEVBQVEsU0FBUyxjQUFjLEtBQUssRUFDMUNBLEVB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
