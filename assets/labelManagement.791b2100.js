import{bz as zt,bA as At,U as Se,ac as Ce,ad as me,b6 as ga,D as ka,Z as Oe,ar as Be,$ as xe,O as wa,J as Je,a as X,P as Ye,R as Ae,Q as Rt,K as j,bB as _a,bC as Da,X as Ma,u as e,bD as $a,ae as $t,o as E,a0 as ge,w as Y,a2 as A,ab as Nt,b7 as Fe,ao as ke,a9 as vt,a8 as fe,c as q,a1 as Q,a6 as dt,a7 as ve,b5 as Kt,an as Sa,aa as ze,bk as _e,aS as ft,aw as Ca,F as he,au as Ve,d as ce,am as Pa,a3 as Re,b as i,aq as Va,ap as Ta,L as xa,bc as Oa,bE as ut,aA as jt,a_ as Zt,_ as Gt,bF as Ia,b4 as it,aI as st,bG as pt,bH as St,aK as yt,bI as mt,E as We,T as qt,r as De,a4 as qe,s as kt}from"./index.caaec19e.js";import{E as Jt}from"./el-dialog.4709ff88.js";import"./el-overlay.f569a575.js";import{a as Qe,E as Ya,_ as wt,b as Aa,d as Ra}from"./drawer.ec4f297c.js";import{i as Na,d as Ea,f as Fa,C as Ct}from"./el-table-column.e37bcc19.js";/* empty css                 */import{E as Le,a as La,b as Ba}from"./el-form-item.0ddc4bc9.js";import{E as Ot}from"./index.5d83252e.js";import{E as Ha,a as Ua}from"./el-tab-pane.47c57925.js";import{c as Ke}from"./commonjsHelpers.c10bf6cb.js";import{E as Wa}from"./index.0dce04ed.js";import"./event.7f578e92.js";const za=["year","month","date","dates","week","datetime","datetimerange","daterange","monthrange"],et=m=>!m&&m!==0?[]:Array.isArray(m)?m:[m];var Xt={exports:{}};(function(m,v){(function(a,t){m.exports=t()})(Ke,function(){var a=1e3,t=6e4,c=36e5,h="millisecond",_="second",d="minute",D="hour",k="day",F="week",C="month",M="quarter",l="year",b="date",r="Invalid Date",$=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,L=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,R={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(T){var w=["th","st","nd","rd"],V=T%100;return"["+T+(w[(V-20)%10]||w[V]||w[0])+"]"}},p=function(T,w,V){var B=String(T);return!B||B.length>=w?T:""+Array(w+1-B.length).join(V)+T},O={s:p,z:function(T){var w=-T.utcOffset(),V=Math.abs(w),B=Math.floor(V/60),y=V%60;return(w<=0?"+":"-")+p(B,2,"0")+":"+p(y,2,"0")},m:function T(w,V){if(w.date()<V.date())return-T(V,w);var B=12*(V.year()-w.year())+(V.month()-w.month()),y=w.clone().add(B,C),P=V-y<0,o=w.clone().add(B+(P?-1:1),C);return+(-(B+(V-y)/(P?y-o:o-y))||0)},a:function(T){return T<0?Math.ceil(T)||0:Math.floor(T)},p:function(T){return{M:C,y:l,w:F,d:k,D:b,h:D,m:d,s:_,ms:h,Q:M}[T]||String(T||"").toLowerCase().replace(/s$/,"")},u:function(T){return T===void 0}},K="en",Z={};Z[K]=R;var ee=function(T){return T instanceof J},U=function T(w,V,B){var y;if(!w)return K;if(typeof w=="string"){var P=w.toLowerCase();Z[P]&&(y=P),V&&(Z[P]=V,y=P);var o=w.split("-");if(!y&&o.length>1)return T(o[0])}else{var u=w.name;Z[u]=w,y=u}return!B&&y&&(K=y),y||!B&&K},W=function(T,w){if(ee(T))return T.clone();var V=typeof w=="object"?w:{};return V.date=T,V.args=arguments,new J(V)},g=O;g.l=U,g.i=ee,g.w=function(T,w){return W(T,{locale:w.$L,utc:w.$u,x:w.$x,$offset:w.$offset})};var J=function(){function T(V){this.$L=U(V.locale,null,!0),this.parse(V)}var w=T.prototype;return w.parse=function(V){this.$d=function(B){var y=B.date,P=B.utc;if(y===null)return new Date(NaN);if(g.u(y))return new Date;if(y instanceof Date)return new Date(y);if(typeof y=="string"&&!/Z$/i.test(y)){var o=y.match($);if(o){var u=o[2]-1||0,N=(o[7]||"0").substring(0,3);return P?new Date(Date.UTC(o[1],u,o[3]||1,o[4]||0,o[5]||0,o[6]||0,N)):new Date(o[1],u,o[3]||1,o[4]||0,o[5]||0,o[6]||0,N)}}return new Date(y)}(V),this.$x=V.x||{},this.init()},w.init=function(){var V=this.$d;this.$y=V.getFullYear(),this.$M=V.getMonth(),this.$D=V.getDate(),this.$W=V.getDay(),this.$H=V.getHours(),this.$m=V.getMinutes(),this.$s=V.getSeconds(),this.$ms=V.getMilliseconds()},w.$utils=function(){return g},w.isValid=function(){return this.$d.toString()!==r},w.isSame=function(V,B){var y=W(V);return this.startOf(B)<=y&&y<=this.endOf(B)},w.isAfter=function(V,B){return W(V)<this.startOf(B)},w.isBefore=function(V,B){return this.endOf(B)<W(V)},w.$g=function(V,B,y){return g.u(V)?this[B]:this.set(y,V)},w.unix=function(){return Math.floor(this.valueOf()/1e3)},w.valueOf=function(){return this.$d.getTime()},w.startOf=function(V,B){var y=this,P=!!g.u(B)||B,o=g.p(V),u=function(se,re){var ue=g.w(y.$u?Date.UTC(y.$y,re,se):new Date(y.$y,re,se),y);return P?ue:ue.endOf(k)},N=function(se,re){return g.w(y.toDate()[se].apply(y.toDate("s"),(P?[0,0,0,0]:[23,59,59,999]).slice(re)),y)},s=this.$W,x=this.$M,G=this.$D,te="set"+(this.$u?"UTC":"");switch(o){case l:return P?u(1,0):u(31,11);case C:return P?u(1,x):u(0,x+1);case F:var ae=this.$locale().weekStart||0,de=(s<ae?s+7:s)-ae;return u(P?G-de:G+(6-de),x);case k:case b:return N(te+"Hours",0);case D:return N(te+"Minutes",1);case d:return N(te+"Seconds",2);case _:return N(te+"Milliseconds",3);default:return this.clone()}},w.endOf=function(V){return this.startOf(V,!1)},w.$set=function(V,B){var y,P=g.p(V),o="set"+(this.$u?"UTC":""),u=(y={},y[k]=o+"Date",y[b]=o+"Date",y[C]=o+"Month",y[l]=o+"FullYear",y[D]=o+"Hours",y[d]=o+"Minutes",y[_]=o+"Seconds",y[h]=o+"Milliseconds",y)[P],N=P===k?this.$D+(B-this.$W):B;if(P===C||P===l){var s=this.clone().set(b,1);s.$d[u](N),s.init(),this.$d=s.set(b,Math.min(this.$D,s.daysInMonth())).$d}else u&&this.$d[u](N);return this.init(),this},w.set=function(V,B){return this.clone().$set(V,B)},w.get=function(V){return this[g.p(V)]()},w.add=function(V,B){var y,P=this;V=Number(V);var o=g.p(B),u=function(x){var G=W(P);return g.w(G.date(G.date()+Math.round(x*V)),P)};if(o===C)return this.set(C,this.$M+V);if(o===l)return this.set(l,this.$y+V);if(o===k)return u(1);if(o===F)return u(7);var N=(y={},y[d]=t,y[D]=c,y[_]=a,y)[o]||1,s=this.$d.getTime()+V*N;return g.w(s,this)},w.subtract=function(V,B){return this.add(-1*V,B)},w.format=function(V){var B=this,y=this.$locale();if(!this.isValid())return y.invalidDate||r;var P=V||"YYYY-MM-DDTHH:mm:ssZ",o=g.z(this),u=this.$H,N=this.$m,s=this.$M,x=y.weekdays,G=y.months,te=function(re,ue,Me,be){return re&&(re[ue]||re(B,P))||Me[ue].slice(0,be)},ae=function(re){return g.s(u%12||12,re,"0")},de=y.meridiem||function(re,ue,Me){var be=re<12?"AM":"PM";return Me?be.toLowerCase():be},se={YY:String(this.$y).slice(-2),YYYY:this.$y,M:s+1,MM:g.s(s+1,2,"0"),MMM:te(y.monthsShort,s,G,3),MMMM:te(G,s),D:this.$D,DD:g.s(this.$D,2,"0"),d:String(this.$W),dd:te(y.weekdaysMin,this.$W,x,2),ddd:te(y.weekdaysShort,this.$W,x,3),dddd:x[this.$W],H:String(u),HH:g.s(u,2,"0"),h:ae(1),hh:ae(2),a:de(u,N,!0),A:de(u,N,!1),m:String(N),mm:g.s(N,2,"0"),s:String(this.$s),ss:g.s(this.$s,2,"0"),SSS:g.s(this.$ms,3,"0"),Z:o};return P.replace(L,function(re,ue){return ue||se[re]||o.replace(":","")})},w.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},w.diff=function(V,B,y){var P,o=g.p(B),u=W(V),N=(u.utcOffset()-this.utcOffset())*t,s=this-u,x=g.m(this,u);return x=(P={},P[l]=x/12,P[C]=x,P[M]=x/3,P[F]=(s-N)/6048e5,P[k]=(s-N)/864e5,P[D]=s/c,P[d]=s/t,P[_]=s/a,P)[o]||s,y?x:g.a(x)},w.daysInMonth=function(){return this.endOf(C).$D},w.$locale=function(){return Z[this.$L]},w.locale=function(V,B){if(!V)return this.$L;var y=this.clone(),P=U(V,B,!0);return P&&(y.$L=P),y},w.clone=function(){return g.w(this.$d,this)},w.toDate=function(){return new Date(this.valueOf())},w.toJSON=function(){return this.isValid()?this.toISOString():null},w.toISOString=function(){return this.$d.toISOString()},w.toString=function(){return this.$d.toUTCString()},T}(),oe=J.prototype;return W.prototype=oe,[["$ms",h],["$s",_],["$m",d],["$H",D],["$W",k],["$M",C],["$y",l],["$D",b]].forEach(function(T){oe[T[1]]=function(w){return this.$g(w,T[0],T[1])}}),W.extend=function(T,w){return T.$i||(T(w,J,W),T.$i=!0),W},W.locale=U,W.isDayjs=ee,W.unix=function(T){return W(1e3*T)},W.en=Z[K],W.Ls=Z,W.p={},W})})(Xt);const ne=Xt.exports;var Qt={exports:{}};(function(m,v){(function(a,t){m.exports=t()})(Ke,function(){var a={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},t=/(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,c=/\d\d/,h=/\d\d?/,_=/\d*[^-_:/,()\s\d]+/,d={},D=function(r){return(r=+r)+(r>68?1900:2e3)},k=function(r){return function($){this[r]=+$}},F=[/[+-]\d\d:?(\d\d)?|Z/,function(r){(this.zone||(this.zone={})).offset=function($){if(!$||$==="Z")return 0;var L=$.match(/([+-]|\d\d)/g),R=60*L[1]+(+L[2]||0);return R===0?0:L[0]==="+"?-R:R}(r)}],C=function(r){var $=d[r];return $&&($.indexOf?$:$.s.concat($.f))},M=function(r,$){var L,R=d.meridiem;if(R){for(var p=1;p<=24;p+=1)if(r.indexOf(R(p,0,$))>-1){L=p>12;break}}else L=r===($?"pm":"PM");return L},l={A:[_,function(r){this.afternoon=M(r,!1)}],a:[_,function(r){this.afternoon=M(r,!0)}],S:[/\d/,function(r){this.milliseconds=100*+r}],SS:[c,function(r){this.milliseconds=10*+r}],SSS:[/\d{3}/,function(r){this.milliseconds=+r}],s:[h,k("seconds")],ss:[h,k("seconds")],m:[h,k("minutes")],mm:[h,k("minutes")],H:[h,k("hours")],h:[h,k("hours")],HH:[h,k("hours")],hh:[h,k("hours")],D:[h,k("day")],DD:[c,k("day")],Do:[_,function(r){var $=d.ordinal,L=r.match(/\d+/);if(this.day=L[0],$)for(var R=1;R<=31;R+=1)$(R).replace(/\[|\]/g,"")===r&&(this.day=R)}],M:[h,k("month")],MM:[c,k("month")],MMM:[_,function(r){var $=C("months"),L=(C("monthsShort")||$.map(function(R){return R.slice(0,3)})).indexOf(r)+1;if(L<1)throw new Error;this.month=L%12||L}],MMMM:[_,function(r){var $=C("months").indexOf(r)+1;if($<1)throw new Error;this.month=$%12||$}],Y:[/[+-]?\d+/,k("year")],YY:[c,function(r){this.year=D(r)}],YYYY:[/\d{4}/,k("year")],Z:F,ZZ:F};function b(r){var $,L;$=r,L=d&&d.formats;for(var R=(r=$.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(W,g,J){var oe=J&&J.toUpperCase();return g||L[J]||a[J]||L[oe].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(T,w,V){return w||V.slice(1)})})).match(t),p=R.length,O=0;O<p;O+=1){var K=R[O],Z=l[K],ee=Z&&Z[0],U=Z&&Z[1];R[O]=U?{regex:ee,parser:U}:K.replace(/^\[|\]$/g,"")}return function(W){for(var g={},J=0,oe=0;J<p;J+=1){var T=R[J];if(typeof T=="string")oe+=T.length;else{var w=T.regex,V=T.parser,B=W.slice(oe),y=w.exec(B)[0];V.call(g,y),W=W.replace(y,"")}}return function(P){var o=P.afternoon;if(o!==void 0){var u=P.hours;o?u<12&&(P.hours+=12):u===12&&(P.hours=0),delete P.afternoon}}(g),g}}return function(r,$,L){L.p.customParseFormat=!0,r&&r.parseTwoDigitYear&&(D=r.parseTwoDigitYear);var R=$.prototype,p=R.parse;R.parse=function(O){var K=O.date,Z=O.utc,ee=O.args;this.$u=Z;var U=ee[1];if(typeof U=="string"){var W=ee[2]===!0,g=ee[3]===!0,J=W||g,oe=ee[2];g&&(oe=ee[2]),d=this.$locale(),!W&&oe&&(d=L.Ls[oe]),this.$d=function(B,y,P){try{if(["x","X"].indexOf(y)>-1)return new Date((y==="X"?1e3:1)*B);var o=b(y)(B),u=o.year,N=o.month,s=o.day,x=o.hours,G=o.minutes,te=o.seconds,ae=o.milliseconds,de=o.zone,se=new Date,re=s||(u||N?1:se.getDate()),ue=u||se.getFullYear(),Me=0;u&&!N||(Me=N>0?N-1:se.getMonth());var be=x||0,Pe=G||0,$e=te||0,He=ae||0;return de?new Date(Date.UTC(ue,Me,re,be,Pe,$e,He+60*de.offset*1e3)):P?new Date(Date.UTC(ue,Me,re,be,Pe,$e,He)):new Date(ue,Me,re,be,Pe,$e,He)}catch{return new Date("")}}(K,U,Z),this.init(),oe&&oe!==!0&&(this.$L=this.locale(oe).$L),J&&K!=this.format(U)&&(this.$d=new Date("")),d={}}else if(U instanceof Array)for(var T=U.length,w=1;w<=T;w+=1){ee[1]=U[w-1];var V=L.apply(this,ee);if(V.isValid()){this.$d=V.$d,this.$L=V.$L,this.init();break}w===T&&(this.$d=new Date(""))}else p.call(this,O)}}})})(Qt);const Ka=Qt.exports,Et=["hours","minutes","seconds"],Ft="HH:mm:ss",rt="YYYY-MM-DD",ja={date:rt,dates:rt,week:"gggg[w]ww",year:"YYYY",month:"YYYY-MM",datetime:`${rt} ${Ft}`,monthrange:"YYYY-MM",daterange:rt,datetimerange:`${rt} ${Ft}`},_t=(m,v)=>[m>0?m-1:void 0,m,m<v?m+1:void 0],ea=m=>Array.from(Array.from({length:m}).keys()),ta=m=>m.replace(/\W?m{1,2}|\W?ZZ/g,"").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi,"").trim(),aa=m=>m.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?Y{2,4}/g,"").trim(),Lt=function(m,v){const a=At(m),t=At(v);return a&&t?m.getTime()===v.getTime():!a&&!t?m===v:!1},Bt=function(m,v){const a=Se(m),t=Se(v);return a&&t?m.length!==v.length?!1:m.every((c,h)=>Lt(c,v[h])):!a&&!t?Lt(m,v):!1},Ht=function(m,v,a){const t=zt(v)||v==="x"?ne(m).locale(a):ne(m,v).locale(a);return t.isValid()?t:void 0},Ut=function(m,v,a){return zt(v)?m:v==="x"?+m:ne(m).locale(a).format(v)},Dt=(m,v)=>{var a;const t=[],c=v==null?void 0:v();for(let h=0;h<m;h++)t.push((a=c==null?void 0:c.includes(h))!=null?a:!1);return t},na=Ce({disabledHours:{type:me(Function)},disabledMinutes:{type:me(Function)},disabledSeconds:{type:me(Function)}}),Za=Ce({visible:Boolean,actualVisible:{type:Boolean,default:void 0},format:{type:String,default:""}}),la=Ce({id:{type:me([Array,String])},name:{type:me([Array,String]),default:""},popperClass:{type:String,default:""},format:String,valueFormat:String,type:{type:String,default:""},clearable:{type:Boolean,default:!0},clearIcon:{type:me([String,Object]),default:ga},editable:{type:Boolean,default:!0},prefixIcon:{type:me([String,Object]),default:""},size:ka,readonly:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},placeholder:{type:String,default:""},popperOptions:{type:me(Object),default:()=>({})},modelValue:{type:me([Date,Array,String,Number]),default:""},rangeSeparator:{type:String,default:"-"},startPlaceholder:String,endPlaceholder:String,defaultValue:{type:me([Date,Array])},defaultTime:{type:me([Date,Array])},isRange:{type:Boolean,default:!1},...na,disabledDate:{type:Function},cellClassName:{type:Function},shortcuts:{type:Array,default:()=>[]},arrowControl:{type:Boolean,default:!1},label:{type:String,default:void 0},tabindex:{type:me([String,Number]),default:0},validateEvent:{type:Boolean,default:!0},unlinkPanels:Boolean}),Ga=["id","name","placeholder","value","disabled","readonly"],qa=["id","name","placeholder","value","disabled","readonly"],Ja=Oe({name:"Picker"}),Xa=Oe({...Ja,props:la,emits:["update:modelValue","change","focus","blur","calendar-change","panel-change","visible-change","keydown"],setup(m,{expose:v,emit:a}){const t=m,{lang:c}=Be(),h=xe("date"),_=xe("input"),d=xe("range"),{form:D,formItem:k}=wa(),F=Je("ElPopperOptions",{}),C=X(),M=X(),l=X(!1),b=X(!1),r=X(null);let $=!1,L=!1;Ye(l,n=>{n?Ae(()=>{n&&(r.value=t.modelValue)}):(ie.value=null,Ae(()=>{R(t.modelValue)}))});const R=(n,f)=>{(f||!Bt(n,r.value))&&(a("change",n),t.validateEvent&&(k==null||k.validate("change").catch(I=>Rt())))},p=n=>{if(!Bt(t.modelValue,n)){let f;Se(n)?f=n.map(I=>Ut(I,t.valueFormat,c.value)):n&&(f=Ut(n,t.valueFormat,c.value)),a("update:modelValue",n&&f,c.value)}},O=n=>{a("keydown",n)},K=j(()=>{if(M.value){const n=Pe.value?M.value:M.value.$el;return Array.from(n.querySelectorAll("input"))}return[]}),Z=(n,f,I)=>{const H=K.value;!H.length||(!I||I==="min"?(H[0].setSelectionRange(n,f),H[0].focus()):I==="max"&&(H[1].setSelectionRange(n,f),H[1].focus()))},ee=()=>{V(!0,!0),Ae(()=>{L=!1})},U=(n="",f=!1)=>{f||(L=!0),l.value=f;let I;Se(n)?I=n.map(H=>H.toDate()):I=n&&n.toDate(),ie.value=null,p(I)},W=()=>{b.value=!0},g=()=>{a("visible-change",!0)},J=n=>{(n==null?void 0:n.key)===_e.esc&&V(!0,!0)},oe=()=>{b.value=!1,l.value=!1,L=!1,a("visible-change",!1)},T=()=>{l.value=!0},w=()=>{l.value=!1},V=(n=!0,f=!1)=>{L=f;const[I,H]=e(K);let we=I;!n&&Pe.value&&(we=H),we&&we.focus()},B=n=>{t.readonly||o.value||l.value||L||(l.value=!0,a("focus",n))};let y;const P=n=>{const f=async()=>{setTimeout(()=>{var I;y===f&&(!(((I=C.value)==null?void 0:I.isFocusInsideContent())&&!$)&&K.value.filter(H=>H.contains(document.activeElement)).length===0&&(je(),l.value=!1,a("blur",n),t.validateEvent&&(k==null||k.validate("blur").catch(H=>Rt()))),$=!1)},0)};y=f,f()},o=j(()=>t.disabled||(D==null?void 0:D.disabled)),u=j(()=>{let n;if(se.value?ye.value.getDefaultValue&&(n=ye.value.getDefaultValue()):Se(t.modelValue)?n=t.modelValue.map(f=>Ht(f,t.valueFormat,c.value)):n=Ht(t.modelValue,t.valueFormat,c.value),ye.value.getRangeAvailableTime){const f=ye.value.getRangeAvailableTime(n);Na(f,n)||(n=f,p(Se(n)?n.map(I=>I.toDate()):n.toDate()))}return Se(n)&&n.some(f=>!f)&&(n=[]),n}),N=j(()=>{if(!ye.value.panelReady)return"";const n=Ie(u.value);return Se(ie.value)?[ie.value[0]||n&&n[0]||"",ie.value[1]||n&&n[1]||""]:ie.value!==null?ie.value:!x.value&&se.value||!l.value&&se.value?"":n?G.value?n.join(", "):n:""}),s=j(()=>t.type.includes("time")),x=j(()=>t.type.startsWith("time")),G=j(()=>t.type==="dates"),te=j(()=>t.prefixIcon||(s.value?_a:Da)),ae=X(!1),de=n=>{t.readonly||o.value||ae.value&&(n.stopPropagation(),ee(),p(null),R(null,!0),ae.value=!1,l.value=!1,ye.value.handleClear&&ye.value.handleClear())},se=j(()=>{const{modelValue:n}=t;return!n||Se(n)&&!n.filter(Boolean).length}),re=async n=>{var f;t.readonly||o.value||(((f=n.target)==null?void 0:f.tagName)!=="INPUT"||K.value.includes(document.activeElement))&&(l.value=!0)},ue=()=>{t.readonly||o.value||!se.value&&t.clearable&&(ae.value=!0)},Me=()=>{ae.value=!1},be=n=>{var f;t.readonly||o.value||(((f=n.touches[0].target)==null?void 0:f.tagName)!=="INPUT"||K.value.includes(document.activeElement))&&(l.value=!0)},Pe=j(()=>t.type.includes("range")),$e=Ma(),He=j(()=>{var n,f;return(f=(n=e(C))==null?void 0:n.popperRef)==null?void 0:f.contentRef}),Ne=j(()=>{var n;return e(Pe)?e(M):(n=e(M))==null?void 0:n.$el});$a(Ne,n=>{const f=e(He),I=e(Ne);f&&(n.target===f||n.composedPath().includes(f))||n.target===I||n.composedPath().includes(I)||(l.value=!1)});const ie=X(null),je=()=>{if(ie.value){const n=Te(N.value);n&&Ze(n)&&(p(Se(n)?n.map(f=>f.toDate()):n.toDate()),ie.value=null)}ie.value===""&&(p(null),R(null),ie.value=null)},Te=n=>n?ye.value.parseUserInput(n):null,Ie=n=>n?ye.value.formatToString(n):null,Ze=n=>ye.value.isValidValue(n),tt=async n=>{if(t.readonly||o.value)return;const{code:f}=n;if(O(n),f===_e.esc){l.value===!0&&(l.value=!1,n.preventDefault(),n.stopPropagation());return}if(f===_e.down&&(ye.value.handleFocusPicker&&(n.preventDefault(),n.stopPropagation()),l.value===!1&&(l.value=!0,await Ae()),ye.value.handleFocusPicker)){ye.value.handleFocusPicker();return}if(f===_e.tab){$=!0;return}if(f===_e.enter||f===_e.numpadEnter){(ie.value===null||ie.value===""||Ze(Te(N.value)))&&(je(),l.value=!1),n.stopPropagation();return}if(ie.value){n.stopPropagation();return}ye.value.handleKeydownInput&&ye.value.handleKeydownInput(n)},at=n=>{ie.value=n,l.value||(l.value=!0)},Ge=n=>{const f=n.target;ie.value?ie.value=[f.value,ie.value[1]]:ie.value=[f.value,null]},Ue=n=>{const f=n.target;ie.value?ie.value=[ie.value[0],f.value]:ie.value=[null,f.value]},nt=()=>{var n;const f=ie.value,I=Te(f&&f[0]),H=e(u);if(I&&I.isValid()){ie.value=[Ie(I),((n=N.value)==null?void 0:n[1])||null];const we=[I,H&&(H[1]||null)];Ze(we)&&(p(we),ie.value=null)}},lt=()=>{var n;const f=e(ie),I=Te(f&&f[1]),H=e(u);if(I&&I.isValid()){ie.value=[((n=e(N))==null?void 0:n[0])||null,Ie(I)];const we=[H&&H[0],I];Ze(we)&&(p(we),ie.value=null)}},ye=X({}),S=n=>{ye.value[n[0]]=n[1],ye.value.panelReady=!0},z=n=>{a("calendar-change",n)},le=(n,f,I)=>{a("panel-change",n,f,I)};return $t("EP_PICKER_BASE",{props:t}),v({focus:V,handleFocusInput:B,handleBlurInput:P,handleOpen:T,handleClose:w,onPick:U}),(n,f)=>(E(),ge(e(Sa),Kt({ref_key:"refPopper",ref:C,visible:l.value,effect:"light",pure:"",trigger:"click"},n.$attrs,{role:"dialog",teleported:"",transition:`${e(h).namespace.value}-zoom-in-top`,"popper-class":[`${e(h).namespace.value}-picker__popper`,n.popperClass],"popper-options":e(F),"fallback-placements":["bottom","top","right","left"],"gpu-acceleration":!1,"stop-popper-mouse-event":!1,"hide-after":0,persistent:"",onBeforeShow:W,onShow:g,onHide:oe}),{default:Y(()=>[e(Pe)?(E(),q("div",{key:1,ref_key:"inputRef",ref:M,class:A([e(h).b("editor"),e(h).bm("editor",n.type),e(_).e("wrapper"),e(h).is("disabled",e(o)),e(h).is("active",l.value),e(d).b("editor"),e($e)?e(d).bm("editor",e($e)):"",n.$attrs.class]),style:Nt(n.$attrs.style),onClick:B,onMouseenter:ue,onMouseleave:Me,onTouchstart:be,onKeydown:tt},[e(te)?(E(),ge(e(ke),{key:0,class:A([e(_).e("icon"),e(d).e("icon")]),onMousedown:Fe(re,["prevent"]),onTouchstart:be},{default:Y(()=>[(E(),ge(vt(e(te))))]),_:1},8,["class","onMousedown"])):fe("v-if",!0),Q("input",{id:n.id&&n.id[0],autocomplete:"off",name:n.name&&n.name[0],placeholder:n.startPlaceholder,value:e(N)&&e(N)[0],disabled:e(o),readonly:!n.editable||n.readonly,class:A(e(d).b("input")),onMousedown:re,onInput:Ge,onChange:nt,onFocus:B,onBlur:P},null,42,Ga),dt(n.$slots,"range-separator",{},()=>[Q("span",{class:A(e(d).b("separator"))},ve(n.rangeSeparator),3)]),Q("input",{id:n.id&&n.id[1],autocomplete:"off",name:n.name&&n.name[1],placeholder:n.endPlaceholder,value:e(N)&&e(N)[1],disabled:e(o),readonly:!n.editable||n.readonly,class:A(e(d).b("input")),onMousedown:re,onFocus:B,onBlur:P,onInput:Ue,onChange:lt},null,42,qa),n.clearIcon?(E(),ge(e(ke),{key:1,class:A([e(_).e("icon"),e(d).e("close-icon"),{[e(d).e("close-icon--hidden")]:!ae.value}]),onClick:de},{default:Y(()=>[(E(),ge(vt(n.clearIcon)))]),_:1},8,["class"])):fe("v-if",!0)],38)):(E(),ge(e(Le),{key:0,id:n.id,ref_key:"inputRef",ref:M,"container-role":"combobox","model-value":e(N),name:n.name,size:e($e),disabled:e(o),placeholder:n.placeholder,class:A([e(h).b("editor"),e(h).bm("editor",n.type),n.$attrs.class]),style:Nt(n.$attrs.style),readonly:!n.editable||n.readonly||e(G)||n.type==="week",label:n.label,tabindex:n.tabindex,"validate-event":!1,onInput:at,onFocus:B,onBlur:P,onKeydown:tt,onChange:je,onMousedown:re,onMouseenter:ue,onMouseleave:Me,onTouchstart:be,onClick:f[0]||(f[0]=Fe(()=>{},["stop"]))},{prefix:Y(()=>[e(te)?(E(),ge(e(ke),{key:0,class:A(e(_).e("icon")),onMousedown:Fe(re,["prevent"]),onTouchstart:be},{default:Y(()=>[(E(),ge(vt(e(te))))]),_:1},8,["class","onMousedown"])):fe("v-if",!0)]),suffix:Y(()=>[ae.value&&n.clearIcon?(E(),ge(e(ke),{key:0,class:A(`${e(_).e("icon")} clear-icon`),onClick:Fe(de,["stop"])},{default:Y(()=>[(E(),ge(vt(n.clearIcon)))]),_:1},8,["class","onClick"])):fe("v-if",!0)]),_:1},8,["id","model-value","name","size","disabled","placeholder","class","style","readonly","label","tabindex","onKeydown"]))]),content:Y(()=>[dt(n.$slots,"default",{visible:l.value,actualVisible:b.value,parsedValue:e(u),format:n.format,unlinkPanels:n.unlinkPanels,type:n.type,defaultValue:n.defaultValue,onPick:U,onSelectRange:Z,onSetPickerOption:S,onCalendarChange:z,onPanelChange:le,onKeydown:J,onMousedown:f[1]||(f[1]=Fe(()=>{},["stop"]))})]),_:3},16,["visible","transition","popper-class","popper-options"]))}});var Qa=ze(Xa,[["__file","/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/common/picker.vue"]]);const en=Ce({...Za,datetimeRole:String,parsedValue:{type:me(Object)}}),tn=({getAvailableHours:m,getAvailableMinutes:v,getAvailableSeconds:a})=>{const t=(_,d,D,k)=>{const F={hour:m,minute:v,second:a};let C=_;return["hour","minute","second"].forEach(M=>{if(F[M]){let l;const b=F[M];switch(M){case"minute":{l=b(C.hour(),d,k);break}case"second":{l=b(C.hour(),C.minute(),d,k);break}default:{l=b(d,k);break}}if((l==null?void 0:l.length)&&!l.includes(C[M]())){const r=D?0:l.length-1;C=C[M](l[r])}}}),C},c={};return{timePickerOptions:c,getAvailableTime:t,onSetOption:([_,d])=>{c[_]=d}}},Mt=m=>{const v=(t,c)=>t||c,a=t=>t!==!0;return m.map(v).filter(a)},oa=(m,v,a)=>({getHoursList:(_,d)=>Dt(24,m&&(()=>m==null?void 0:m(_,d))),getMinutesList:(_,d,D)=>Dt(60,v&&(()=>v==null?void 0:v(_,d,D))),getSecondsList:(_,d,D,k)=>Dt(60,a&&(()=>a==null?void 0:a(_,d,D,k)))}),an=(m,v,a)=>{const{getHoursList:t,getMinutesList:c,getSecondsList:h}=oa(m,v,a);return{getAvailableHours:(k,F)=>Mt(t(k,F)),getAvailableMinutes:(k,F,C)=>Mt(c(k,F,C)),getAvailableSeconds:(k,F,C,M)=>Mt(h(k,F,C,M))}},nn=m=>{const v=X(m.parsedValue);return Ye(()=>m.visible,a=>{a||(v.value=m.parsedValue)}),v},ln=100,on=600,Wt={beforeMount(m,v){const a=v.value,{interval:t=ln,delay:c=on}=ft(a)?{}:a;let h,_;const d=()=>ft(a)?a():a.handler(),D=()=>{_&&(clearTimeout(_),_=void 0),h&&(clearInterval(h),h=void 0)};m.addEventListener("mousedown",k=>{k.button===0&&(D(),d(),document.addEventListener("mouseup",()=>D(),{once:!0}),_=setTimeout(()=>{h=setInterval(()=>{d()},t)},c))})}},sn=Ce({role:{type:String,required:!0},spinnerDate:{type:me(Object),required:!0},showSeconds:{type:Boolean,default:!0},arrowControl:Boolean,amPmMode:{type:me(String),default:""},...na}),rn=["onClick"],un=["onMouseenter"],cn=Oe({__name:"basic-time-spinner",props:sn,emits:["change","select-range","set-option"],setup(m,{emit:v}){const a=m,t=xe("time"),{getHoursList:c,getMinutesList:h,getSecondsList:_}=oa(a.disabledHours,a.disabledMinutes,a.disabledSeconds);let d=!1;const D=X(),k=X(),F=X(),C=X(),M={hours:k,minutes:F,seconds:C},l=j(()=>a.showSeconds?Et:Et.slice(0,2)),b=j(()=>{const{spinnerDate:o}=a,u=o.hour(),N=o.minute(),s=o.second();return{hours:u,minutes:N,seconds:s}}),r=j(()=>{const{hours:o,minutes:u}=e(b);return{hours:c(a.role),minutes:h(o,a.role),seconds:_(o,u,a.role)}}),$=j(()=>{const{hours:o,minutes:u,seconds:N}=e(b);return{hours:_t(o,23),minutes:_t(u,59),seconds:_t(N,59)}}),L=Ea(o=>{d=!1,O(o)},200),R=o=>{if(!!!a.amPmMode)return"";const N=a.amPmMode==="A";let s=o<12?" am":" pm";return N&&(s=s.toUpperCase()),s},p=o=>{let u;switch(o){case"hours":u=[0,2];break;case"minutes":u=[3,5];break;case"seconds":u=[6,8];break}const[N,s]=u;v("select-range",N,s),D.value=o},O=o=>{ee(o,e(b)[o])},K=()=>{O("hours"),O("minutes"),O("seconds")},Z=o=>o.querySelector(`.${t.namespace.value}-scrollbar__wrap`),ee=(o,u)=>{if(a.arrowControl)return;const N=e(M[o]);N&&N.$el&&(Z(N.$el).scrollTop=Math.max(0,u*U(o)))},U=o=>{const u=e(M[o]);return(u==null?void 0:u.$el.querySelector("li").offsetHeight)||0},W=()=>{J(1)},g=()=>{J(-1)},J=o=>{D.value||p("hours");const u=D.value,N=e(b)[u],s=D.value==="hours"?24:60,x=oe(u,N,o,s);T(u,x),ee(u,x),Ae(()=>p(u))},oe=(o,u,N,s)=>{let x=(u+N+s)%s;const G=e(r)[o];for(;G[x]&&x!==u;)x=(x+N+s)%s;return x},T=(o,u)=>{if(e(r)[o][u])return;const{hours:x,minutes:G,seconds:te}=e(b);let ae;switch(o){case"hours":ae=a.spinnerDate.hour(u).minute(G).second(te);break;case"minutes":ae=a.spinnerDate.hour(x).minute(u).second(te);break;case"seconds":ae=a.spinnerDate.hour(x).minute(G).second(u);break}v("change",ae)},w=(o,{value:u,disabled:N})=>{N||(T(o,u),p(o),ee(o,u))},V=o=>{d=!0,L(o);const u=Math.min(Math.round((Z(e(M[o]).$el).scrollTop-(B(o)*.5-10)/U(o)+3)/U(o)),o==="hours"?23:59);T(o,u)},B=o=>e(M[o]).$el.offsetHeight,y=()=>{const o=u=>{const N=e(M[u]);N&&N.$el&&(Z(N.$el).onscroll=()=>{V(u)})};o("hours"),o("minutes"),o("seconds")};Ca(()=>{Ae(()=>{!a.arrowControl&&y(),K(),a.role==="start"&&p("hours")})});const P=(o,u)=>{M[u].value=o};return v("set-option",[`${a.role}_scrollDown`,J]),v("set-option",[`${a.role}_emitSelectRange`,p]),Ye(()=>a.spinnerDate,()=>{d||K()}),(o,u)=>(E(),q("div",{class:A([e(t).b("spinner"),{"has-seconds":o.showSeconds}])},[o.arrowControl?fe("v-if",!0):(E(!0),q(he,{key:0},Ve(e(l),N=>(E(),ge(e(Pa),{key:N,ref_for:!0,ref:s=>P(s,N),class:A(e(t).be("spinner","wrapper")),"wrap-style":"max-height: inherit;","view-class":e(t).be("spinner","list"),noresize:"",tag:"ul",onMouseenter:s=>p(N),onMousemove:s=>O(N)},{default:Y(()=>[(E(!0),q(he,null,Ve(e(r)[N],(s,x)=>(E(),q("li",{key:x,class:A([e(t).be("spinner","item"),e(t).is("active",x===e(b)[N]),e(t).is("disabled",s)]),onClick:G=>w(N,{value:x,disabled:s})},[N==="hours"?(E(),q(he,{key:0},[ce(ve(("0"+(o.amPmMode?x%12||12:x)).slice(-2))+ve(R(x)),1)],64)):(E(),q(he,{key:1},[ce(ve(("0"+x).slice(-2)),1)],64))],10,rn))),128))]),_:2},1032,["class","view-class","onMouseenter","onMousemove"]))),128)),o.arrowControl?(E(!0),q(he,{key:1},Ve(e(l),N=>(E(),q("div",{key:N,class:A([e(t).be("spinner","wrapper"),e(t).is("arrow")]),onMouseenter:s=>p(N)},[Re((E(),ge(e(ke),{class:A(["arrow-up",e(t).be("spinner","arrow")])},{default:Y(()=>[i(e(Va))]),_:1},8,["class"])),[[e(Wt),g]]),Re((E(),ge(e(ke),{class:A(["arrow-down",e(t).be("spinner","arrow")])},{default:Y(()=>[i(e(Ta))]),_:1},8,["class"])),[[e(Wt),W]]),Q("ul",{class:A(e(t).be("spinner","list"))},[(E(!0),q(he,null,Ve(e($)[N],(s,x)=>(E(),q("li",{key:x,class:A([e(t).be("spinner","item"),e(t).is("active",s===e(b)[N]),e(t).is("disabled",e(r)[N][s])])},[typeof s=="number"?(E(),q(he,{key:0},[N==="hours"?(E(),q(he,{key:0},[ce(ve(("0"+(o.amPmMode?s%12||12:s)).slice(-2))+ve(R(s)),1)],64)):(E(),q(he,{key:1},[ce(ve(("0"+s).slice(-2)),1)],64))],64)):fe("v-if",!0)],2))),128))],2)],42,un))),128)):fe("v-if",!0)],2))}});var dn=ze(cn,[["__file","/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"]]);const fn=Oe({__name:"panel-time-pick",props:en,emits:["pick","select-range","set-picker-option"],setup(m,{emit:v}){const a=m,t=Je("EP_PICKER_BASE"),{arrowControl:c,disabledHours:h,disabledMinutes:_,disabledSeconds:d,defaultValue:D}=t.props,{getAvailableHours:k,getAvailableMinutes:F,getAvailableSeconds:C}=an(h,_,d),M=xe("time"),{t:l,lang:b}=Be(),r=X([0,2]),$=nn(a),L=j(()=>xa(a.actualVisible)?`${M.namespace.value}-zoom-in-top`:""),R=j(()=>a.format.includes("ss")),p=j(()=>a.format.includes("A")?"A":a.format.includes("a")?"a":""),O=P=>{const o=ne(P).locale(b.value),u=w(o);return o.isSame(u)},K=()=>{v("pick",$.value,!1)},Z=(P=!1,o=!1)=>{o||v("pick",a.parsedValue,P)},ee=P=>{if(!a.visible)return;const o=w(P).millisecond(0);v("pick",o,!0)},U=(P,o)=>{v("select-range",P,o),r.value=[P,o]},W=P=>{const o=[0,3].concat(R.value?[6]:[]),u=["hours","minutes"].concat(R.value?["seconds"]:[]),s=(o.indexOf(r.value[0])+P+o.length)%o.length;J.start_emitSelectRange(u[s])},g=P=>{const o=P.code,{left:u,right:N,up:s,down:x}=_e;if([u,N].includes(o)){W(o===u?-1:1),P.preventDefault();return}if([s,x].includes(o)){const G=o===s?-1:1;J.start_scrollDown(G),P.preventDefault();return}},{timePickerOptions:J,onSetOption:oe,getAvailableTime:T}=tn({getAvailableHours:k,getAvailableMinutes:F,getAvailableSeconds:C}),w=P=>T(P,a.datetimeRole||"",!0),V=P=>P?ne(P,a.format).locale(b.value):null,B=P=>P?P.format(a.format):null,y=()=>ne(D).locale(b.value);return v("set-picker-option",["isValidValue",O]),v("set-picker-option",["formatToString",B]),v("set-picker-option",["parseUserInput",V]),v("set-picker-option",["handleKeydownInput",g]),v("set-picker-option",["getRangeAvailableTime",w]),v("set-picker-option",["getDefaultValue",y]),(P,o)=>(E(),ge(Oa,{name:e(L)},{default:Y(()=>[P.actualVisible||P.visible?(E(),q("div",{key:0,class:A(e(M).b("panel"))},[Q("div",{class:A([e(M).be("panel","content"),{"has-seconds":e(R)}])},[i(dn,{ref:"spinner",role:P.datetimeRole||"start","arrow-control":e(c),"show-seconds":e(R),"am-pm-mode":e(p),"spinner-date":P.parsedValue,"disabled-hours":e(h),"disabled-minutes":e(_),"disabled-seconds":e(d),onChange:ee,onSetOption:e(oe),onSelectRange:U},null,8,["role","arrow-control","show-seconds","am-pm-mode","spinner-date","disabled-hours","disabled-minutes","disabled-seconds","onSetOption"])],2),Q("div",{class:A(e(M).be("panel","footer"))},[Q("button",{type:"button",class:A([e(M).be("panel","btn"),"cancel"]),onClick:K},ve(e(l)("el.datepicker.cancel")),3),Q("button",{type:"button",class:A([e(M).be("panel","btn"),"confirm"]),onClick:o[0]||(o[0]=u=>Z())},ve(e(l)("el.datepicker.confirm")),3)],2)],2)):fe("v-if",!0)]),_:1},8,["name"]))}});var Pt=ze(fn,[["__file","/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-pick.vue"]]),sa={exports:{}};(function(m,v){(function(a,t){m.exports=t()})(Ke,function(){return function(a,t,c){var h=t.prototype,_=function(C){return C&&(C.indexOf?C:C.s)},d=function(C,M,l,b,r){var $=C.name?C:C.$locale(),L=_($[M]),R=_($[l]),p=L||R.map(function(K){return K.slice(0,b)});if(!r)return p;var O=$.weekStart;return p.map(function(K,Z){return p[(Z+(O||0))%7]})},D=function(){return c.Ls[c.locale()]},k=function(C,M){return C.formats[M]||function(l){return l.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(b,r,$){return r||$.slice(1)})}(C.formats[M.toUpperCase()])},F=function(){var C=this;return{months:function(M){return M?M.format("MMMM"):d(C,"months")},monthsShort:function(M){return M?M.format("MMM"):d(C,"monthsShort","months",3)},firstDayOfWeek:function(){return C.$locale().weekStart||0},weekdays:function(M){return M?M.format("dddd"):d(C,"weekdays")},weekdaysMin:function(M){return M?M.format("dd"):d(C,"weekdaysMin","weekdays",2)},weekdaysShort:function(M){return M?M.format("ddd"):d(C,"weekdaysShort","weekdays",3)},longDateFormat:function(M){return k(C.$locale(),M)},meridiem:this.$locale().meridiem,ordinal:this.$locale().ordinal}};h.localeData=function(){return F.bind(this)()},c.localeData=function(){var C=D();return{firstDayOfWeek:function(){return C.weekStart||0},weekdays:function(){return c.weekdays()},weekdaysShort:function(){return c.weekdaysShort()},weekdaysMin:function(){return c.weekdaysMin()},months:function(){return c.months()},monthsShort:function(){return c.monthsShort()},longDateFormat:function(M){return k(C,M)},meridiem:C.meridiem,ordinal:C.ordinal}},c.months=function(){return d(D(),"months")},c.monthsShort=function(){return d(D(),"monthsShort","months",3)},c.weekdays=function(C){return d(D(),"weekdays",null,null,C)},c.weekdaysShort=function(C){return d(D(),"weekdaysShort","weekdays",3,C)},c.weekdaysMin=function(C){return d(D(),"weekdaysMin","weekdays",2,C)}}})})(sa);const pn=sa.exports;var ra={exports:{}};(function(m,v){(function(a,t){m.exports=t()})(Ke,function(){return function(a,t){var c=t.prototype,h=c.format;c.format=function(_){var d=this,D=this.$locale();if(!this.isValid())return h.bind(this)(_);var k=this.$utils(),F=(_||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,function(C){switch(C){case"Q":return Math.ceil((d.$M+1)/3);case"Do":return D.ordinal(d.$D);case"gggg":return d.weekYear();case"GGGG":return d.isoWeekYear();case"wo":return D.ordinal(d.week(),"W");case"w":case"ww":return k.s(d.week(),C==="w"?1:2,"0");case"W":case"WW":return k.s(d.isoWeek(),C==="W"?1:2,"0");case"k":case"kk":return k.s(String(d.$H===0?24:d.$H),C==="k"?1:2,"0");case"X":return Math.floor(d.$d.getTime()/1e3);case"x":return d.$d.getTime();case"z":return"["+d.offsetName()+"]";case"zzz":return"["+d.offsetName("long")+"]";default:return C}});return h.bind(this)(F)}}})})(ra);const mn=ra.exports;var ua={exports:{}};(function(m,v){(function(a,t){m.exports=t()})(Ke,function(){var a="week",t="year";return function(c,h,_){var d=h.prototype;d.week=function(D){if(D===void 0&&(D=null),D!==null)return this.add(7*(D-this.week()),"day");var k=this.$locale().yearStart||1;if(this.month()===11&&this.date()>25){var F=_(this).startOf(t).add(1,t).date(k),C=_(this).endOf(a);if(F.isBefore(C))return 1}var M=_(this).startOf(t).date(k).startOf(a).subtract(1,"millisecond"),l=this.diff(M,a,!0);return l<0?_(this).startOf("week").week():Math.ceil(l)},d.weeks=function(D){return D===void 0&&(D=null),this.week(D)}}})})(ua);const vn=ua.exports;var ia={exports:{}};(function(m,v){(function(a,t){m.exports=t()})(Ke,function(){return function(a,t){t.prototype.weekYear=function(){var c=this.month(),h=this.week(),_=this.year();return h===1&&c===11?_+1:c===0&&h>=52?_-1:_}}})})(ia);const hn=ia.exports;var ca={exports:{}};(function(m,v){(function(a,t){m.exports=t()})(Ke,function(){return function(a,t,c){t.prototype.dayOfYear=function(h){var _=Math.round((c(this).startOf("day")-c(this).startOf("year"))/864e5)+1;return h==null?_:this.add(h-_,"day")}}})})(ca);const bn=ca.exports;var da={exports:{}};(function(m,v){(function(a,t){m.exports=t()})(Ke,function(){return function(a,t){t.prototype.isSameOrAfter=function(c,h){return this.isSame(c,h)||this.isAfter(c,h)}}})})(da);const yn=da.exports;var fa={exports:{}};(function(m,v){(function(a,t){m.exports=t()})(Ke,function(){return function(a,t){t.prototype.isSameOrBefore=function(c,h){return this.isSame(c,h)||this.isBefore(c,h)}}})})(fa);const gn=fa.exports,It=Symbol(),kn=Ce({type:{type:me(String),default:"date"}}),wn=["date","dates","year","month","week","range"],Yt=Ce({disabledDate:{type:me(Function)},date:{type:me(Object),required:!0},minDate:{type:me(Object)},maxDate:{type:me(Object)},parsedValue:{type:me([Object,Array])},rangeState:{type:me(Object),default:()=>({endDate:null,selecting:!1})}}),pa=Ce({type:{type:me(String),required:!0,values:za}}),ma=Ce({unlinkPanels:Boolean,parsedValue:{type:me(Array)}}),va=m=>({type:String,values:wn,default:m}),_n=Ce({...pa,parsedValue:{type:me([Object,Array])},visible:{type:Boolean},format:{type:String,default:""}}),Dn=Ce({...Yt,cellClassName:{type:me(Function)},showWeekNumber:Boolean,selectionMode:va("date")}),Vt=m=>{if(!Se(m))return!1;const[v,a]=m;return ne.isDayjs(v)&&ne.isDayjs(a)&&v.isSameOrBefore(a)},ha=(m,{lang:v,unit:a,unlinkPanels:t})=>{let c;if(Se(m)){let[h,_]=m.map(d=>ne(d).locale(v));return t||(_=h.add(1,a)),[h,_]}else m?c=ne(m):c=ne();return c=c.locale(v),[c,c.add(1,a)]},Mn=(m,v,{columnIndexOffset:a,startDate:t,nextEndDate:c,now:h,unit:_,relativeDateGetter:d,setCellMetadata:D,setRowMetadata:k})=>{for(let F=0;F<m.row;F++){const C=v[F];for(let M=0;M<m.column;M++){let l=C[M+a];l||(l={row:F,column:M,type:"normal",inRange:!1,start:!1,end:!1});const b=F*m.column+M,r=d(b);l.dayjs=r,l.date=r.toDate(),l.timestamp=r.valueOf(),l.type="normal",l.inRange=!!(t&&r.isSameOrAfter(t,_)&&c&&r.isSameOrBefore(c,_))||!!(t&&r.isSameOrBefore(t,_)&&c&&r.isSameOrAfter(c,_)),t!=null&&t.isSameOrAfter(c)?(l.start=!!c&&r.isSame(c,_),l.end=t&&r.isSame(t,_)):(l.start=!!t&&r.isSame(t,_),l.end=!!c&&r.isSame(c,_)),r.isSame(h,_)&&(l.type="today"),D==null||D(l,{rowIndex:F,columnIndex:M}),C[M+a]=l}k==null||k(C)}},$n=Ce({cell:{type:me(Object)}});var Sn=Oe({name:"ElDatePickerCell",props:$n,setup(m){const v=xe("date-table-cell"),{slots:a}=Je(It);return()=>{const{cell:t}=m;if(a.default){const c=a.default(t).filter(h=>h.patchFlag!==-2&&h.type.toString()!=="Symbol(Comment)");if(c.length)return c}return i("div",{class:v.b()},[i("span",{class:v.e("text")},[t==null?void 0:t.text])])}}});const Cn=["aria-label","onMousedown"],Pn={key:0,scope:"col"},Vn=["aria-label"],Tn=["aria-current","aria-selected","tabindex"],xn=Oe({__name:"basic-date-table",props:Dn,emits:["changerange","pick","select"],setup(m,{expose:v,emit:a}){const t=m,c=xe("date-table"),{t:h,lang:_}=Be(),d=X(),D=X(),k=X(),F=X(),C=X([[],[],[],[],[],[]]);let M=!1;const l=t.date.$locale().weekStart||7,b=t.date.locale("en").localeData().weekdaysShort().map(s=>s.toLowerCase()),r=j(()=>l>3?7-l:-l),$=j(()=>{const s=t.date.startOf("month");return s.subtract(s.day()||7,"day")}),L=j(()=>b.concat(b).slice(l,l+7)),R=j(()=>Fa(U.value).some(s=>s.isCurrent)),p=j(()=>{const s=t.date.startOf("month"),x=s.day()||7,G=s.daysInMonth(),te=s.subtract(1,"month").daysInMonth();return{startOfMonthDay:x,dateCountOfMonth:G,dateCountOfLastMonth:te}}),O=j(()=>t.selectionMode==="dates"?et(t.parsedValue):[]),K=(s,{count:x,rowIndex:G,columnIndex:te})=>{const{startOfMonthDay:ae,dateCountOfMonth:de,dateCountOfLastMonth:se}=e(p),re=e(r);if(G>=0&&G<=1){const ue=ae+re<0?7+ae+re:ae+re;if(te+G*7>=ue)return s.text=x,!0;s.text=se-(ue-te%7)+1+G*7,s.type="prev-month"}else return x<=de?s.text=x:(s.text=x-de,s.type="next-month"),!0;return!1},Z=(s,{columnIndex:x,rowIndex:G},te)=>{const{disabledDate:ae,cellClassName:de}=t,se=e(O),re=K(s,{count:te,rowIndex:G,columnIndex:x}),ue=s.dayjs.toDate();return s.selected=se.find(Me=>Me.valueOf()===s.dayjs.valueOf()),s.isSelected=!!s.selected,s.isCurrent=J(s),s.disabled=ae==null?void 0:ae(ue),s.customClass=de==null?void 0:de(ue),re},ee=s=>{if(t.selectionMode==="week"){const[x,G]=t.showWeekNumber?[1,7]:[0,6],te=N(s[x+1]);s[x].inRange=te,s[x].start=te,s[G].inRange=te,s[G].end=te}},U=j(()=>{const{minDate:s,maxDate:x,rangeState:G,showWeekNumber:te}=t,ae=r.value,de=C.value,se="day";let re=1;if(te)for(let ue=0;ue<6;ue++)de[ue][0]||(de[ue][0]={type:"week",text:$.value.add(ue*7+1,se).week()});return Mn({row:6,column:7},de,{startDate:s,columnIndexOffset:te?1:0,nextEndDate:G.endDate||x||G.selecting&&s||null,now:ne().locale(e(_)).startOf(se),unit:se,relativeDateGetter:ue=>$.value.add(ue-ae,se),setCellMetadata:(...ue)=>{Z(...ue,re)&&(re+=1)},setRowMetadata:ee}),de});Ye(()=>t.date,async()=>{var s,x;(s=d.value)!=null&&s.contains(document.activeElement)&&(await Ae(),(x=D.value)==null||x.focus())});const W=async()=>{var s;(s=D.value)==null||s.focus()},g=(s="")=>["normal","today"].includes(s),J=s=>t.selectionMode==="date"&&g(s.type)&&oe(s,t.parsedValue),oe=(s,x)=>x?ne(x).locale(_.value).isSame(t.date.date(Number(s.text)),"day"):!1,T=s=>{const x=[];return g(s.type)&&!s.disabled?(x.push("available"),s.type==="today"&&x.push("today")):x.push(s.type),J(s)&&x.push("current"),s.inRange&&(g(s.type)||t.selectionMode==="week")&&(x.push("in-range"),s.start&&x.push("start-date"),s.end&&x.push("end-date")),s.disabled&&x.push("disabled"),s.selected&&x.push("selected"),s.customClass&&x.push(s.customClass),x.join(" ")},w=(s,x)=>{const G=s*7+(x-(t.showWeekNumber?1:0))-r.value;return $.value.add(G,"day")},V=s=>{var x;if(!t.rangeState.selecting)return;let G=s.target;if(G.tagName==="SPAN"&&(G=(x=G.parentNode)==null?void 0:x.parentNode),G.tagName==="DIV"&&(G=G.parentNode),G.tagName!=="TD")return;const te=G.parentNode.rowIndex-1,ae=G.cellIndex;U.value[te][ae].disabled||(te!==k.value||ae!==F.value)&&(k.value=te,F.value=ae,a("changerange",{selecting:!0,endDate:w(te,ae)}))},B=s=>!R.value&&(s==null?void 0:s.text)===1&&s.type==="normal"||s.isCurrent,y=s=>{M||R.value||t.selectionMode!=="date"||u(s,!0)},P=s=>{!s.target.closest("td")||(M=!0)},o=s=>{!s.target.closest("td")||(M=!1)},u=(s,x=!1)=>{const G=s.target.closest("td");if(!G)return;const te=G.parentNode.rowIndex-1,ae=G.cellIndex,de=U.value[te][ae];if(de.disabled||de.type==="week")return;const se=w(te,ae);if(t.selectionMode==="range")!t.rangeState.selecting||!t.minDate?(a("pick",{minDate:se,maxDate:null}),a("select",!0)):(se>=t.minDate?a("pick",{minDate:t.minDate,maxDate:se}):a("pick",{minDate:se,maxDate:t.minDate}),a("select",!1));else if(t.selectionMode==="date")a("pick",se,x);else if(t.selectionMode==="week"){const re=se.week(),ue=`${se.year()}w${re}`;a("pick",{year:se.year(),week:re,value:ue,date:se.startOf("week")})}else if(t.selectionMode==="dates"){const re=de.selected?et(t.parsedValue).filter(ue=>(ue==null?void 0:ue.valueOf())!==se.valueOf()):et(t.parsedValue).concat([se]);a("pick",re)}},N=s=>{if(t.selectionMode!=="week")return!1;let x=t.date.startOf("day");if(s.type==="prev-month"&&(x=x.subtract(1,"month")),s.type==="next-month"&&(x=x.add(1,"month")),x=x.date(Number.parseInt(s.text,10)),t.parsedValue&&!Array.isArray(t.parsedValue)){const G=(t.parsedValue.day()-l+7)%7-1;return t.parsedValue.subtract(G,"day").isSame(x,"day")}return!1};return v({focus:W}),(s,x)=>(E(),q("table",{role:"grid","aria-label":e(h)("el.datepicker.dateTablePrompt"),cellspacing:"0",cellpadding:"0",class:A([e(c).b(),{"is-week-mode":s.selectionMode==="week"}]),onClick:u,onMousemove:V,onMousedown:Fe(P,["prevent"]),onMouseup:o},[Q("tbody",{ref_key:"tbodyRef",ref:d},[Q("tr",null,[s.showWeekNumber?(E(),q("th",Pn,ve(e(h)("el.datepicker.week")),1)):fe("v-if",!0),(E(!0),q(he,null,Ve(e(L),(G,te)=>(E(),q("th",{key:te,scope:"col","aria-label":e(h)("el.datepicker.weeksFull."+G)},ve(e(h)("el.datepicker.weeks."+G)),9,Vn))),128))]),(E(!0),q(he,null,Ve(e(U),(G,te)=>(E(),q("tr",{key:te,class:A([e(c).e("row"),{current:N(G[1])}])},[(E(!0),q(he,null,Ve(G,(ae,de)=>(E(),q("td",{key:`${te}.${de}`,ref_for:!0,ref:se=>B(ae)&&(D.value=se),class:A(T(ae)),"aria-current":ae.isCurrent?"date":void 0,"aria-selected":ae.isCurrent,tabindex:B(ae)?0:-1,onFocus:y},[i(e(Sn),{cell:ae},null,8,["cell"])],42,Tn))),128))],2))),128))],512)],42,Cn))}});var Tt=ze(xn,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-date-table.vue"]]);const On=Ce({...Yt,selectionMode:va("month")}),In=["aria-label"],Yn=["aria-selected","aria-label","tabindex","onKeydown"],An={class:"cell"},Rn=Oe({__name:"basic-month-table",props:On,emits:["changerange","pick","select"],setup(m,{expose:v,emit:a}){const t=m,c=(O,K,Z)=>{const ee=ne().locale(Z).startOf("month").month(K).year(O),U=ee.daysInMonth();return ea(U).map(W=>ee.add(W,"day").toDate())},h=xe("month-table"),{t:_,lang:d}=Be(),D=X(),k=X(),F=X(t.date.locale("en").localeData().monthsShort().map(O=>O.toLowerCase())),C=X([[],[],[]]),M=X(),l=X(),b=j(()=>{var O,K;const Z=C.value,ee=ne().locale(d.value).startOf("month");for(let U=0;U<3;U++){const W=Z[U];for(let g=0;g<4;g++){const J=W[g]||(W[g]={row:U,column:g,type:"normal",inRange:!1,start:!1,end:!1,text:-1,disabled:!1});J.type="normal";const oe=U*4+g,T=t.date.startOf("year").month(oe),w=t.rangeState.endDate||t.maxDate||t.rangeState.selecting&&t.minDate||null;J.inRange=!!(t.minDate&&T.isSameOrAfter(t.minDate,"month")&&w&&T.isSameOrBefore(w,"month"))||!!(t.minDate&&T.isSameOrBefore(t.minDate,"month")&&w&&T.isSameOrAfter(w,"month")),(O=t.minDate)!=null&&O.isSameOrAfter(w)?(J.start=!!(w&&T.isSame(w,"month")),J.end=t.minDate&&T.isSame(t.minDate,"month")):(J.start=!!(t.minDate&&T.isSame(t.minDate,"month")),J.end=!!(w&&T.isSame(w,"month"))),ee.isSame(T)&&(J.type="today"),J.text=oe,J.disabled=((K=t.disabledDate)==null?void 0:K.call(t,T.toDate()))||!1}}return Z}),r=()=>{var O;(O=k.value)==null||O.focus()},$=O=>{const K={},Z=t.date.year(),ee=new Date,U=O.text;return K.disabled=t.disabledDate?c(Z,U,d.value).every(t.disabledDate):!1,K.current=et(t.parsedValue).findIndex(W=>ne.isDayjs(W)&&W.year()===Z&&W.month()===U)>=0,K.today=ee.getFullYear()===Z&&ee.getMonth()===U,O.inRange&&(K["in-range"]=!0,O.start&&(K["start-date"]=!0),O.end&&(K["end-date"]=!0)),K},L=O=>{const K=t.date.year(),Z=O.text;return et(t.date).findIndex(ee=>ee.year()===K&&ee.month()===Z)>=0},R=O=>{var K;if(!t.rangeState.selecting)return;let Z=O.target;if(Z.tagName==="A"&&(Z=(K=Z.parentNode)==null?void 0:K.parentNode),Z.tagName==="DIV"&&(Z=Z.parentNode),Z.tagName!=="TD")return;const ee=Z.parentNode.rowIndex,U=Z.cellIndex;b.value[ee][U].disabled||(ee!==M.value||U!==l.value)&&(M.value=ee,l.value=U,a("changerange",{selecting:!0,endDate:t.date.startOf("year").month(ee*4+U)}))},p=O=>{var K;const Z=(K=O.target)==null?void 0:K.closest("td");if((Z==null?void 0:Z.tagName)!=="TD"||jt(Z,"disabled"))return;const ee=Z.cellIndex,W=Z.parentNode.rowIndex*4+ee,g=t.date.startOf("year").month(W);t.selectionMode==="range"?t.rangeState.selecting?(t.minDate&&g>=t.minDate?a("pick",{minDate:t.minDate,maxDate:g}):a("pick",{minDate:g,maxDate:t.minDate}),a("select",!1)):(a("pick",{minDate:g,maxDate:null}),a("select",!0)):a("pick",W)};return Ye(()=>t.date,async()=>{var O,K;(O=D.value)!=null&&O.contains(document.activeElement)&&(await Ae(),(K=k.value)==null||K.focus())}),v({focus:r}),(O,K)=>(E(),q("table",{role:"grid","aria-label":e(_)("el.datepicker.monthTablePrompt"),class:A(e(h).b()),onClick:p,onMousemove:R},[Q("tbody",{ref_key:"tbodyRef",ref:D},[(E(!0),q(he,null,Ve(e(b),(Z,ee)=>(E(),q("tr",{key:ee},[(E(!0),q(he,null,Ve(Z,(U,W)=>(E(),q("td",{key:W,ref_for:!0,ref:g=>L(U)&&(k.value=g),class:A($(U)),"aria-selected":`${L(U)}`,"aria-label":e(_)(`el.datepicker.month${+U.text+1}`),tabindex:L(U)?0:-1,onKeydown:[ut(Fe(p,["prevent","stop"]),["space"]),ut(Fe(p,["prevent","stop"]),["enter"])]},[Q("div",null,[Q("span",An,ve(e(_)("el.datepicker.months."+F.value[U.text])),1)])],42,Yn))),128))]))),128))],512)],42,In))}});var xt=ze(Rn,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue"]]);const{date:Nn,disabledDate:En,parsedValue:Fn}=Yt,Ln=Ce({date:Nn,disabledDate:En,parsedValue:Fn}),Bn=["aria-label"],Hn=["aria-selected","tabindex","onKeydown"],Un={class:"cell"},Wn={key:1},zn=Oe({__name:"basic-year-table",props:Ln,emits:["pick"],setup(m,{expose:v,emit:a}){const t=m,c=(r,$)=>{const L=ne(String(r)).locale($).startOf("year"),p=L.endOf("year").dayOfYear();return ea(p).map(O=>L.add(O,"day").toDate())},h=xe("year-table"),{t:_,lang:d}=Be(),D=X(),k=X(),F=j(()=>Math.floor(t.date.year()/10)*10),C=()=>{var r;(r=k.value)==null||r.focus()},M=r=>{const $={},L=ne().locale(d.value);return $.disabled=t.disabledDate?c(r,d.value).every(t.disabledDate):!1,$.current=et(t.parsedValue).findIndex(R=>R.year()===r)>=0,$.today=L.year()===r,$},l=r=>r===F.value&&t.date.year()<F.value&&t.date.year()>F.value+9||et(t.date).findIndex($=>$.year()===r)>=0,b=r=>{const L=r.target.closest("td");if(L&&L.textContent){if(jt(L,"disabled"))return;const R=L.textContent||L.innerText;a("pick",Number(R))}};return Ye(()=>t.date,async()=>{var r,$;(r=D.value)!=null&&r.contains(document.activeElement)&&(await Ae(),($=k.value)==null||$.focus())}),v({focus:C}),(r,$)=>(E(),q("table",{role:"grid","aria-label":e(_)("el.datepicker.yearTablePrompt"),class:A(e(h).b()),onClick:b},[Q("tbody",{ref_key:"tbodyRef",ref:D},[(E(),q(he,null,Ve(3,(L,R)=>Q("tr",{key:R},[(E(),q(he,null,Ve(4,(p,O)=>(E(),q(he,{key:R+"_"+O},[R*4+O<10?(E(),q("td",{key:0,ref_for:!0,ref:K=>l(e(F)+R*4+O)&&(k.value=K),class:A(["available",M(e(F)+R*4+O)]),"aria-selected":`${l(e(F)+R*4+O)}`,tabindex:l(e(F)+R*4+O)?0:-1,onKeydown:[ut(Fe(b,["prevent","stop"]),["space"]),ut(Fe(b,["prevent","stop"]),["enter"])]},[Q("span",Un,ve(e(F)+R*4+O),1)],42,Hn)):(E(),q("td",Wn))],64))),64))])),64))],512)],10,Bn))}});var Kn=ze(zn,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-year-table.vue"]]);const jn=["onClick"],Zn=["aria-label"],Gn=["aria-label"],qn=["aria-label"],Jn=["aria-label"],Xn=Oe({__name:"panel-date-pick",props:_n,emits:["pick","set-picker-option","panel-change"],setup(m,{emit:v}){const a=m,t=(S,z,le)=>!0,c=xe("picker-panel"),h=xe("date-picker"),_=Zt(),d=Gt(),{t:D,lang:k}=Be(),F=Je("EP_PICKER_BASE"),C=Je(Ia),{shortcuts:M,disabledDate:l,cellClassName:b,defaultTime:r,arrowControl:$}=F.props,L=it(F.props,"defaultValue"),R=X(),p=X(ne().locale(k.value)),O=X(!1),K=j(()=>ne(r).locale(k.value)),Z=j(()=>p.value.month()),ee=j(()=>p.value.year()),U=X([]),W=X(null),g=X(null),J=S=>U.value.length>0?t(S,U.value,a.format||"HH:mm:ss"):!0,oe=S=>r&&!be.value&&!O.value?K.value.year(S.year()).month(S.month()).date(S.date()):ae.value?S.millisecond(0):S.startOf("day"),T=(S,...z)=>{if(!S)v("pick",S,...z);else if(Se(S)){const le=S.map(oe);v("pick",le,...z)}else v("pick",oe(S),...z);W.value=null,g.value=null,O.value=!1},w=(S,z)=>{if(u.value==="date"){S=S;let le=a.parsedValue?a.parsedValue.year(S.year()).month(S.month()).date(S.date()):S;J(le)||(le=U.value[0][0].year(S.year()).month(S.month()).date(S.date())),p.value=le,T(le,ae.value||z)}else u.value==="week"?T(S.date):u.value==="dates"&&T(S,!0)},V=S=>{const z=S?"add":"subtract";p.value=p.value[z](1,"month"),ye("month")},B=S=>{const z=p.value,le=S?"add":"subtract";p.value=y.value==="year"?z[le](10,"year"):z[le](1,"year"),ye("year")},y=X("date"),P=j(()=>{const S=D("el.datepicker.year");if(y.value==="year"){const z=Math.floor(ee.value/10)*10;return S?`${z} ${S} - ${z+9} ${S}`:`${z} - ${z+9}`}return`${ee.value} ${S}`}),o=S=>{const z=ft(S.value)?S.value():S.value;if(z){T(ne(z).locale(k.value));return}S.onClick&&S.onClick({attrs:_,slots:d,emit:v})},u=j(()=>{const{type:S}=a;return["week","month","year","dates"].includes(S)?S:"date"}),N=j(()=>u.value==="date"?y.value:u.value),s=j(()=>!!M.length),x=async S=>{p.value=p.value.startOf("month").month(S),u.value==="month"?T(p.value,!1):(y.value="date",["month","year","date","week"].includes(u.value)&&(T(p.value,!0),await Ae(),Ue())),ye("month")},G=async S=>{u.value==="year"?(p.value=p.value.startOf("year").year(S),T(p.value,!1)):(p.value=p.value.year(S),y.value="month",["month","year","date","week"].includes(u.value)&&(T(p.value,!0),await Ae(),Ue())),ye("year")},te=async S=>{y.value=S,await Ae(),Ue()},ae=j(()=>a.type==="datetime"||a.type==="datetimerange"),de=j(()=>ae.value||u.value==="dates"),se=()=>{if(u.value==="dates")T(a.parsedValue);else{let S=a.parsedValue;if(!S){const z=ne(r).locale(k.value),le=Ge();S=z.year(le.year()).month(le.month()).date(le.date())}p.value=S,T(S)}},re=()=>{const z=ne().locale(k.value).toDate();O.value=!0,(!l||!l(z))&&J(z)&&(p.value=ne().locale(k.value),T(p.value))},ue=j(()=>aa(a.format)),Me=j(()=>ta(a.format)),be=j(()=>{if(g.value)return g.value;if(!(!a.parsedValue&&!L.value))return(a.parsedValue||p.value).format(ue.value)}),Pe=j(()=>{if(W.value)return W.value;if(!(!a.parsedValue&&!L.value))return(a.parsedValue||p.value).format(Me.value)}),$e=X(!1),He=()=>{$e.value=!0},Ne=()=>{$e.value=!1},ie=S=>({hour:S.hour(),minute:S.minute(),second:S.second(),year:S.year(),month:S.month(),date:S.date()}),je=(S,z,le)=>{const{hour:n,minute:f,second:I}=ie(S),H=a.parsedValue?a.parsedValue.hour(n).minute(f).second(I):S;p.value=H,T(p.value,!0),le||($e.value=z)},Te=S=>{const z=ne(S,ue.value).locale(k.value);if(z.isValid()&&J(z)){const{year:le,month:n,date:f}=ie(p.value);p.value=z.year(le).month(n).date(f),g.value=null,$e.value=!1,T(p.value,!0)}},Ie=S=>{const z=ne(S,Me.value).locale(k.value);if(z.isValid()){if(l&&l(z.toDate()))return;const{hour:le,minute:n,second:f}=ie(p.value);p.value=z.hour(le).minute(n).second(f),W.value=null,T(p.value,!0)}},Ze=S=>ne.isDayjs(S)&&S.isValid()&&(l?!l(S.toDate()):!0),tt=S=>u.value==="dates"?S.map(z=>z.format(a.format)):S.format(a.format),at=S=>ne(S,a.format).locale(k.value),Ge=()=>{const S=ne(L.value).locale(k.value);if(!L.value){const z=K.value;return ne().hour(z.hour()).minute(z.minute()).second(z.second()).locale(k.value)}return S},Ue=async()=>{var S;["week","month","year","date"].includes(u.value)&&((S=R.value)==null||S.focus(),u.value==="week"&&lt(_e.down))},nt=S=>{const{code:z}=S;[_e.up,_e.down,_e.left,_e.right,_e.home,_e.end,_e.pageUp,_e.pageDown].includes(z)&&(lt(z),S.stopPropagation(),S.preventDefault()),[_e.enter,_e.space].includes(z)&&W.value===null&&g.value===null&&(S.preventDefault(),T(p.value,!1))},lt=S=>{var z;const{up:le,down:n,left:f,right:I,home:H,end:we,pageUp:Xe,pageDown:ot}=_e,ya={year:{[le]:-4,[n]:4,[f]:-1,[I]:1,offset:(pe,Ee)=>pe.setFullYear(pe.getFullYear()+Ee)},month:{[le]:-4,[n]:4,[f]:-1,[I]:1,offset:(pe,Ee)=>pe.setMonth(pe.getMonth()+Ee)},week:{[le]:-1,[n]:1,[f]:-1,[I]:1,offset:(pe,Ee)=>pe.setDate(pe.getDate()+Ee*7)},date:{[le]:-7,[n]:7,[f]:-1,[I]:1,[H]:pe=>-pe.getDay(),[we]:pe=>-pe.getDay()+6,[Xe]:pe=>-new Date(pe.getFullYear(),pe.getMonth(),0).getDate(),[ot]:pe=>new Date(pe.getFullYear(),pe.getMonth()+1,0).getDate(),offset:(pe,Ee)=>pe.setDate(pe.getDate()+Ee)}},ct=p.value.toDate();for(;Math.abs(p.value.diff(ct,"year",!0))<1;){const pe=ya[N.value];if(!pe)return;if(pe.offset(ct,ft(pe[S])?pe[S](ct):(z=pe[S])!=null?z:0),l&&l(ct))break;const Ee=ne(ct).locale(k.value);p.value=Ee,v("pick",Ee,!0);break}},ye=S=>{v("panel-change",p.value.toDate(),S,y.value)};return Ye(()=>u.value,S=>{if(["month","year"].includes(S)){y.value=S;return}y.value="date"},{immediate:!0}),Ye(()=>y.value,()=>{C==null||C.updatePopper()}),Ye(()=>L.value,S=>{S&&(p.value=Ge())},{immediate:!0}),Ye(()=>a.parsedValue,S=>{if(S){if(u.value==="dates"||Array.isArray(S))return;p.value=S}else p.value=Ge()},{immediate:!0}),v("set-picker-option",["isValidValue",Ze]),v("set-picker-option",["formatToString",tt]),v("set-picker-option",["parseUserInput",at]),v("set-picker-option",["handleFocusPicker",Ue]),(S,z)=>(E(),q("div",{class:A([e(c).b(),e(h).b(),{"has-sidebar":S.$slots.sidebar||e(s),"has-time":e(ae)}])},[Q("div",{class:A(e(c).e("body-wrapper"))},[dt(S.$slots,"sidebar",{class:A(e(c).e("sidebar"))}),e(s)?(E(),q("div",{key:0,class:A(e(c).e("sidebar"))},[(E(!0),q(he,null,Ve(e(M),(le,n)=>(E(),q("button",{key:n,type:"button",class:A(e(c).e("shortcut")),onClick:f=>o(le)},ve(le.text),11,jn))),128))],2)):fe("v-if",!0),Q("div",{class:A(e(c).e("body"))},[e(ae)?(E(),q("div",{key:0,class:A(e(h).e("time-header"))},[Q("span",{class:A(e(h).e("editor-wrap"))},[i(e(Le),{placeholder:e(D)("el.datepicker.selectDate"),"model-value":e(Pe),size:"small","validate-event":!1,onInput:z[0]||(z[0]=le=>W.value=le),onChange:Ie},null,8,["placeholder","model-value"])],2),Re((E(),q("span",{class:A(e(h).e("editor-wrap"))},[i(e(Le),{placeholder:e(D)("el.datepicker.selectTime"),"model-value":e(be),size:"small","validate-event":!1,onFocus:He,onInput:z[1]||(z[1]=le=>g.value=le),onChange:Te},null,8,["placeholder","model-value"]),i(e(Pt),{visible:$e.value,format:e(ue),"time-arrow-control":e($),"parsed-value":p.value,onPick:je},null,8,["visible","format","time-arrow-control","parsed-value"])],2)),[[e(Ct),Ne]])],2)):fe("v-if",!0),Re(Q("div",{class:A([e(h).e("header"),(y.value==="year"||y.value==="month")&&e(h).e("header--bordered")])},[Q("span",{class:A(e(h).e("prev-btn"))},[Q("button",{type:"button","aria-label":e(D)("el.datepicker.prevYear"),class:A(["d-arrow-left",e(c).e("icon-btn")]),onClick:z[2]||(z[2]=le=>B(!1))},[i(e(ke),null,{default:Y(()=>[i(e(pt))]),_:1})],10,Zn),Re(Q("button",{type:"button","aria-label":e(D)("el.datepicker.prevMonth"),class:A([e(c).e("icon-btn"),"arrow-left"]),onClick:z[3]||(z[3]=le=>V(!1))},[i(e(ke),null,{default:Y(()=>[i(e(St))]),_:1})],10,Gn),[[st,y.value==="date"]])],2),Q("span",{role:"button",class:A(e(h).e("header-label")),"aria-live":"polite",tabindex:"0",onKeydown:z[4]||(z[4]=ut(le=>te("year"),["enter"])),onClick:z[5]||(z[5]=le=>te("year"))},ve(e(P)),35),Re(Q("span",{role:"button","aria-live":"polite",tabindex:"0",class:A([e(h).e("header-label"),{active:y.value==="month"}]),onKeydown:z[6]||(z[6]=ut(le=>te("month"),["enter"])),onClick:z[7]||(z[7]=le=>te("month"))},ve(e(D)(`el.datepicker.month${e(Z)+1}`)),35),[[st,y.value==="date"]]),Q("span",{class:A(e(h).e("next-btn"))},[Re(Q("button",{type:"button","aria-label":e(D)("el.datepicker.nextMonth"),class:A([e(c).e("icon-btn"),"arrow-right"]),onClick:z[8]||(z[8]=le=>V(!0))},[i(e(ke),null,{default:Y(()=>[i(e(yt))]),_:1})],10,qn),[[st,y.value==="date"]]),Q("button",{type:"button","aria-label":e(D)("el.datepicker.nextYear"),class:A([e(c).e("icon-btn"),"d-arrow-right"]),onClick:z[9]||(z[9]=le=>B(!0))},[i(e(ke),null,{default:Y(()=>[i(e(mt))]),_:1})],10,Jn)],2)],2),[[st,y.value!=="time"]]),Q("div",{class:A(e(c).e("content")),onKeydown:nt},[y.value==="date"?(E(),ge(Tt,{key:0,ref_key:"currentViewRef",ref:R,"selection-mode":e(u),date:p.value,"parsed-value":S.parsedValue,"disabled-date":e(l),"cell-class-name":e(b),onPick:w},null,8,["selection-mode","date","parsed-value","disabled-date","cell-class-name"])):fe("v-if",!0),y.value==="year"?(E(),ge(Kn,{key:1,ref_key:"currentViewRef",ref:R,date:p.value,"disabled-date":e(l),"parsed-value":S.parsedValue,onPick:G},null,8,["date","disabled-date","parsed-value"])):fe("v-if",!0),y.value==="month"?(E(),ge(xt,{key:2,ref_key:"currentViewRef",ref:R,date:p.value,"parsed-value":S.parsedValue,"disabled-date":e(l),onPick:x},null,8,["date","parsed-value","disabled-date"])):fe("v-if",!0)],34)],2)],2),Re(Q("div",{class:A(e(c).e("footer"))},[Re(i(e(We),{text:"",size:"small",class:A(e(c).e("link-btn")),onClick:re},{default:Y(()=>[ce(ve(e(D)("el.datepicker.now")),1)]),_:1},8,["class"]),[[st,e(u)!=="dates"]]),i(e(We),{plain:"",size:"small",class:A(e(c).e("link-btn")),onClick:se},{default:Y(()=>[ce(ve(e(D)("el.datepicker.confirm")),1)]),_:1},8,["class"])],2),[[st,e(de)&&y.value==="date"]])],2))}});var Qn=ze(Xn,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-date-pick.vue"]]);const el=Ce({...pa,...ma}),tl=m=>{const{emit:v}=qt(),a=Zt(),t=Gt();return h=>{const _=ft(h.value)?h.value():h.value;if(_){v("pick",[ne(_[0]).locale(m.value),ne(_[1]).locale(m.value)]);return}h.onClick&&h.onClick({attrs:a,slots:t,emit:v})}},ba=(m,{defaultValue:v,leftDate:a,rightDate:t,unit:c,onParsedValueChanged:h})=>{const{emit:_}=qt(),{pickerNs:d}=Je(It),D=xe("date-range-picker"),{t:k,lang:F}=Be(),C=tl(F),M=X(),l=X(),b=X({endDate:null,selecting:!1}),r=p=>{b.value=p},$=(p=!1)=>{const O=e(M),K=e(l);Vt([O,K])&&_("pick",[O,K],p)},L=p=>{b.value.selecting=p,p||(b.value.endDate=null)},R=()=>{const[p,O]=ha(e(v),{lang:e(F),unit:c,unlinkPanels:m.unlinkPanels});M.value=void 0,l.value=void 0,a.value=p,t.value=O};return Ye(v,p=>{p&&R()},{immediate:!0}),Ye(()=>m.parsedValue,p=>{if(Se(p)&&p.length===2){const[O,K]=p;M.value=O,a.value=O,l.value=K,h(e(M),e(l))}else R()},{immediate:!0}),{minDate:M,maxDate:l,rangeState:b,lang:F,ppNs:d,drpNs:D,handleChangeRange:r,handleRangeConfirm:$,handleShortcutClick:C,onSelect:L,t:k}},al=["onClick"],nl=["disabled"],ll=["disabled"],ol=["disabled"],sl=["disabled"],ht="month",rl=Oe({__name:"panel-date-range",props:el,emits:["pick","set-picker-option","calendar-change","panel-change"],setup(m,{emit:v}){const a=m,t=Je("EP_PICKER_BASE"),{disabledDate:c,cellClassName:h,format:_,defaultTime:d,arrowControl:D,clearable:k}=t.props,F=it(t.props,"shortcuts"),C=it(t.props,"defaultValue"),{lang:M}=Be(),l=X(ne().locale(M.value)),b=X(ne().locale(M.value).add(1,ht)),{minDate:r,maxDate:$,rangeState:L,ppNs:R,drpNs:p,handleChangeRange:O,handleRangeConfirm:K,handleShortcutClick:Z,onSelect:ee,t:U}=ba(a,{defaultValue:C,leftDate:l,rightDate:b,unit:ht,onParsedValueChanged:n}),W=X({min:null,max:null}),g=X({min:null,max:null}),J=j(()=>`${l.value.year()} ${U("el.datepicker.year")} ${U(`el.datepicker.month${l.value.month()+1}`)}`),oe=j(()=>`${b.value.year()} ${U("el.datepicker.year")} ${U(`el.datepicker.month${b.value.month()+1}`)}`),T=j(()=>l.value.year()),w=j(()=>l.value.month()),V=j(()=>b.value.year()),B=j(()=>b.value.month()),y=j(()=>!!F.value.length),P=j(()=>W.value.min!==null?W.value.min:r.value?r.value.format(x.value):""),o=j(()=>W.value.max!==null?W.value.max:$.value||r.value?($.value||r.value).format(x.value):""),u=j(()=>g.value.min!==null?g.value.min:r.value?r.value.format(s.value):""),N=j(()=>g.value.max!==null?g.value.max:$.value||r.value?($.value||r.value).format(s.value):""),s=j(()=>aa(_)),x=j(()=>ta(_)),G=()=>{l.value=l.value.subtract(1,"year"),a.unlinkPanels||(b.value=l.value.add(1,"month")),be("year")},te=()=>{l.value=l.value.subtract(1,"month"),a.unlinkPanels||(b.value=l.value.add(1,"month")),be("month")},ae=()=>{a.unlinkPanels?b.value=b.value.add(1,"year"):(l.value=l.value.add(1,"year"),b.value=l.value.add(1,"month")),be("year")},de=()=>{a.unlinkPanels?b.value=b.value.add(1,"month"):(l.value=l.value.add(1,"month"),b.value=l.value.add(1,"month")),be("month")},se=()=>{l.value=l.value.add(1,"year"),be("year")},re=()=>{l.value=l.value.add(1,"month"),be("month")},ue=()=>{b.value=b.value.subtract(1,"year"),be("year")},Me=()=>{b.value=b.value.subtract(1,"month"),be("month")},be=f=>{v("panel-change",[l.value.toDate(),b.value.toDate()],f)},Pe=j(()=>{const f=(w.value+1)%12,I=w.value+1>=12?1:0;return a.unlinkPanels&&new Date(T.value+I,f)<new Date(V.value,B.value)}),$e=j(()=>a.unlinkPanels&&V.value*12+B.value-(T.value*12+w.value+1)>=12),He=j(()=>!(r.value&&$.value&&!L.value.selecting&&Vt([r.value,$.value]))),Ne=j(()=>a.type==="datetime"||a.type==="datetimerange"),ie=(f,I)=>{if(!!f)return d?ne(d[I]||d).locale(M.value).year(f.year()).month(f.month()).date(f.date()):f},je=(f,I=!0)=>{const H=f.minDate,we=f.maxDate,Xe=ie(H,0),ot=ie(we,1);$.value===ot&&r.value===Xe||(v("calendar-change",[H.toDate(),we&&we.toDate()]),$.value=ot,r.value=Xe,!(!I||Ne.value)&&K())},Te=X(!1),Ie=X(!1),Ze=()=>{Te.value=!1},tt=()=>{Ie.value=!1},at=(f,I)=>{W.value[I]=f;const H=ne(f,x.value).locale(M.value);if(H.isValid()){if(c&&c(H.toDate()))return;I==="min"?(l.value=H,r.value=(r.value||l.value).year(H.year()).month(H.month()).date(H.date()),a.unlinkPanels||(b.value=H.add(1,"month"),$.value=r.value.add(1,"month"))):(b.value=H,$.value=($.value||b.value).year(H.year()).month(H.month()).date(H.date()),a.unlinkPanels||(l.value=H.subtract(1,"month"),r.value=$.value.subtract(1,"month")))}},Ge=(f,I)=>{W.value[I]=null},Ue=(f,I)=>{g.value[I]=f;const H=ne(f,s.value).locale(M.value);H.isValid()&&(I==="min"?(Te.value=!0,r.value=(r.value||l.value).hour(H.hour()).minute(H.minute()).second(H.second()),(!$.value||$.value.isBefore(r.value))&&($.value=r.value)):(Ie.value=!0,$.value=($.value||b.value).hour(H.hour()).minute(H.minute()).second(H.second()),b.value=$.value,$.value&&$.value.isBefore(r.value)&&(r.value=$.value)))},nt=(f,I)=>{g.value[I]=null,I==="min"?(l.value=r.value,Te.value=!1):(b.value=$.value,Ie.value=!1)},lt=(f,I,H)=>{g.value.min||(f&&(l.value=f,r.value=(r.value||l.value).hour(f.hour()).minute(f.minute()).second(f.second())),H||(Te.value=I),(!$.value||$.value.isBefore(r.value))&&($.value=r.value,b.value=f))},ye=(f,I,H)=>{g.value.max||(f&&(b.value=f,$.value=($.value||b.value).hour(f.hour()).minute(f.minute()).second(f.second())),H||(Ie.value=I),$.value&&$.value.isBefore(r.value)&&(r.value=$.value))},S=()=>{l.value=ha(e(C),{lang:e(M),unit:"month",unlinkPanels:a.unlinkPanels})[0],b.value=l.value.add(1,"month"),v("pick",null)},z=f=>Se(f)?f.map(I=>I.format(_)):f.format(_),le=f=>Se(f)?f.map(I=>ne(I,_).locale(M.value)):ne(f,_).locale(M.value);function n(f,I){if(a.unlinkPanels&&I){const H=(f==null?void 0:f.year())||0,we=(f==null?void 0:f.month())||0,Xe=I.year(),ot=I.month();b.value=H===Xe&&we===ot?I.add(1,ht):I}else b.value=l.value.add(1,ht),I&&(b.value=b.value.hour(I.hour()).minute(I.minute()).second(I.second()))}return v("set-picker-option",["isValidValue",Vt]),v("set-picker-option",["parseUserInput",le]),v("set-picker-option",["formatToString",z]),v("set-picker-option",["handleClear",S]),(f,I)=>(E(),q("div",{class:A([e(R).b(),e(p).b(),{"has-sidebar":f.$slots.sidebar||e(y),"has-time":e(Ne)}])},[Q("div",{class:A(e(R).e("body-wrapper"))},[dt(f.$slots,"sidebar",{class:A(e(R).e("sidebar"))}),e(y)?(E(),q("div",{key:0,class:A(e(R).e("sidebar"))},[(E(!0),q(he,null,Ve(e(F),(H,we)=>(E(),q("button",{key:we,type:"button",class:A(e(R).e("shortcut")),onClick:Xe=>e(Z)(H)},ve(H.text),11,al))),128))],2)):fe("v-if",!0),Q("div",{class:A(e(R).e("body"))},[e(Ne)?(E(),q("div",{key:0,class:A(e(p).e("time-header"))},[Q("span",{class:A(e(p).e("editors-wrap"))},[Q("span",{class:A(e(p).e("time-picker-wrap"))},[i(e(Le),{size:"small",disabled:e(L).selecting,placeholder:e(U)("el.datepicker.startDate"),class:A(e(p).e("editor")),"model-value":e(P),"validate-event":!1,onInput:I[0]||(I[0]=H=>at(H,"min")),onChange:I[1]||(I[1]=H=>Ge(H,"min"))},null,8,["disabled","placeholder","class","model-value"])],2),Re((E(),q("span",{class:A(e(p).e("time-picker-wrap"))},[i(e(Le),{size:"small",class:A(e(p).e("editor")),disabled:e(L).selecting,placeholder:e(U)("el.datepicker.startTime"),"model-value":e(u),"validate-event":!1,onFocus:I[2]||(I[2]=H=>Te.value=!0),onInput:I[3]||(I[3]=H=>Ue(H,"min")),onChange:I[4]||(I[4]=H=>nt(H,"min"))},null,8,["class","disabled","placeholder","model-value"]),i(e(Pt),{visible:Te.value,format:e(s),"datetime-role":"start","time-arrow-control":e(D),"parsed-value":l.value,onPick:lt},null,8,["visible","format","time-arrow-control","parsed-value"])],2)),[[e(Ct),Ze]])],2),Q("span",null,[i(e(ke),null,{default:Y(()=>[i(e(yt))]),_:1})]),Q("span",{class:A([e(p).e("editors-wrap"),"is-right"])},[Q("span",{class:A(e(p).e("time-picker-wrap"))},[i(e(Le),{size:"small",class:A(e(p).e("editor")),disabled:e(L).selecting,placeholder:e(U)("el.datepicker.endDate"),"model-value":e(o),readonly:!e(r),"validate-event":!1,onInput:I[5]||(I[5]=H=>at(H,"max")),onChange:I[6]||(I[6]=H=>Ge(H,"max"))},null,8,["class","disabled","placeholder","model-value","readonly"])],2),Re((E(),q("span",{class:A(e(p).e("time-picker-wrap"))},[i(e(Le),{size:"small",class:A(e(p).e("editor")),disabled:e(L).selecting,placeholder:e(U)("el.datepicker.endTime"),"model-value":e(N),readonly:!e(r),"validate-event":!1,onFocus:I[7]||(I[7]=H=>e(r)&&(Ie.value=!0)),onInput:I[8]||(I[8]=H=>Ue(H,"max")),onChange:I[9]||(I[9]=H=>nt(H,"max"))},null,8,["class","disabled","placeholder","model-value","readonly"]),i(e(Pt),{"datetime-role":"end",visible:Ie.value,format:e(s),"time-arrow-control":e(D),"parsed-value":b.value,onPick:ye},null,8,["visible","format","time-arrow-control","parsed-value"])],2)),[[e(Ct),tt]])],2)],2)):fe("v-if",!0),Q("div",{class:A([[e(R).e("content"),e(p).e("content")],"is-left"])},[Q("div",{class:A(e(p).e("header"))},[Q("button",{type:"button",class:A([e(R).e("icon-btn"),"d-arrow-left"]),onClick:G},[i(e(ke),null,{default:Y(()=>[i(e(pt))]),_:1})],2),Q("button",{type:"button",class:A([e(R).e("icon-btn"),"arrow-left"]),onClick:te},[i(e(ke),null,{default:Y(()=>[i(e(St))]),_:1})],2),f.unlinkPanels?(E(),q("button",{key:0,type:"button",disabled:!e($e),class:A([[e(R).e("icon-btn"),{"is-disabled":!e($e)}],"d-arrow-right"]),onClick:se},[i(e(ke),null,{default:Y(()=>[i(e(mt))]),_:1})],10,nl)):fe("v-if",!0),f.unlinkPanels?(E(),q("button",{key:1,type:"button",disabled:!e(Pe),class:A([[e(R).e("icon-btn"),{"is-disabled":!e(Pe)}],"arrow-right"]),onClick:re},[i(e(ke),null,{default:Y(()=>[i(e(yt))]),_:1})],10,ll)):fe("v-if",!0),Q("div",null,ve(e(J)),1)],2),i(Tt,{"selection-mode":"range",date:l.value,"min-date":e(r),"max-date":e($),"range-state":e(L),"disabled-date":e(c),"cell-class-name":e(h),onChangerange:e(O),onPick:je,onSelect:e(ee)},null,8,["date","min-date","max-date","range-state","disabled-date","cell-class-name","onChangerange","onSelect"])],2),Q("div",{class:A([[e(R).e("content"),e(p).e("content")],"is-right"])},[Q("div",{class:A(e(p).e("header"))},[f.unlinkPanels?(E(),q("button",{key:0,type:"button",disabled:!e($e),class:A([[e(R).e("icon-btn"),{"is-disabled":!e($e)}],"d-arrow-left"]),onClick:ue},[i(e(ke),null,{default:Y(()=>[i(e(pt))]),_:1})],10,ol)):fe("v-if",!0),f.unlinkPanels?(E(),q("button",{key:1,type:"button",disabled:!e(Pe),class:A([[e(R).e("icon-btn"),{"is-disabled":!e(Pe)}],"arrow-left"]),onClick:Me},[i(e(ke),null,{default:Y(()=>[i(e(St))]),_:1})],10,sl)):fe("v-if",!0),Q("button",{type:"button",class:A([e(R).e("icon-btn"),"d-arrow-right"]),onClick:ae},[i(e(ke),null,{default:Y(()=>[i(e(mt))]),_:1})],2),Q("button",{type:"button",class:A([e(R).e("icon-btn"),"arrow-right"]),onClick:de},[i(e(ke),null,{default:Y(()=>[i(e(yt))]),_:1})],2),Q("div",null,ve(e(oe)),1)],2),i(Tt,{"selection-mode":"range",date:b.value,"min-date":e(r),"max-date":e($),"range-state":e(L),"disabled-date":e(c),"cell-class-name":e(h),onChangerange:e(O),onPick:je,onSelect:e(ee)},null,8,["date","min-date","max-date","range-state","disabled-date","cell-class-name","onChangerange","onSelect"])],2)],2)],2),e(Ne)?(E(),q("div",{key:0,class:A(e(R).e("footer"))},[e(k)?(E(),ge(e(We),{key:0,text:"",size:"small",class:A(e(R).e("link-btn")),onClick:S},{default:Y(()=>[ce(ve(e(U)("el.datepicker.clear")),1)]),_:1},8,["class"])):fe("v-if",!0),i(e(We),{plain:"",size:"small",class:A(e(R).e("link-btn")),disabled:e(He),onClick:I[10]||(I[10]=H=>e(K)(!1))},{default:Y(()=>[ce(ve(e(U)("el.datepicker.confirm")),1)]),_:1},8,["class","disabled"])],2)):fe("v-if",!0)],2))}});var ul=ze(rl,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-date-range.vue"]]);const il=Ce({...ma}),cl=["pick","set-picker-option"],dl=({unlinkPanels:m,leftDate:v,rightDate:a})=>{const{t}=Be(),c=()=>{v.value=v.value.subtract(1,"year"),m.value||(a.value=a.value.subtract(1,"year"))},h=()=>{m.value||(v.value=v.value.add(1,"year")),a.value=a.value.add(1,"year")},_=()=>{v.value=v.value.add(1,"year")},d=()=>{a.value=a.value.subtract(1,"year")},D=j(()=>`${v.value.year()} ${t("el.datepicker.year")}`),k=j(()=>`${a.value.year()} ${t("el.datepicker.year")}`),F=j(()=>v.value.year()),C=j(()=>a.value.year()===v.value.year()?v.value.year()+1:a.value.year());return{leftPrevYear:c,rightNextYear:h,leftNextYear:_,rightPrevYear:d,leftLabel:D,rightLabel:k,leftYear:F,rightYear:C}},fl=["onClick"],pl=["disabled"],ml=["disabled"],bt="year",vl=Oe({name:"DatePickerMonthRange"}),hl=Oe({...vl,props:il,emits:cl,setup(m,{emit:v}){const a=m,{lang:t}=Be(),c=Je("EP_PICKER_BASE"),{shortcuts:h,disabledDate:_,format:d}=c.props,D=it(c.props,"defaultValue"),k=X(ne().locale(t.value)),F=X(ne().locale(t.value).add(1,bt)),{minDate:C,maxDate:M,rangeState:l,ppNs:b,drpNs:r,handleChangeRange:$,handleRangeConfirm:L,handleShortcutClick:R,onSelect:p}=ba(a,{defaultValue:D,leftDate:k,rightDate:F,unit:bt,onParsedValueChanged:B}),O=j(()=>!!h.length),{leftPrevYear:K,rightNextYear:Z,leftNextYear:ee,rightPrevYear:U,leftLabel:W,rightLabel:g,leftYear:J,rightYear:oe}=dl({unlinkPanels:it(a,"unlinkPanels"),leftDate:k,rightDate:F}),T=j(()=>a.unlinkPanels&&oe.value>J.value+1),w=(y,P=!0)=>{const o=y.minDate,u=y.maxDate;M.value===u&&C.value===o||(M.value=u,C.value=o,P&&L())},V=y=>y.map(P=>P.format(d));function B(y,P){if(a.unlinkPanels&&P){const o=(y==null?void 0:y.year())||0,u=P.year();F.value=o===u?P.add(1,bt):P}else F.value=k.value.add(1,bt)}return v("set-picker-option",["formatToString",V]),(y,P)=>(E(),q("div",{class:A([e(b).b(),e(r).b(),{"has-sidebar":Boolean(y.$slots.sidebar)||e(O)}])},[Q("div",{class:A(e(b).e("body-wrapper"))},[dt(y.$slots,"sidebar",{class:A(e(b).e("sidebar"))}),e(O)?(E(),q("div",{key:0,class:A(e(b).e("sidebar"))},[(E(!0),q(he,null,Ve(e(h),(o,u)=>(E(),q("button",{key:u,type:"button",class:A(e(b).e("shortcut")),onClick:N=>e(R)(o)},ve(o.text),11,fl))),128))],2)):fe("v-if",!0),Q("div",{class:A(e(b).e("body"))},[Q("div",{class:A([[e(b).e("content"),e(r).e("content")],"is-left"])},[Q("div",{class:A(e(r).e("header"))},[Q("button",{type:"button",class:A([e(b).e("icon-btn"),"d-arrow-left"]),onClick:P[0]||(P[0]=(...o)=>e(K)&&e(K)(...o))},[i(e(ke),null,{default:Y(()=>[i(e(pt))]),_:1})],2),y.unlinkPanels?(E(),q("button",{key:0,type:"button",disabled:!e(T),class:A([[e(b).e("icon-btn"),{[e(b).is("disabled")]:!e(T)}],"d-arrow-right"]),onClick:P[1]||(P[1]=(...o)=>e(ee)&&e(ee)(...o))},[i(e(ke),null,{default:Y(()=>[i(e(mt))]),_:1})],10,pl)):fe("v-if",!0),Q("div",null,ve(e(W)),1)],2),i(xt,{"selection-mode":"range",date:k.value,"min-date":e(C),"max-date":e(M),"range-state":e(l),"disabled-date":e(_),onChangerange:e($),onPick:w,onSelect:e(p)},null,8,["date","min-date","max-date","range-state","disabled-date","onChangerange","onSelect"])],2),Q("div",{class:A([[e(b).e("content"),e(r).e("content")],"is-right"])},[Q("div",{class:A(e(r).e("header"))},[y.unlinkPanels?(E(),q("button",{key:0,type:"button",disabled:!e(T),class:A([[e(b).e("icon-btn"),{"is-disabled":!e(T)}],"d-arrow-left"]),onClick:P[2]||(P[2]=(...o)=>e(U)&&e(U)(...o))},[i(e(ke),null,{default:Y(()=>[i(e(pt))]),_:1})],10,ml)):fe("v-if",!0),Q("button",{type:"button",class:A([e(b).e("icon-btn"),"d-arrow-right"]),onClick:P[3]||(P[3]=(...o)=>e(Z)&&e(Z)(...o))},[i(e(ke),null,{default:Y(()=>[i(e(mt))]),_:1})],2),Q("div",null,ve(e(g)),1)],2),i(xt,{"selection-mode":"range",date:F.value,"min-date":e(C),"max-date":e(M),"range-state":e(l),"disabled-date":e(_),onChangerange:e($),onPick:w,onSelect:e(p)},null,8,["date","min-date","max-date","range-state","disabled-date","onChangerange","onSelect"])],2)],2)],2)],2))}});var bl=ze(hl,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-month-range.vue"]]);const yl=function(m){switch(m){case"daterange":case"datetimerange":return ul;case"monthrange":return bl;default:return Qn}};ne.extend(pn);ne.extend(mn);ne.extend(Ka);ne.extend(vn);ne.extend(hn);ne.extend(bn);ne.extend(yn);ne.extend(gn);var gl=Oe({name:"ElDatePicker",install:null,props:{...la,...kn},emits:["update:modelValue"],setup(m,{expose:v,emit:a,slots:t}){const c=xe("picker-panel");$t("ElPopperOptions",De(it(m,"popperOptions"))),$t(It,{slots:t,pickerNs:c});const h=X();v({focus:(D=!0)=>{var k;(k=h.value)==null||k.focus(D)},handleOpen:()=>{var D;(D=h.value)==null||D.handleOpen()},handleClose:()=>{var D;(D=h.value)==null||D.handleClose()}});const d=D=>{a("update:modelValue",D)};return()=>{var D;const k=(D=m.format)!=null?D:ja[m.type]||rt,F=yl(m.type);return i(Qa,Kt(m,{format:k,type:m.type,ref:h,"onUpdate:modelValue":d}),{default:C=>i(F,C,null),"range-separator":t["range-separator"]})}}});const gt=gl;gt.install=m=>{m.component(gt.name,gt)};const kl=gt,wl={class:"flex justify-end mb-2"},_l={__name:"warehouseReceipt",props:{printNumber:Number},emits:["cancel","minus"],setup(m,{emit:v}){const a=De(["\u4EA7\u54C1\u7F16\u53F7","\u4EA7\u54C1\u540D\u79F0","\u5165\u4ED3\u6570\u91CF","\u5907\u6CE8"]);let c=new Array(20).fill(null).map(()=>({1:`AM${Math.floor(Math.random()*1e6)}`,2:"S-F",3:Math.floor(Math.random()*1e4),4:"--"})).slice(0);const h=De([0]);return(_,d)=>{const D=Ot,k=We,F=Ya;return E(),q(he,null,[Q("div",wl,[i(D,{class:"mr-4"},{default:Y(()=>[ce("\u5236\u8868\u4EBA\uFF1A\u5BFF\u5E73")]),_:1}),i(D,{class:"mr-4"},{default:Y(()=>[ce("\u7B7E\u6536\u4EBA\uFF1A\u7389\u541B")]),_:1}),i(D,{class:"mr-4"},{default:Y(()=>[ce("2023/06/13")]),_:1})]),i(Qe,{sortableIndex:h,"column-config":a,tableData:e(c)},null,8,["sortableIndex","column-config","tableData"]),i(F,{class:"flex items-center justify-end"},{default:Y(()=>[i(k,{onClick:d[0]||(d[0]=C=>v("cancel"))},{default:Y(()=>[ce("\u53D6\u6D88")]),_:1})]),_:1})],64)}}},Dl={class:"flex items-center justify-between mb-2"},Ml={__name:"orderOpening",props:{printNumber:Number},emits:["cancel","minus"],setup(m,{emit:v}){const a=De(new Array(10).fill(null).map(()=>{const _=Math.floor(Math.random()*1e4),d=[500,1e3,2e3][Math.floor(Math.random()*3)];return{1:`AM${Math.floor(Math.random()*1e6)}`,2:`HHC${Math.floor(Math.random()*100)}`,3:_,4:d,5:_%d}})),t=De(["\u65E5\u671F","\u6240\u5C5E\u6210\u54C1","\u6570\u91CF","\u5E93\u4F4D","\u7BB1\u53F7"]),c=j(()=>a.map(d=>{const D=[],k=Math.floor(d[3]/d[4]),F=d[3]%d[4];let C=Math.floor(Math.random()*1e4),M=C;const l="2023/03/15";for(let b=0;b<k;b++)D.push({1:l,2:d[1],3:d[4],4:M,5:C++});return F>0&&D.push({1:l,2:d[1],3:F,4:M,5:C++}),D}).flat(1/0)),h=De([1]);return(_,d)=>{const D=Ot,k=We;return E(),q(he,null,[Q("div",Dl,[Q("div",null,[i(D,{class:"mr-4"},{default:Y(()=>[ce("\u5236\u8868\u4EBA\uFF1A\u5BFF\u5E73")]),_:1}),i(D,{class:"mr-4"},{default:Y(()=>[ce("\u7B7E\u6536\u4EBA\uFF1A\u7389\u541B")]),_:1}),i(D,{class:"mr-4"},{default:Y(()=>[ce("2023/06/13")]),_:1})]),i(k,{type:"primary"},{default:Y(()=>[ce("\u53BB\u6253\u5370")]),_:1})]),i(Qe,{sortableIndex:h,"column-config":t,tableData:e(c)},null,8,["sortableIndex","column-config","tableData"])],64)}}};const $l={__name:"createdPutOrder",emits:["sure"],setup(m,{emit:v}){let a=X("1"),t=X(new Date);const c=De(["\u4EA7\u54C1\u7F16\u53F7","\u6210\u54C1\u5F52\u5C5E","\u6BCF\u7BB1\u6570\u91CF","\u7BB1\u6570","\u62FC\u7BB1\u8BB0\u5F55"]),h=De([]),_=X(!1),d=X(0),D=()=>{d.value++},k=()=>{_.value=!1,h.push({1:`AM${Math.floor(Math.random()*1e6)}`,2:`HHC${Math.floor(Math.random()*100)}`,3:[10,100,1e3,2e3][Math.floor(Math.random()*3)],4:Math.floor(Math.random()*10+1),5:[[9600,2300],[1100],[2200],[1e3,1100]][Math.floor(Math.random()*3)]})},F=W=>{W===0&&h.splice(0,1),W===1&&(_.value=!0)},C=De(new Array(10).fill(null).map(()=>{const W=Math.floor(Math.random()*1e4),g=[500,1e3,2e3][Math.floor(Math.random()*3)];return{1:`AM${Math.floor(Math.random()*1e6)}`,2:`HHC${Math.floor(Math.random()*100)}`,3:W,4:g,5:W%g}})),M=De(["\u65E5\u671F","\u6240\u5C5E\u6210\u54C1","\u6570\u91CF","\u5E93\u4F4D","\u7BB1\u53F7"]);let l=j(()=>C.map(g=>{const J=[],oe=Math.floor(g[3]/g[4]),T=g[3]%g[4];let w=Math.floor(Math.random()*1e4),V=w;const B="2023/03/15";for(let y=0;y<oe;y++)J.push({1:B,2:g[1],3:g[4],4:V,5:w++});return T>0&&J.push({1:B,2:g[1],3:T,4:V,5:"",6:T}),J}).flat(1/0)),b=X(""),r=X(""),$=X(""),L=X("\u7F16\u8F91\u5E93\u4F4D"),R=De([]);const p=()=>{R.length===0?(R.push(3),L.value="\u4FDD\u5B58\u7F16\u8F91"):(R.splice(0),L.value="\u6279\u91CF\u7F16\u8F91\u5E93\u4F4D")},O=()=>{$.value=r.value};let K=j(()=>l.value.filter(g=>g[2].includes(b.value)&&!g[6]).map(g=>($.value&&(g[4]=$.value),g))),Z=j(()=>l.value.filter(g=>g[2].includes(b.value)&&g[6]).map(g=>($.value&&(g[4]=$.value),g)));const ee=De([1]),U=()=>{v("sure")};return(W,g)=>{const J=Le,oe=La,T=kl,w=We,V=Ba,B=Ha,y=Aa,P=Ua,o=Jt;return E(),q(he,null,[i(P,{modelValue:e(a),"onUpdate:modelValue":g[8]||(g[8]=u=>qe(a)?a.value=u:a=u)},{default:Y(()=>[i(B,{label:"\u5165\u4ED3\u5355",name:"1"},{default:Y(()=>[i(V,{class:"w-2/5"},{default:Y(()=>[i(oe,{label:"\u5165\u4ED3\u5355\u7F16\u53F7"},{default:Y(()=>[i(J)]),_:1}),i(oe,{label:"\u65E5\u671F"},{default:Y(()=>[i(T,{modelValue:e(t),"onUpdate:modelValue":g[0]||(g[0]=u=>qe(t)?t.value=u:t=u),type:"date"},null,8,["modelValue"])]),_:1}),i(oe,{label:"\u5236\u8868\u4EBA"},{default:Y(()=>[i(J)]),_:1}),i(oe,{label:"\u7B7E\u6536\u4EBA"},{default:Y(()=>[i(J)]),_:1}),i(w,{onClick:g[1]||(g[1]=u=>qe(a)?a.value="2":a="2")},{default:Y(()=>[ce("\u786E\u5B9A")]),_:1})]),_:1})]),_:1}),i(B,{label:"\u6DFB\u52A0\u5165\u4ED3\u8BB0\u5F55",name:"2"},{default:Y(()=>[i(y,{class:"flex items-center justify-end"},{default:Y(()=>[i(w,{type:"primary",onClick:g[2]||(g[2]=u=>_.value=!0)},{default:Y(()=>[ce("\u6DFB\u52A0\u8BB0\u5F55")]),_:1}),i(w,{type:"primary"},{default:Y(()=>[ce("\u4FDD\u5B58\u5165\u4ED3\u5355")]),_:1}),i(w,{type:"success",onClick:g[3]||(g[3]=u=>qe(a)?a.value="3":a="3")},{default:Y(()=>[ce("\u751F\u6210\u6807\u7B7E")]),_:1})]),_:1}),i(Qe,{"column-config":c,tableData:h,buttons:["\u5220\u9664","\u4FEE\u6539"],onToolsHandle:F},null,8,["column-config","tableData"])]),_:1}),i(B,{label:"\u6807\u7B7E",name:"3"},{default:Y(()=>[i(P,{"tab-position":"left"},{default:Y(()=>[i(B,{label:"\u6574\u7BB1\u6807\u7B7E"},{default:Y(()=>[i(wt,null,{left:Y(()=>[i(J,{modelValue:e(b),"onUpdate:modelValue":g[4]||(g[4]=u=>qe(b)?b.value=u:b=u),class:"mr-2",style:{width:"50%"},placeholder:"\u8F93\u5165\u6210\u54C1\u5F52\u5C5E\u641C\u7D22",clearable:""},{append:Y(()=>[i(w,{icon:e(kt)},null,8,["icon"])]),_:1},8,["modelValue"]),e(b)?(E(),ge(J,{key:0,class:"mr-2",modelValue:e(r),"onUpdate:modelValue":g[5]||(g[5]=u=>qe(r)?r.value=u:r=u),style:{width:"20%"},placeholder:"\u4FEE\u6539\u5E93\u4F4D"},null,8,["modelValue"])):fe("",!0),e(b)?(E(),ge(w,{key:1,type:"primary",onClick:O},{default:Y(()=>[ce("\u786E\u5B9A")]),_:1})):fe("",!0)]),right:Y(()=>[i(w,{type:"primary",onClick:p},{default:Y(()=>[ce(ve(e(L)),1)]),_:1}),i(w,{type:"primary",onClick:U},{default:Y(()=>[ce("\u53BB\u6253\u5370")]),_:1})]),_:1}),i(Qe,{selection:"","column-config":M,tableData:e(K),editable:e(R),sortableIndex:ee,"default-expand-all":""},null,8,["column-config","tableData","editable","sortableIndex"])]),_:1}),i(B,{label:"\u62FC\u7BB1\u6807\u7B7E"},{default:Y(()=>[i(wt,null,{left:Y(()=>[i(J,{modelValue:e(b),"onUpdate:modelValue":g[6]||(g[6]=u=>qe(b)?b.value=u:b=u),class:"mr-2",style:{width:"50%"},placeholder:"\u8F93\u5165\u6210\u54C1\u5F52\u5C5E\u641C\u7D22",clearable:""},{append:Y(()=>[i(w,{icon:e(kt)},null,8,["icon"])]),_:1},8,["modelValue"]),e(b)?(E(),ge(J,{key:0,class:"mr-2",modelValue:e(r),"onUpdate:modelValue":g[7]||(g[7]=u=>qe(r)?r.value=u:r=u),style:{width:"20%"},placeholder:"\u4FEE\u6539\u5E93\u4F4D"},null,8,["modelValue"])):fe("",!0),e(b)?(E(),ge(w,{key:1,type:"primary",onClick:O},{default:Y(()=>[ce("\u786E\u5B9A")]),_:1})):fe("",!0)]),right:Y(()=>[i(w,{type:"success"},{default:Y(()=>[ce("\u5BFC\u51FAexcel")]),_:1}),i(w,{type:"primary",onClick:U},{default:Y(()=>[ce("\u6253\u5370")]),_:1})]),_:1}),i(Qe,{selection:"","column-config":M,tableData:e(Z),editable:[3,4],sortableIndex:ee,"default-expand-all":""},null,8,["column-config","tableData","sortableIndex"])]),_:1})]),_:1})]),_:1})]),_:1},8,["modelValue"]),i(o,{modelValue:_.value,"onUpdate:modelValue":g[10]||(g[10]=u=>_.value=u),title:"\u6DFB\u52A0\u5165\u4ED3\u5355\u8BB0\u5F55"},{default:Y(()=>[i(V,{class:"w-2/5"},{default:Y(()=>[i(oe,{label:"\u4EA7\u54C1\u7F16\u53F7"},{default:Y(()=>[i(J)]),_:1}),i(oe,{label:"\u6210\u54C1\u5F52\u5C5E"},{default:Y(()=>[i(J)]),_:1}),i(oe,{label:"\u6BCF\u7BB1\u51E0\u4E2A"},{default:Y(()=>[i(J)]),_:1}),i(oe,{label:"\u51E0\u7BB1"},{default:Y(()=>[i(J)]),_:1}),(E(!0),q(he,null,Ve(d.value,(u,N)=>(E(),ge(oe,{label:"\u62FC\u7BB1"},{default:Y(()=>[i(J),i(w,{type:"text",onClick:g[9]||(g[9]=s=>d.value--)},{default:Y(()=>[ce("\u5220\u9664")]),_:1})]),_:1}))),256)),i(w,{onClick:D},{default:Y(()=>[ce("\u589E\u52A0\u62FC\u7BB1")]),_:1}),i(w,{onClick:k,type:"primary"},{default:Y(()=>[ce("\u786E\u5B9A")]),_:1})]),_:1})]),_:1},8,["modelValue"])],64)}}},Sl={__name:"prePrint",props:{printNumber:Number},emits:["cancel","minus"],setup(m,{emit:v}){const a=De(new Array(10).fill(null).map(()=>{const D=Math.floor(Math.random()*1e4),k=[500,1e3,2e3][Math.floor(Math.random()*3)];return{1:`AM${Math.floor(Math.random()*1e6)}`,2:`HHC${Math.floor(Math.random()*100)}`,3:D,4:k,5:D%k}})),t=De(["\u65E5\u671F","\u6240\u5C5E\u6210\u54C1","\u6570\u91CF","\u5E93\u4F4D","\u7BB1\u53F7"]),c=j(()=>a.map(k=>{const F=[],C=Math.floor(k[3]/k[4]),M=k[3]%k[4];let l=Math.floor(Math.random()*1e4),b=l;const r="2023/03/15";for(let $=0;$<C;$++)F.push({1:r,2:k[1],3:k[4],4:b,5:l++});return M>0&&F.push({1:r,2:k[1],3:M,4:b,5:l++}),F}).flat(1/0)),h=De([1]),_=()=>{c.value.splice(0,1)},d=X("");return(D,k)=>{const F=We,C=Le;return E(),q(he,null,[i(wt,null,{left:Y(()=>[i(C,{modelValue:d.value,"onUpdate:modelValue":k[0]||(k[0]=M=>d.value=M),class:"mr-2",placeholder:"\u8F93\u5165\u4EA7\u54C1\u7F16\u53F7\u641C\u7D22",clearable:""},{append:Y(()=>[i(F,{icon:e(kt)},null,8,["icon"])]),_:1},8,["modelValue"])]),right:Y(()=>[i(F,{type:"primary"},{default:Y(()=>[ce("\u6253\u5370")]),_:1})]),_:1}),i(Qe,{selection:"",sortableIndex:h,"column-config":t,tableData:e(c),buttons:["\u5220\u9664"],onToolsHandle:_},null,8,["sortableIndex","column-config","tableData"])],64)}}},Fl={__name:"labelManagement",setup(m){const v=De(["\u521B\u5EFA\u65E5\u671F","\u5236\u8868\u4EBA","\u7B7E\u6536\u4EBA"]),a=De(new Array(100).fill(null).map(()=>({1:`2022/06/${Math.floor(Math.random()*30)}`,2:"\u5BFF\u5E73",3:"\u7389\u541B"}))),t=De([0]),c=X(!1),h=X(!1),_=X(!1),d=X(!1),D=X(!1),k=M=>{M===0&&(c.value=!0),M===1&&(h.value=!0)},F=()=>{_.value=!1,d.value=!0},C=De(["\u65E5\u671F","\u6240\u5C5E\u6210\u54C1","\u6570\u91CF","\u5E93\u4F4D","\u7BB1\u53F7","\u6253\u5370\u5F20\u6570"]);return(M,l)=>{const b=We,r=Le,$=Wa,L=Ot,R=Qe,p=Jt;return E(),q(he,null,[i(wt,null,{left:Y(()=>[i(r,{class:"mr-2",placeholder:"\u67E5\u627E\u5165\u4ED3\u6307\u4EE4\u5355",clearable:""},{append:Y(()=>[i(b,{icon:e(kt)},null,8,["icon"])]),_:1}),i(b,{type:"primary",onClick:l[0]||(l[0]=O=>_.value=!0)},{default:Y(()=>[ce("\u521B\u5EFA\u5165\u4ED3\u6307\u4EE4\u5355")]),_:1}),i(b,{onClick:l[1]||(l[1]=O=>D.value=!0)},{default:Y(()=>[ce("\u624B\u52A8\u6DFB\u52A0\u6807\u7B7E")]),_:1})]),right:Y(()=>[i($,null,{default:Y(()=>[i(b,{type:"primary",onClick:l[2]||(l[2]=O=>d.value=!0)},{default:Y(()=>[ce("\u67E5\u770B\u5F85\u6253\u5370\u5217\u8868")]),_:1})]),_:1})]),_:1}),i(L,{type:"success"},{default:Y(()=>[ce("\u5386\u53F2\u5165\u4ED3\u5355")]),_:1}),i(R,{selection:"",sortableIndex:t,"column-config":v,tableData:a,buttons:["\u4EA7\u54C1\u8BE6\u60C5","\u62C6\u5355\u8BE6\u60C5"],onToolsHandle:k},null,8,["sortableIndex","column-config","tableData"]),i(p,{modelValue:_.value,"onUpdate:modelValue":l[3]||(l[3]=O=>_.value=O),title:"\u521B\u5EFA\u5165\u4ED3\u5355",fullscreen:""},{default:Y(()=>[i($l,{onSure:F})]),_:1},8,["modelValue"]),i(p,{modelValue:c.value,"onUpdate:modelValue":l[5]||(l[5]=O=>c.value=O),title:"\u5165\u4ED3\u5355\u2014\u2014\u4EA7\u54C1\u8BE6\u60C5",width:"80%"},{default:Y(()=>[i(_l,{onCancel:l[4]||(l[4]=O=>c.value=!1)})]),_:1},8,["modelValue"]),i(p,{modelValue:h.value,"onUpdate:modelValue":l[7]||(l[7]=O=>h.value=O),title:"\u5165\u4ED3\u5355\u2014\u2014\u62C6\u5355\u8BE6\u60C5",width:"80%"},{default:Y(()=>[i(Ml,{onCancel:l[6]||(l[6]=O=>h.value=!1)})]),_:1},8,["modelValue"]),i(p,{modelValue:d.value,"onUpdate:modelValue":l[9]||(l[9]=O=>d.value=O),title:"\u5F85\u6253\u5370\u5217\u8868",width:"80%"},{default:Y(()=>[i(Sl,{onCancel:l[8]||(l[8]=O=>d.value=!1)})]),_:1},8,["modelValue"]),i(Ra,{title:"\u624B\u52A8\u6DFB\u52A0\u6807\u7B7E",modelValue:D.value,"onUpdate:modelValue":l[10]||(l[10]=O=>D.value=O),formItem:C},null,8,["modelValue","formItem"])],64)}}};export{Fl as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWxNYW5hZ2VtZW50Ljc5MWIyMTAwLmpzIiwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbnN0YW50cy9kYXRlLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvdXRpbHMvYXJyYXlzLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kYXlqcy9kYXlqcy5taW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2N1c3RvbVBhcnNlRm9ybWF0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RpbWUtcGlja2VyL3NyYy9jb25zdGFudHMubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RpbWUtcGlja2VyL3NyYy91dGlscy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGltZS1waWNrZXIvc3JjL3Byb3BzL3NoYXJlZC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGltZS1waWNrZXIvc3JjL2NvbW1vbi9wcm9wcy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGltZS1waWNrZXIvc3JjL2NvbW1vbi9waWNrZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RpbWUtcGlja2VyL3NyYy9wcm9wcy9wYW5lbC10aW1lLXBpY2tlci5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvdGltZS1waWNrZXIvc3JjL2NvbXBvc2FibGVzL3VzZS10aW1lLXBhbmVsLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90aW1lLXBpY2tlci9zcmMvY29tcG9zYWJsZXMvdXNlLXRpbWUtcGlja2VyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvZGlyZWN0aXZlcy9yZXBlYXQtY2xpY2svaW5kZXgubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RpbWUtcGlja2VyL3NyYy9wcm9wcy9iYXNpYy10aW1lLXNwaW5uZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL3RpbWUtcGlja2VyL3NyYy90aW1lLXBpY2tlci1jb20vYmFzaWMtdGltZS1zcGlubmVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy90aW1lLXBpY2tlci9zcmMvdGltZS1waWNrZXItY29tL3BhbmVsLXRpbWUtcGljay5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2xvY2FsZURhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2FkdmFuY2VkRm9ybWF0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi93ZWVrT2ZZZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi93ZWVrWWVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kYXlqcy9wbHVnaW4vZGF5T2ZZZWFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi9pc1NhbWVPckFmdGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi9pc1NhbWVPckJlZm9yZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvY29uc3RhbnRzLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvcHJvcHMvZGF0ZS1waWNrZXIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9wcm9wcy9zaGFyZWQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9wcm9wcy9wYW5lbC1kYXRlLXBpY2subWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9wcm9wcy9iYXNpYy1kYXRlLXRhYmxlLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvdXRpbHMubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9wcm9wcy9iYXNpYy1jZWxsLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvZGF0ZS1waWNrZXItY29tL2Jhc2ljLWNlbGwtcmVuZGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvZGF0ZS1waWNrZXItY29tL2Jhc2ljLWRhdGUtdGFibGUubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9wcm9wcy9iYXNpYy1tb250aC10YWJsZS5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9iYXNpYy1tb250aC10YWJsZS5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvc3JjL3Byb3BzL2Jhc2ljLXllYXItdGFibGUubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9kYXRlLXBpY2tlci1jb20vYmFzaWMteWVhci10YWJsZS5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9wYW5lbC1kYXRlLXBpY2subWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9wcm9wcy9wYW5lbC1kYXRlLXJhbmdlLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvY29tcG9zYWJsZXMvdXNlLXNob3J0Y3V0Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvY29tcG9zYWJsZXMvdXNlLXJhbmdlLXBpY2tlci5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9wYW5lbC1kYXRlLXJhbmdlLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvcHJvcHMvcGFuZWwtbW9udGgtcmFuZ2UubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9jb21wb3NhYmxlcy91c2UtbW9udGgtcmFuZ2UtaGVhZGVyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvZGF0ZS1waWNrZXItY29tL3BhbmVsLW1vbnRoLXJhbmdlLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvcGFuZWwtdXRpbHMubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9kYXRlLXBpY2tlci5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvaW5kZXgubWpzIiwiLi4vLi4vc3JjL3ZpZXdzL3dhcmVob3VzZS93YXJlaG91c2VSZWNlaXB0LnZ1ZSIsIi4uLy4uL3NyYy92aWV3cy93YXJlaG91c2Uvb3JkZXJPcGVuaW5nLnZ1ZSIsIi4uLy4uL3NyYy92aWV3cy93YXJlaG91c2UvY3JlYXRlZFB1dE9yZGVyLnZ1ZSIsIi4uLy4uL3NyYy92aWV3cy93YXJlaG91c2UvcHJlUHJpbnQudnVlIiwiLi4vLi4vc3JjL3ZpZXdzL3dhcmVob3VzZS9sYWJlbE1hbmFnZW1lbnQudnVlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRhdGVQaWNrVHlwZXMgPSBbXG4gIFwieWVhclwiLFxuICBcIm1vbnRoXCIsXG4gIFwiZGF0ZVwiLFxuICBcImRhdGVzXCIsXG4gIFwid2Vla1wiLFxuICBcImRhdGV0aW1lXCIsXG4gIFwiZGF0ZXRpbWVyYW5nZVwiLFxuICBcImRhdGVyYW5nZVwiLFxuICBcIm1vbnRocmFuZ2VcIlxuXTtcbmNvbnN0IFdFRUtfREFZUyA9IFtcbiAgXCJzdW5cIixcbiAgXCJtb25cIixcbiAgXCJ0dWVcIixcbiAgXCJ3ZWRcIixcbiAgXCJ0aHVcIixcbiAgXCJmcmlcIixcbiAgXCJzYXRcIlxuXTtcblxuZXhwb3J0IHsgV0VFS19EQVlTLCBkYXRlUGlja1R5cGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlLm1qcy5tYXBcbiIsImV4cG9ydCB7IGNhc3RBcnJheSBhcyBlbnN1cmVBcnJheSB9IGZyb20gJ2xvZGFzaC11bmlmaWVkJztcblxuY29uc3QgdW5pcXVlID0gKGFycikgPT4gWy4uLm5ldyBTZXQoYXJyKV07XG5jb25zdCBjYXN0QXJyYXkgPSAoYXJyKSA9PiB7XG4gIGlmICghYXJyICYmIGFyciAhPT0gMClcbiAgICByZXR1cm4gW107XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFycikgPyBhcnIgOiBbYXJyXTtcbn07XG5cbmV4cG9ydCB7IGNhc3RBcnJheSwgdW5pcXVlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheXMubWpzLm1hcFxuIiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6KHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5kYXlqcz1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9MWUzLGU9NmU0LG49MzZlNSxyPVwibWlsbGlzZWNvbmRcIixpPVwic2Vjb25kXCIscz1cIm1pbnV0ZVwiLHU9XCJob3VyXCIsYT1cImRheVwiLG89XCJ3ZWVrXCIsZj1cIm1vbnRoXCIsaD1cInF1YXJ0ZXJcIixjPVwieWVhclwiLGQ9XCJkYXRlXCIsbD1cIkludmFsaWQgRGF0ZVwiLCQ9L14oXFxkezR9KVstL10/KFxcZHsxLDJ9KT9bLS9dPyhcXGR7MCwyfSlbVHRcXHNdKihcXGR7MSwyfSk/Oj8oXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT9bLjpdPyhcXGQrKT8kLyx5PS9cXFsoW15cXF1dKyldfFl7MSw0fXxNezEsNH18RHsxLDJ9fGR7MSw0fXxIezEsMn18aHsxLDJ9fGF8QXxtezEsMn18c3sxLDJ9fFp7MSwyfXxTU1MvZyxNPXtuYW1lOlwiZW5cIix3ZWVrZGF5czpcIlN1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5XCIuc3BsaXQoXCJfXCIpLG1vbnRoczpcIkphbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXJcIi5zcGxpdChcIl9cIiksb3JkaW5hbDpmdW5jdGlvbih0KXt2YXIgZT1bXCJ0aFwiLFwic3RcIixcIm5kXCIsXCJyZFwiXSxuPXQlMTAwO3JldHVyblwiW1wiK3QrKGVbKG4tMjApJTEwXXx8ZVtuXXx8ZVswXSkrXCJdXCJ9fSxtPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1TdHJpbmcodCk7cmV0dXJuIXJ8fHIubGVuZ3RoPj1lP3Q6XCJcIitBcnJheShlKzEtci5sZW5ndGgpLmpvaW4obikrdH0sdj17czptLHo6ZnVuY3Rpb24odCl7dmFyIGU9LXQudXRjT2Zmc2V0KCksbj1NYXRoLmFicyhlKSxyPU1hdGguZmxvb3Iobi82MCksaT1uJTYwO3JldHVybihlPD0wP1wiK1wiOlwiLVwiKSttKHIsMixcIjBcIikrXCI6XCIrbShpLDIsXCIwXCIpfSxtOmZ1bmN0aW9uIHQoZSxuKXtpZihlLmRhdGUoKTxuLmRhdGUoKSlyZXR1cm4tdChuLGUpO3ZhciByPTEyKihuLnllYXIoKS1lLnllYXIoKSkrKG4ubW9udGgoKS1lLm1vbnRoKCkpLGk9ZS5jbG9uZSgpLmFkZChyLGYpLHM9bi1pPDAsdT1lLmNsb25lKCkuYWRkKHIrKHM/LTE6MSksZik7cmV0dXJuKygtKHIrKG4taSkvKHM/aS11OnUtaSkpfHwwKX0sYTpmdW5jdGlvbih0KXtyZXR1cm4gdDwwP01hdGguY2VpbCh0KXx8MDpNYXRoLmZsb29yKHQpfSxwOmZ1bmN0aW9uKHQpe3JldHVybntNOmYseTpjLHc6byxkOmEsRDpkLGg6dSxtOnMsczppLG1zOnIsUTpofVt0XXx8U3RyaW5nKHR8fFwiXCIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvcyQvLFwiXCIpfSx1OmZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10fX0sZz1cImVuXCIsRD17fTtEW2ddPU07dmFyIHA9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBffSxTPWZ1bmN0aW9uIHQoZSxuLHIpe3ZhciBpO2lmKCFlKXJldHVybiBnO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgcz1lLnRvTG93ZXJDYXNlKCk7RFtzXSYmKGk9cyksbiYmKERbc109bixpPXMpO3ZhciB1PWUuc3BsaXQoXCItXCIpO2lmKCFpJiZ1Lmxlbmd0aD4xKXJldHVybiB0KHVbMF0pfWVsc2V7dmFyIGE9ZS5uYW1lO0RbYV09ZSxpPWF9cmV0dXJuIXImJmkmJihnPWkpLGl8fCFyJiZnfSx3PWZ1bmN0aW9uKHQsZSl7aWYocCh0KSlyZXR1cm4gdC5jbG9uZSgpO3ZhciBuPVwib2JqZWN0XCI9PXR5cGVvZiBlP2U6e307cmV0dXJuIG4uZGF0ZT10LG4uYXJncz1hcmd1bWVudHMsbmV3IF8obil9LE89djtPLmw9UyxPLmk9cCxPLnc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdyh0LHtsb2NhbGU6ZS4kTCx1dGM6ZS4kdSx4OmUuJHgsJG9mZnNldDplLiRvZmZzZXR9KX07dmFyIF89ZnVuY3Rpb24oKXtmdW5jdGlvbiBNKHQpe3RoaXMuJEw9Uyh0LmxvY2FsZSxudWxsLCEwKSx0aGlzLnBhcnNlKHQpfXZhciBtPU0ucHJvdG90eXBlO3JldHVybiBtLnBhcnNlPWZ1bmN0aW9uKHQpe3RoaXMuJGQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5kYXRlLG49dC51dGM7aWYobnVsbD09PWUpcmV0dXJuIG5ldyBEYXRlKE5hTik7aWYoTy51KGUpKXJldHVybiBuZXcgRGF0ZTtpZihlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gbmV3IERhdGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJiEvWiQvaS50ZXN0KGUpKXt2YXIgcj1lLm1hdGNoKCQpO2lmKHIpe3ZhciBpPXJbMl0tMXx8MCxzPShyWzddfHxcIjBcIikuc3Vic3RyaW5nKDAsMyk7cmV0dXJuIG4/bmV3IERhdGUoRGF0ZS5VVEMoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscykpOm5ldyBEYXRlKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpfX1yZXR1cm4gbmV3IERhdGUoZSl9KHQpLHRoaXMuJHg9dC54fHx7fSx0aGlzLmluaXQoKX0sbS5pbml0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kZDt0aGlzLiR5PXQuZ2V0RnVsbFllYXIoKSx0aGlzLiRNPXQuZ2V0TW9udGgoKSx0aGlzLiREPXQuZ2V0RGF0ZSgpLHRoaXMuJFc9dC5nZXREYXkoKSx0aGlzLiRIPXQuZ2V0SG91cnMoKSx0aGlzLiRtPXQuZ2V0TWludXRlcygpLHRoaXMuJHM9dC5nZXRTZWNvbmRzKCksdGhpcy4kbXM9dC5nZXRNaWxsaXNlY29uZHMoKX0sbS4kdXRpbHM9ZnVuY3Rpb24oKXtyZXR1cm4gT30sbS5pc1ZhbGlkPWZ1bmN0aW9uKCl7cmV0dXJuISh0aGlzLiRkLnRvU3RyaW5nKCk9PT1sKX0sbS5pc1NhbWU9ZnVuY3Rpb24odCxlKXt2YXIgbj13KHQpO3JldHVybiB0aGlzLnN0YXJ0T2YoZSk8PW4mJm48PXRoaXMuZW5kT2YoZSl9LG0uaXNBZnRlcj1mdW5jdGlvbih0LGUpe3JldHVybiB3KHQpPHRoaXMuc3RhcnRPZihlKX0sbS5pc0JlZm9yZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVuZE9mKGUpPHcodCl9LG0uJGc9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBPLnUodCk/dGhpc1tlXTp0aGlzLnNldChuLHQpfSxtLnVuaXg9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKS8xZTMpfSxtLnZhbHVlT2Y9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC5nZXRUaW1lKCl9LG0uc3RhcnRPZj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMscj0hIU8udShlKXx8ZSxoPU8ucCh0KSxsPWZ1bmN0aW9uKHQsZSl7dmFyIGk9Ty53KG4uJHU/RGF0ZS5VVEMobi4keSxlLHQpOm5ldyBEYXRlKG4uJHksZSx0KSxuKTtyZXR1cm4gcj9pOmkuZW5kT2YoYSl9LCQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTy53KG4udG9EYXRlKClbdF0uYXBwbHkobi50b0RhdGUoXCJzXCIpLChyP1swLDAsMCwwXTpbMjMsNTksNTksOTk5XSkuc2xpY2UoZSkpLG4pfSx5PXRoaXMuJFcsTT10aGlzLiRNLG09dGhpcy4kRCx2PVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKTtzd2l0Y2goaCl7Y2FzZSBjOnJldHVybiByP2woMSwwKTpsKDMxLDExKTtjYXNlIGY6cmV0dXJuIHI/bCgxLE0pOmwoMCxNKzEpO2Nhc2Ugbzp2YXIgZz10aGlzLiRsb2NhbGUoKS53ZWVrU3RhcnR8fDAsRD0oeTxnP3krNzp5KS1nO3JldHVybiBsKHI/bS1EOm0rKDYtRCksTSk7Y2FzZSBhOmNhc2UgZDpyZXR1cm4gJCh2K1wiSG91cnNcIiwwKTtjYXNlIHU6cmV0dXJuICQoditcIk1pbnV0ZXNcIiwxKTtjYXNlIHM6cmV0dXJuICQoditcIlNlY29uZHNcIiwyKTtjYXNlIGk6cmV0dXJuICQoditcIk1pbGxpc2Vjb25kc1wiLDMpO2RlZmF1bHQ6cmV0dXJuIHRoaXMuY2xvbmUoKX19LG0uZW5kT2Y9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3RhcnRPZih0LCExKX0sbS4kc2V0PWZ1bmN0aW9uKHQsZSl7dmFyIG4sbz1PLnAodCksaD1cInNldFwiKyh0aGlzLiR1P1wiVVRDXCI6XCJcIiksbD0obj17fSxuW2FdPWgrXCJEYXRlXCIsbltkXT1oK1wiRGF0ZVwiLG5bZl09aCtcIk1vbnRoXCIsbltjXT1oK1wiRnVsbFllYXJcIixuW3VdPWgrXCJIb3Vyc1wiLG5bc109aCtcIk1pbnV0ZXNcIixuW2ldPWgrXCJTZWNvbmRzXCIsbltyXT1oK1wiTWlsbGlzZWNvbmRzXCIsbilbb10sJD1vPT09YT90aGlzLiREKyhlLXRoaXMuJFcpOmU7aWYobz09PWZ8fG89PT1jKXt2YXIgeT10aGlzLmNsb25lKCkuc2V0KGQsMSk7eS4kZFtsXSgkKSx5LmluaXQoKSx0aGlzLiRkPXkuc2V0KGQsTWF0aC5taW4odGhpcy4kRCx5LmRheXNJbk1vbnRoKCkpKS4kZH1lbHNlIGwmJnRoaXMuJGRbbF0oJCk7cmV0dXJuIHRoaXMuaW5pdCgpLHRoaXN9LG0uc2V0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuY2xvbmUoKS4kc2V0KHQsZSl9LG0uZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzW08ucCh0KV0oKX0sbS5hZGQ9ZnVuY3Rpb24ocixoKXt2YXIgZCxsPXRoaXM7cj1OdW1iZXIocik7dmFyICQ9Ty5wKGgpLHk9ZnVuY3Rpb24odCl7dmFyIGU9dyhsKTtyZXR1cm4gTy53KGUuZGF0ZShlLmRhdGUoKStNYXRoLnJvdW5kKHQqcikpLGwpfTtpZigkPT09ZilyZXR1cm4gdGhpcy5zZXQoZix0aGlzLiRNK3IpO2lmKCQ9PT1jKXJldHVybiB0aGlzLnNldChjLHRoaXMuJHkrcik7aWYoJD09PWEpcmV0dXJuIHkoMSk7aWYoJD09PW8pcmV0dXJuIHkoNyk7dmFyIE09KGQ9e30sZFtzXT1lLGRbdV09bixkW2ldPXQsZClbJF18fDEsbT10aGlzLiRkLmdldFRpbWUoKStyKk07cmV0dXJuIE8udyhtLHRoaXMpfSxtLnN1YnRyYWN0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYWRkKC0xKnQsZSl9LG0uZm9ybWF0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLiRsb2NhbGUoKTtpZighdGhpcy5pc1ZhbGlkKCkpcmV0dXJuIG4uaW52YWxpZERhdGV8fGw7dmFyIHI9dHx8XCJZWVlZLU1NLUREVEhIOm1tOnNzWlwiLGk9Ty56KHRoaXMpLHM9dGhpcy4kSCx1PXRoaXMuJG0sYT10aGlzLiRNLG89bi53ZWVrZGF5cyxmPW4ubW9udGhzLGg9ZnVuY3Rpb24odCxuLGkscyl7cmV0dXJuIHQmJih0W25dfHx0KGUscikpfHxpW25dLnNsaWNlKDAscyl9LGM9ZnVuY3Rpb24odCl7cmV0dXJuIE8ucyhzJTEyfHwxMix0LFwiMFwiKX0sZD1uLm1lcmlkaWVtfHxmdW5jdGlvbih0LGUsbil7dmFyIHI9dDwxMj9cIkFNXCI6XCJQTVwiO3JldHVybiBuP3IudG9Mb3dlckNhc2UoKTpyfSwkPXtZWTpTdHJpbmcodGhpcy4keSkuc2xpY2UoLTIpLFlZWVk6dGhpcy4keSxNOmErMSxNTTpPLnMoYSsxLDIsXCIwXCIpLE1NTTpoKG4ubW9udGhzU2hvcnQsYSxmLDMpLE1NTU06aChmLGEpLEQ6dGhpcy4kRCxERDpPLnModGhpcy4kRCwyLFwiMFwiKSxkOlN0cmluZyh0aGlzLiRXKSxkZDpoKG4ud2Vla2RheXNNaW4sdGhpcy4kVyxvLDIpLGRkZDpoKG4ud2Vla2RheXNTaG9ydCx0aGlzLiRXLG8sMyksZGRkZDpvW3RoaXMuJFddLEg6U3RyaW5nKHMpLEhIOk8ucyhzLDIsXCIwXCIpLGg6YygxKSxoaDpjKDIpLGE6ZChzLHUsITApLEE6ZChzLHUsITEpLG06U3RyaW5nKHUpLG1tOk8ucyh1LDIsXCIwXCIpLHM6U3RyaW5nKHRoaXMuJHMpLHNzOk8ucyh0aGlzLiRzLDIsXCIwXCIpLFNTUzpPLnModGhpcy4kbXMsMyxcIjBcIiksWjppfTtyZXR1cm4gci5yZXBsYWNlKHksKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV8fCRbdF18fGkucmVwbGFjZShcIjpcIixcIlwiKX0pKX0sbS51dGNPZmZzZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMTUqLU1hdGgucm91bmQodGhpcy4kZC5nZXRUaW1lem9uZU9mZnNldCgpLzE1KX0sbS5kaWZmPWZ1bmN0aW9uKHIsZCxsKXt2YXIgJCx5PU8ucChkKSxNPXcociksbT0oTS51dGNPZmZzZXQoKS10aGlzLnV0Y09mZnNldCgpKSplLHY9dGhpcy1NLGc9Ty5tKHRoaXMsTSk7cmV0dXJuIGc9KCQ9e30sJFtjXT1nLzEyLCRbZl09ZywkW2hdPWcvMywkW29dPSh2LW0pLzYwNDhlNSwkW2FdPSh2LW0pLzg2NGU1LCRbdV09di9uLCRbc109di9lLCRbaV09di90LCQpW3ldfHx2LGw/ZzpPLmEoZyl9LG0uZGF5c0luTW9udGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmRPZihmKS4kRH0sbS4kbG9jYWxlPWZ1bmN0aW9uKCl7cmV0dXJuIERbdGhpcy4kTF19LG0ubG9jYWxlPWZ1bmN0aW9uKHQsZSl7aWYoIXQpcmV0dXJuIHRoaXMuJEw7dmFyIG49dGhpcy5jbG9uZSgpLHI9Uyh0LGUsITApO3JldHVybiByJiYobi4kTD1yKSxufSxtLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIE8udyh0aGlzLiRkLHRoaXMpfSxtLnRvRGF0ZT1mdW5jdGlvbigpe3JldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSl9LG0udG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNWYWxpZCgpP3RoaXMudG9JU09TdHJpbmcoKTpudWxsfSxtLnRvSVNPU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9JU09TdHJpbmcoKX0sbS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLnRvVVRDU3RyaW5nKCl9LE19KCksVD1fLnByb3RvdHlwZTtyZXR1cm4gdy5wcm90b3R5cGU9VCxbW1wiJG1zXCIscl0sW1wiJHNcIixpXSxbXCIkbVwiLHNdLFtcIiRIXCIsdV0sW1wiJFdcIixhXSxbXCIkTVwiLGZdLFtcIiR5XCIsY10sW1wiJERcIixkXV0uZm9yRWFjaCgoZnVuY3Rpb24odCl7VFt0WzFdXT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kZyhlLHRbMF0sdFsxXSl9fSkpLHcuZXh0ZW5kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuJGl8fCh0KGUsXyx3KSx0LiRpPSEwKSx3fSx3LmxvY2FsZT1TLHcuaXNEYXlqcz1wLHcudW5peD1mdW5jdGlvbih0KXtyZXR1cm4gdygxZTMqdCl9LHcuZW49RFtnXSx3LkxzPUQsdy5wPXt9LHd9KSk7IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5kYXlqc19wbHVnaW5fY3VzdG9tUGFyc2VGb3JtYXQ9dCgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBlPXtMVFM6XCJoOm1tOnNzIEFcIixMVDpcImg6bW0gQVwiLEw6XCJNTS9ERC9ZWVlZXCIsTEw6XCJNTU1NIEQsIFlZWVlcIixMTEw6XCJNTU1NIEQsIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEFcIn0sdD0vKFxcW1teW10qXFxdKXwoWy1fOi8uLCgpXFxzXSspfChBfGF8WVlZWXxZWT98TU0/TT9NP3xEb3xERD98aGg/fEhIP3xtbT98c3M/fFN7MSwzfXx6fFpaPykvZyxuPS9cXGRcXGQvLHI9L1xcZFxcZD8vLGk9L1xcZCpbXi1fOi8sKClcXHNcXGRdKy8sbz17fSxzPWZ1bmN0aW9uKGUpe3JldHVybihlPStlKSsoZT42OD8xOTAwOjJlMyl9O3ZhciBhPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzW2VdPSt0fX0sZj1bL1srLV1cXGRcXGQ6PyhcXGRcXGQpP3xaLyxmdW5jdGlvbihlKXsodGhpcy56b25lfHwodGhpcy56b25lPXt9KSkub2Zmc2V0PWZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiAwO2lmKFwiWlwiPT09ZSlyZXR1cm4gMDt2YXIgdD1lLm1hdGNoKC8oWystXXxcXGRcXGQpL2cpLG49NjAqdFsxXSsoK3RbMl18fDApO3JldHVybiAwPT09bj8wOlwiK1wiPT09dFswXT8tbjpufShlKX1dLGg9ZnVuY3Rpb24oZSl7dmFyIHQ9b1tlXTtyZXR1cm4gdCYmKHQuaW5kZXhPZj90OnQucy5jb25jYXQodC5mKSl9LHU9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPW8ubWVyaWRpZW07aWYocil7Zm9yKHZhciBpPTE7aTw9MjQ7aSs9MSlpZihlLmluZGV4T2YocihpLDAsdCkpPi0xKXtuPWk+MTI7YnJlYWt9fWVsc2Ugbj1lPT09KHQ/XCJwbVwiOlwiUE1cIik7cmV0dXJuIG59LGQ9e0E6W2ksZnVuY3Rpb24oZSl7dGhpcy5hZnRlcm5vb249dShlLCExKX1dLGE6W2ksZnVuY3Rpb24oZSl7dGhpcy5hZnRlcm5vb249dShlLCEwKX1dLFM6Wy9cXGQvLGZ1bmN0aW9uKGUpe3RoaXMubWlsbGlzZWNvbmRzPTEwMCorZX1dLFNTOltuLGZ1bmN0aW9uKGUpe3RoaXMubWlsbGlzZWNvbmRzPTEwKitlfV0sU1NTOlsvXFxkezN9LyxmdW5jdGlvbihlKXt0aGlzLm1pbGxpc2Vjb25kcz0rZX1dLHM6W3IsYShcInNlY29uZHNcIildLHNzOltyLGEoXCJzZWNvbmRzXCIpXSxtOltyLGEoXCJtaW51dGVzXCIpXSxtbTpbcixhKFwibWludXRlc1wiKV0sSDpbcixhKFwiaG91cnNcIildLGg6W3IsYShcImhvdXJzXCIpXSxISDpbcixhKFwiaG91cnNcIildLGhoOltyLGEoXCJob3Vyc1wiKV0sRDpbcixhKFwiZGF5XCIpXSxERDpbbixhKFwiZGF5XCIpXSxEbzpbaSxmdW5jdGlvbihlKXt2YXIgdD1vLm9yZGluYWwsbj1lLm1hdGNoKC9cXGQrLyk7aWYodGhpcy5kYXk9blswXSx0KWZvcih2YXIgcj0xO3I8PTMxO3IrPTEpdChyKS5yZXBsYWNlKC9cXFt8XFxdL2csXCJcIik9PT1lJiYodGhpcy5kYXk9cil9XSxNOltyLGEoXCJtb250aFwiKV0sTU06W24sYShcIm1vbnRoXCIpXSxNTU06W2ksZnVuY3Rpb24oZSl7dmFyIHQ9aChcIm1vbnRoc1wiKSxuPShoKFwibW9udGhzU2hvcnRcIil8fHQubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZS5zbGljZSgwLDMpfSkpKS5pbmRleE9mKGUpKzE7aWYobjwxKXRocm93IG5ldyBFcnJvcjt0aGlzLm1vbnRoPW4lMTJ8fG59XSxNTU1NOltpLGZ1bmN0aW9uKGUpe3ZhciB0PWgoXCJtb250aHNcIikuaW5kZXhPZihlKSsxO2lmKHQ8MSl0aHJvdyBuZXcgRXJyb3I7dGhpcy5tb250aD10JTEyfHx0fV0sWTpbL1srLV0/XFxkKy8sYShcInllYXJcIildLFlZOltuLGZ1bmN0aW9uKGUpe3RoaXMueWVhcj1zKGUpfV0sWVlZWTpbL1xcZHs0fS8sYShcInllYXJcIildLFo6ZixaWjpmfTtmdW5jdGlvbiBjKG4pe3ZhciByLGk7cj1uLGk9byYmby5mb3JtYXRzO2Zvcih2YXIgcz0obj1yLnJlcGxhY2UoLyhcXFtbXlxcXV0rXSl8KExUUz98bHsxLDR9fEx7MSw0fSkvZywoZnVuY3Rpb24odCxuLHIpe3ZhciBvPXImJnIudG9VcHBlckNhc2UoKTtyZXR1cm4gbnx8aVtyXXx8ZVtyXXx8aVtvXS5yZXBsYWNlKC8oXFxbW15cXF1dK10pfChNTU1NfE1NfEREfGRkZGQpL2csKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdHx8bi5zbGljZSgxKX0pKX0pKSkubWF0Y2godCksYT1zLmxlbmd0aCxmPTA7ZjxhO2YrPTEpe3ZhciBoPXNbZl0sdT1kW2hdLGM9dSYmdVswXSxsPXUmJnVbMV07c1tmXT1sP3tyZWdleDpjLHBhcnNlcjpsfTpoLnJlcGxhY2UoL15cXFt8XFxdJC9nLFwiXCIpfXJldHVybiBmdW5jdGlvbihlKXtmb3IodmFyIHQ9e30sbj0wLHI9MDtuPGE7bis9MSl7dmFyIGk9c1tuXTtpZihcInN0cmluZ1wiPT10eXBlb2YgaSlyKz1pLmxlbmd0aDtlbHNle3ZhciBvPWkucmVnZXgsZj1pLnBhcnNlcixoPWUuc2xpY2UociksdT1vLmV4ZWMoaClbMF07Zi5jYWxsKHQsdSksZT1lLnJlcGxhY2UodSxcIlwiKX19cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUuYWZ0ZXJub29uO2lmKHZvaWQgMCE9PXQpe3ZhciBuPWUuaG91cnM7dD9uPDEyJiYoZS5ob3Vycys9MTIpOjEyPT09biYmKGUuaG91cnM9MCksZGVsZXRlIGUuYWZ0ZXJub29ufX0odCksdH19cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXtuLnAuY3VzdG9tUGFyc2VGb3JtYXQ9ITAsZSYmZS5wYXJzZVR3b0RpZ2l0WWVhciYmKHM9ZS5wYXJzZVR3b0RpZ2l0WWVhcik7dmFyIHI9dC5wcm90b3R5cGUsaT1yLnBhcnNlO3IucGFyc2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kYXRlLHI9ZS51dGMscz1lLmFyZ3M7dGhpcy4kdT1yO3ZhciBhPXNbMV07aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpe3ZhciBmPSEwPT09c1syXSxoPSEwPT09c1szXSx1PWZ8fGgsZD1zWzJdO2gmJihkPXNbMl0pLG89dGhpcy4kbG9jYWxlKCksIWYmJmQmJihvPW4uTHNbZF0pLHRoaXMuJGQ9ZnVuY3Rpb24oZSx0LG4pe3RyeXtpZihbXCJ4XCIsXCJYXCJdLmluZGV4T2YodCk+LTEpcmV0dXJuIG5ldyBEYXRlKChcIlhcIj09PXQ/MWUzOjEpKmUpO3ZhciByPWModCkoZSksaT1yLnllYXIsbz1yLm1vbnRoLHM9ci5kYXksYT1yLmhvdXJzLGY9ci5taW51dGVzLGg9ci5zZWNvbmRzLHU9ci5taWxsaXNlY29uZHMsZD1yLnpvbmUsbD1uZXcgRGF0ZSxtPXN8fChpfHxvPzE6bC5nZXREYXRlKCkpLE09aXx8bC5nZXRGdWxsWWVhcigpLFk9MDtpJiYhb3x8KFk9bz4wP28tMTpsLmdldE1vbnRoKCkpO3ZhciBwPWF8fDAsdj1mfHwwLEQ9aHx8MCxnPXV8fDA7cmV0dXJuIGQ/bmV3IERhdGUoRGF0ZS5VVEMoTSxZLG0scCx2LEQsZys2MCpkLm9mZnNldCoxZTMpKTpuP25ldyBEYXRlKERhdGUuVVRDKE0sWSxtLHAsdixELGcpKTpuZXcgRGF0ZShNLFksbSxwLHYsRCxnKX1jYXRjaChlKXtyZXR1cm4gbmV3IERhdGUoXCJcIil9fSh0LGEsciksdGhpcy5pbml0KCksZCYmITAhPT1kJiYodGhpcy4kTD10aGlzLmxvY2FsZShkKS4kTCksdSYmdCE9dGhpcy5mb3JtYXQoYSkmJih0aGlzLiRkPW5ldyBEYXRlKFwiXCIpKSxvPXt9fWVsc2UgaWYoYSBpbnN0YW5jZW9mIEFycmF5KWZvcih2YXIgbD1hLmxlbmd0aCxtPTE7bTw9bDttKz0xKXtzWzFdPWFbbS0xXTt2YXIgTT1uLmFwcGx5KHRoaXMscyk7aWYoTS5pc1ZhbGlkKCkpe3RoaXMuJGQ9TS4kZCx0aGlzLiRMPU0uJEwsdGhpcy5pbml0KCk7YnJlYWt9bT09PWwmJih0aGlzLiRkPW5ldyBEYXRlKFwiXCIpKX1lbHNlIGkuY2FsbCh0aGlzLGUpfX19KSk7IiwiY29uc3QgdGltZVVuaXRzID0gW1wiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiXTtcbmNvbnN0IERFRkFVTFRfRk9STUFUU19USU1FID0gXCJISDptbTpzc1wiO1xuY29uc3QgREVGQVVMVF9GT1JNQVRTX0RBVEUgPSBcIllZWVktTU0tRERcIjtcbmNvbnN0IERFRkFVTFRfRk9STUFUU19EQVRFUElDS0VSID0ge1xuICBkYXRlOiBERUZBVUxUX0ZPUk1BVFNfREFURSxcbiAgZGF0ZXM6IERFRkFVTFRfRk9STUFUU19EQVRFLFxuICB3ZWVrOiBcImdnZ2dbd113d1wiLFxuICB5ZWFyOiBcIllZWVlcIixcbiAgbW9udGg6IFwiWVlZWS1NTVwiLFxuICBkYXRldGltZTogYCR7REVGQVVMVF9GT1JNQVRTX0RBVEV9ICR7REVGQVVMVF9GT1JNQVRTX1RJTUV9YCxcbiAgbW9udGhyYW5nZTogXCJZWVlZLU1NXCIsXG4gIGRhdGVyYW5nZTogREVGQVVMVF9GT1JNQVRTX0RBVEUsXG4gIGRhdGV0aW1lcmFuZ2U6IGAke0RFRkFVTFRfRk9STUFUU19EQVRFfSAke0RFRkFVTFRfRk9STUFUU19USU1FfWBcbn07XG5cbmV4cG9ydCB7IERFRkFVTFRfRk9STUFUU19EQVRFLCBERUZBVUxUX0ZPUk1BVFNfREFURVBJQ0tFUiwgREVGQVVMVF9GT1JNQVRTX1RJTUUsIHRpbWVVbml0cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLm1qcy5tYXBcbiIsImltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7XG5pbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc0RhdGUsIGlzQXJyYXkgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5pbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdHlwZXMubWpzJztcblxuY29uc3QgYnVpbGRUaW1lTGlzdCA9ICh2YWx1ZSwgYm91bmQpID0+IHtcbiAgcmV0dXJuIFtcbiAgICB2YWx1ZSA+IDAgPyB2YWx1ZSAtIDEgOiB2b2lkIDAsXG4gICAgdmFsdWUsXG4gICAgdmFsdWUgPCBib3VuZCA/IHZhbHVlICsgMSA6IHZvaWQgMFxuICBdO1xufTtcbmNvbnN0IHJhbmdlQXJyID0gKG4pID0+IEFycmF5LmZyb20oQXJyYXkuZnJvbSh7IGxlbmd0aDogbiB9KS5rZXlzKCkpO1xuY29uc3QgZXh0cmFjdERhdGVGb3JtYXQgPSAoZm9ybWF0KSA9PiB7XG4gIHJldHVybiBmb3JtYXQucmVwbGFjZSgvXFxXP217MSwyfXxcXFc/WlovZywgXCJcIikucmVwbGFjZSgvXFxXP2h7MSwyfXxcXFc/c3sxLDN9fFxcVz9hL2dpLCBcIlwiKS50cmltKCk7XG59O1xuY29uc3QgZXh0cmFjdFRpbWVGb3JtYXQgPSAoZm9ybWF0KSA9PiB7XG4gIHJldHVybiBmb3JtYXQucmVwbGFjZSgvXFxXP0R7MSwyfXxcXFc/RG98XFxXP2R7MSw0fXxcXFc/TXsxLDR9fFxcVz9ZezIsNH0vZywgXCJcIikudHJpbSgpO1xufTtcbmNvbnN0IGRhdGVFcXVhbHMgPSBmdW5jdGlvbihhLCBiKSB7XG4gIGNvbnN0IGFJc0RhdGUgPSBpc0RhdGUoYSk7XG4gIGNvbnN0IGJJc0RhdGUgPSBpc0RhdGUoYik7XG4gIGlmIChhSXNEYXRlICYmIGJJc0RhdGUpIHtcbiAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpO1xuICB9XG4gIGlmICghYUlzRGF0ZSAmJiAhYklzRGF0ZSkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5jb25zdCB2YWx1ZUVxdWFscyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgY29uc3QgYUlzQXJyYXkgPSBpc0FycmF5KGEpO1xuICBjb25zdCBiSXNBcnJheSA9IGlzQXJyYXkoYik7XG4gIGlmIChhSXNBcnJheSAmJiBiSXNBcnJheSkge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGEuZXZlcnkoKGl0ZW0sIGluZGV4KSA9PiBkYXRlRXF1YWxzKGl0ZW0sIGJbaW5kZXhdKSk7XG4gIH1cbiAgaWYgKCFhSXNBcnJheSAmJiAhYklzQXJyYXkpIHtcbiAgICByZXR1cm4gZGF0ZUVxdWFscyhhLCBiKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuY29uc3QgcGFyc2VEYXRlID0gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0LCBsYW5nKSB7XG4gIGNvbnN0IGRheSA9IGlzRW1wdHkoZm9ybWF0KSB8fCBmb3JtYXQgPT09IFwieFwiID8gZGF5anMoZGF0ZSkubG9jYWxlKGxhbmcpIDogZGF5anMoZGF0ZSwgZm9ybWF0KS5sb2NhbGUobGFuZyk7XG4gIHJldHVybiBkYXkuaXNWYWxpZCgpID8gZGF5IDogdm9pZCAwO1xufTtcbmNvbnN0IGZvcm1hdHRlciA9IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCwgbGFuZykge1xuICBpZiAoaXNFbXB0eShmb3JtYXQpKVxuICAgIHJldHVybiBkYXRlO1xuICBpZiAoZm9ybWF0ID09PSBcInhcIilcbiAgICByZXR1cm4gK2RhdGU7XG4gIHJldHVybiBkYXlqcyhkYXRlKS5sb2NhbGUobGFuZykuZm9ybWF0KGZvcm1hdCk7XG59O1xuY29uc3QgbWFrZUxpc3QgPSAodG90YWwsIG1ldGhvZCkgPT4ge1xuICB2YXIgX2E7XG4gIGNvbnN0IGFyciA9IFtdO1xuICBjb25zdCBkaXNhYmxlZEFyciA9IG1ldGhvZCA9PSBudWxsID8gdm9pZCAwIDogbWV0aG9kKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuICAgIGFyci5wdXNoKChfYSA9IGRpc2FibGVkQXJyID09IG51bGwgPyB2b2lkIDAgOiBkaXNhYmxlZEFyci5pbmNsdWRlcyhpKSkgIT0gbnVsbCA/IF9hIDogZmFsc2UpO1xuICB9XG4gIHJldHVybiBhcnI7XG59O1xuXG5leHBvcnQgeyBidWlsZFRpbWVMaXN0LCBkYXRlRXF1YWxzLCBleHRyYWN0RGF0ZUZvcm1hdCwgZXh0cmFjdFRpbWVGb3JtYXQsIGZvcm1hdHRlciwgbWFrZUxpc3QsIHBhcnNlRGF0ZSwgcmFuZ2VBcnIsIHZhbHVlRXF1YWxzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzLCBkZWZpbmVQcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lLm1qcyc7XG5cbmNvbnN0IGRpc2FibGVkVGltZUxpc3RzUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgZGlzYWJsZWRIb3Vyczoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKEZ1bmN0aW9uKVxuICB9LFxuICBkaXNhYmxlZE1pbnV0ZXM6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShGdW5jdGlvbilcbiAgfSxcbiAgZGlzYWJsZWRTZWNvbmRzOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoRnVuY3Rpb24pXG4gIH1cbn0pO1xuY29uc3QgdGltZVBhbmVsU2hhcmVkUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgdmlzaWJsZTogQm9vbGVhbixcbiAgYWN0dWFsVmlzaWJsZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdm9pZCAwXG4gIH0sXG4gIGZvcm1hdDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcIlwiXG4gIH1cbn0pO1xuXG5leHBvcnQgeyBkaXNhYmxlZFRpbWVMaXN0c1Byb3BzLCB0aW1lUGFuZWxTaGFyZWRQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVkLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IENpcmNsZUNsb3NlIH0gZnJvbSAnQGVsZW1lbnQtcGx1cy9pY29ucy12dWUnO1xuaW1wb3J0IHsgZGlzYWJsZWRUaW1lTGlzdHNQcm9wcyB9IGZyb20gJy4uL3Byb3BzL3NoYXJlZC5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuaW1wb3J0IHsgdXNlU2l6ZVByb3AgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2Utc2l6ZS9pbmRleC5tanMnO1xuXG5jb25zdCB0aW1lUGlja2VyRGVmYXVsdFByb3BzID0gYnVpbGRQcm9wcyh7XG4gIGlkOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoW0FycmF5LCBTdHJpbmddKVxuICB9LFxuICBuYW1lOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoW0FycmF5LCBTdHJpbmddKSxcbiAgICBkZWZhdWx0OiBcIlwiXG4gIH0sXG4gIHBvcHBlckNsYXNzOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IFwiXCJcbiAgfSxcbiAgZm9ybWF0OiBTdHJpbmcsXG4gIHZhbHVlRm9ybWF0OiBTdHJpbmcsXG4gIHR5cGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJcIlxuICB9LFxuICBjbGVhcmFibGU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgY2xlYXJJY29uOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoW1N0cmluZywgT2JqZWN0XSksXG4gICAgZGVmYXVsdDogQ2lyY2xlQ2xvc2VcbiAgfSxcbiAgZWRpdGFibGU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgcHJlZml4SWNvbjoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKFtTdHJpbmcsIE9iamVjdF0pLFxuICAgIGRlZmF1bHQ6IFwiXCJcbiAgfSxcbiAgc2l6ZTogdXNlU2l6ZVByb3AsXG4gIHJlYWRvbmx5OiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJcIlxuICB9LFxuICBwb3BwZXJPcHRpb25zOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoT2JqZWN0KSxcbiAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gIH0sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShbRGF0ZSwgQXJyYXksIFN0cmluZywgTnVtYmVyXSksXG4gICAgZGVmYXVsdDogXCJcIlxuICB9LFxuICByYW5nZVNlcGFyYXRvcjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcIi1cIlxuICB9LFxuICBzdGFydFBsYWNlaG9sZGVyOiBTdHJpbmcsXG4gIGVuZFBsYWNlaG9sZGVyOiBTdHJpbmcsXG4gIGRlZmF1bHRWYWx1ZToge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKFtEYXRlLCBBcnJheV0pXG4gIH0sXG4gIGRlZmF1bHRUaW1lOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoW0RhdGUsIEFycmF5XSlcbiAgfSxcbiAgaXNSYW5nZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgLi4uZGlzYWJsZWRUaW1lTGlzdHNQcm9wcyxcbiAgZGlzYWJsZWREYXRlOiB7XG4gICAgdHlwZTogRnVuY3Rpb25cbiAgfSxcbiAgY2VsbENsYXNzTmFtZToge1xuICAgIHR5cGU6IEZ1bmN0aW9uXG4gIH0sXG4gIHNob3J0Y3V0czoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH0sXG4gIGFycm93Q29udHJvbDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgbGFiZWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogdm9pZCAwXG4gIH0sXG4gIHRhYmluZGV4OiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoW1N0cmluZywgTnVtYmVyXSksXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICB2YWxpZGF0ZUV2ZW50OiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHVubGlua1BhbmVsczogQm9vbGVhblxufSk7XG5cbmV4cG9ydCB7IHRpbWVQaWNrZXJEZWZhdWx0UHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BzLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaW5qZWN0LCByZWYsIHdhdGNoLCBuZXh0VGljaywgY29tcHV0ZWQsIHVucmVmLCBwcm92aWRlLCBvcGVuQmxvY2ssIGNyZWF0ZUJsb2NrLCBtZXJnZVByb3BzLCB3aXRoQ3R4LCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplU3R5bGUsIHdpdGhNb2RpZmllcnMsIHJlc29sdmVEeW5hbWljQ29tcG9uZW50LCBjcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlRWxlbWVudFZOb2RlLCByZW5kZXJTbG90LCB0b0Rpc3BsYXlTdHJpbmcgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgaXNFcXVhbCB9IGZyb20gJ2xvZGFzaC11bmlmaWVkJztcbmltcG9ydCB7IG9uQ2xpY2tPdXRzaWRlIH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vZm9ybS9pbmRleC5tanMnO1xuaW1wb3J0IHsgRWxJbnB1dCB9IGZyb20gJy4uLy4uLy4uL2lucHV0L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBFbEljb24gfSBmcm9tICcuLi8uLi8uLi9pY29uL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBFbFRvb2x0aXAgfSBmcm9tICcuLi8uLi8uLi90b29sdGlwL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2NvbnN0YW50cy9pbmRleC5tanMnO1xuaW1wb3J0IHsgQ2xvY2ssIENhbGVuZGFyIH0gZnJvbSAnQGVsZW1lbnQtcGx1cy9pY29ucy12dWUnO1xuaW1wb3J0IHsgdmFsdWVFcXVhbHMsIGZvcm1hdHRlciwgcGFyc2VEYXRlIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcbmltcG9ydCB7IHRpbWVQaWNrZXJEZWZhdWx0UHJvcHMgfSBmcm9tICcuL3Byb3BzLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VGb3JtSXRlbSB9IGZyb20gJy4uLy4uLy4uL2Zvcm0vc3JjL2hvb2tzL3VzZS1mb3JtLWl0ZW0ubWpzJztcbmltcG9ydCB7IGRlYnVnV2FybiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2Vycm9yLm1qcyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuaW1wb3J0IHsgRVZFTlRfQ09ERSB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnN0YW50cy9hcmlhLm1qcyc7XG5pbXBvcnQgeyB1c2VGb3JtU2l6ZSB9IGZyb20gJy4uLy4uLy4uL2Zvcm0vc3JjL2hvb2tzL3VzZS1mb3JtLWNvbW1vbi1wcm9wcy5tanMnO1xuXG5jb25zdCBfaG9pc3RlZF8xID0gW1wiaWRcIiwgXCJuYW1lXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJ2YWx1ZVwiLCBcImRpc2FibGVkXCIsIFwicmVhZG9ubHlcIl07XG5jb25zdCBfaG9pc3RlZF8yID0gW1wiaWRcIiwgXCJuYW1lXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJ2YWx1ZVwiLCBcImRpc2FibGVkXCIsIFwicmVhZG9ubHlcIl07XG5jb25zdCBfX2RlZmF1bHRfXyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiUGlja2VyXCJcbn0pO1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIC4uLl9fZGVmYXVsdF9fLFxuICBwcm9wczogdGltZVBpY2tlckRlZmF1bHRQcm9wcyxcbiAgZW1pdHM6IFtcbiAgICBcInVwZGF0ZTptb2RlbFZhbHVlXCIsXG4gICAgXCJjaGFuZ2VcIixcbiAgICBcImZvY3VzXCIsXG4gICAgXCJibHVyXCIsXG4gICAgXCJjYWxlbmRhci1jaGFuZ2VcIixcbiAgICBcInBhbmVsLWNoYW5nZVwiLFxuICAgIFwidmlzaWJsZS1jaGFuZ2VcIixcbiAgICBcImtleWRvd25cIlxuICBdLFxuICBzZXR1cChfX3Byb3BzLCB7IGV4cG9zZSwgZW1pdCB9KSB7XG4gICAgY29uc3QgcHJvcHMgPSBfX3Byb3BzO1xuICAgIGNvbnN0IHsgbGFuZyB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3QgbnNEYXRlID0gdXNlTmFtZXNwYWNlKFwiZGF0ZVwiKTtcbiAgICBjb25zdCBuc0lucHV0ID0gdXNlTmFtZXNwYWNlKFwiaW5wdXRcIik7XG4gICAgY29uc3QgbnNSYW5nZSA9IHVzZU5hbWVzcGFjZShcInJhbmdlXCIpO1xuICAgIGNvbnN0IHsgZm9ybSwgZm9ybUl0ZW0gfSA9IHVzZUZvcm1JdGVtKCk7XG4gICAgY29uc3QgZWxQb3BwZXJPcHRpb25zID0gaW5qZWN0KFwiRWxQb3BwZXJPcHRpb25zXCIsIHt9KTtcbiAgICBjb25zdCByZWZQb3BwZXIgPSByZWYoKTtcbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHBpY2tlclZpc2libGUgPSByZWYoZmFsc2UpO1xuICAgIGNvbnN0IHBpY2tlckFjdHVhbFZpc2libGUgPSByZWYoZmFsc2UpO1xuICAgIGNvbnN0IHZhbHVlT25PcGVuID0gcmVmKG51bGwpO1xuICAgIGxldCBoYXNKdXN0VGFiRXhpdGVkSW5wdXQgPSBmYWxzZTtcbiAgICBsZXQgaWdub3JlRm9jdXNFdmVudCA9IGZhbHNlO1xuICAgIHdhdGNoKHBpY2tlclZpc2libGUsICh2YWwpID0+IHtcbiAgICAgIGlmICghdmFsKSB7XG4gICAgICAgIHVzZXJJbnB1dC52YWx1ZSA9IG51bGw7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBlbWl0Q2hhbmdlKHByb3BzLm1vZGVsVmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICB2YWx1ZU9uT3Blbi52YWx1ZSA9IHByb3BzLm1vZGVsVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBlbWl0Q2hhbmdlID0gKHZhbCwgaXNDbGVhcikgPT4ge1xuICAgICAgaWYgKGlzQ2xlYXIgfHwgIXZhbHVlRXF1YWxzKHZhbCwgdmFsdWVPbk9wZW4udmFsdWUpKSB7XG4gICAgICAgIGVtaXQoXCJjaGFuZ2VcIiwgdmFsKTtcbiAgICAgICAgcHJvcHMudmFsaWRhdGVFdmVudCAmJiAoZm9ybUl0ZW0gPT0gbnVsbCA/IHZvaWQgMCA6IGZvcm1JdGVtLnZhbGlkYXRlKFwiY2hhbmdlXCIpLmNhdGNoKChlcnIpID0+IGRlYnVnV2FybihlcnIpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBlbWl0SW5wdXQgPSAoaW5wdXQpID0+IHtcbiAgICAgIGlmICghdmFsdWVFcXVhbHMocHJvcHMubW9kZWxWYWx1ZSwgaW5wdXQpKSB7XG4gICAgICAgIGxldCBmb3JtYXR0ZWQ7XG4gICAgICAgIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgIGZvcm1hdHRlZCA9IGlucHV0Lm1hcCgoaXRlbSkgPT4gZm9ybWF0dGVyKGl0ZW0sIHByb3BzLnZhbHVlRm9ybWF0LCBsYW5nLnZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQpIHtcbiAgICAgICAgICBmb3JtYXR0ZWQgPSBmb3JtYXR0ZXIoaW5wdXQsIHByb3BzLnZhbHVlRm9ybWF0LCBsYW5nLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbWl0KFwidXBkYXRlOm1vZGVsVmFsdWVcIiwgaW5wdXQgPyBmb3JtYXR0ZWQgOiBpbnB1dCwgbGFuZy52YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBlbWl0S2V5ZG93biA9IChlKSA9PiB7XG4gICAgICBlbWl0KFwia2V5ZG93blwiLCBlKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlZklucHV0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKGlucHV0UmVmLnZhbHVlKSB7XG4gICAgICAgIGNvbnN0IF9yID0gaXNSYW5nZUlucHV0LnZhbHVlID8gaW5wdXRSZWYudmFsdWUgOiBpbnB1dFJlZi52YWx1ZS4kZWw7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKF9yLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW107XG4gICAgfSk7XG4gICAgY29uc3Qgc2V0U2VsZWN0aW9uUmFuZ2UgPSAoc3RhcnQsIGVuZCwgcG9zKSA9PiB7XG4gICAgICBjb25zdCBfaW5wdXRzID0gcmVmSW5wdXQudmFsdWU7XG4gICAgICBpZiAoIV9pbnB1dHMubGVuZ3RoKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAoIXBvcyB8fCBwb3MgPT09IFwibWluXCIpIHtcbiAgICAgICAgX2lucHV0c1swXS5zZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kKTtcbiAgICAgICAgX2lucHV0c1swXS5mb2N1cygpO1xuICAgICAgfSBlbHNlIGlmIChwb3MgPT09IFwibWF4XCIpIHtcbiAgICAgICAgX2lucHV0c1sxXS5zZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kKTtcbiAgICAgICAgX2lucHV0c1sxXS5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZm9jdXNPbklucHV0Qm94ID0gKCkgPT4ge1xuICAgICAgZm9jdXModHJ1ZSwgdHJ1ZSk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGlnbm9yZUZvY3VzRXZlbnQgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgb25QaWNrID0gKGRhdGUgPSBcIlwiLCB2aXNpYmxlID0gZmFsc2UpID0+IHtcbiAgICAgIGlmICghdmlzaWJsZSkge1xuICAgICAgICBpZ25vcmVGb2N1c0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBpY2tlclZpc2libGUudmFsdWUgPSB2aXNpYmxlO1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIGlmIChpc0FycmF5KGRhdGUpKSB7XG4gICAgICAgIHJlc3VsdCA9IGRhdGUubWFwKChfKSA9PiBfLnRvRGF0ZSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGRhdGUgPyBkYXRlLnRvRGF0ZSgpIDogZGF0ZTtcbiAgICAgIH1cbiAgICAgIHVzZXJJbnB1dC52YWx1ZSA9IG51bGw7XG4gICAgICBlbWl0SW5wdXQocmVzdWx0KTtcbiAgICB9O1xuICAgIGNvbnN0IG9uQmVmb3JlU2hvdyA9ICgpID0+IHtcbiAgICAgIHBpY2tlckFjdHVhbFZpc2libGUudmFsdWUgPSB0cnVlO1xuICAgIH07XG4gICAgY29uc3Qgb25TaG93ID0gKCkgPT4ge1xuICAgICAgZW1pdChcInZpc2libGUtY2hhbmdlXCIsIHRydWUpO1xuICAgIH07XG4gICAgY29uc3Qgb25LZXlkb3duUG9wcGVyQ29udGVudCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKChldmVudCA9PSBudWxsID8gdm9pZCAwIDogZXZlbnQua2V5KSA9PT0gRVZFTlRfQ09ERS5lc2MpIHtcbiAgICAgICAgZm9jdXModHJ1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBvbkhpZGUgPSAoKSA9PiB7XG4gICAgICBwaWNrZXJBY3R1YWxWaXNpYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgICBwaWNrZXJWaXNpYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgICBpZ25vcmVGb2N1c0V2ZW50ID0gZmFsc2U7XG4gICAgICBlbWl0KFwidmlzaWJsZS1jaGFuZ2VcIiwgZmFsc2UpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlT3BlbiA9ICgpID0+IHtcbiAgICAgIHBpY2tlclZpc2libGUudmFsdWUgPSB0cnVlO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlQ2xvc2UgPSAoKSA9PiB7XG4gICAgICBwaWNrZXJWaXNpYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgfTtcbiAgICBjb25zdCBmb2N1cyA9IChmb2N1c1N0YXJ0SW5wdXQgPSB0cnVlLCBpc0lnbm9yZUZvY3VzRXZlbnQgPSBmYWxzZSkgPT4ge1xuICAgICAgaWdub3JlRm9jdXNFdmVudCA9IGlzSWdub3JlRm9jdXNFdmVudDtcbiAgICAgIGNvbnN0IFtsZWZ0SW5wdXQsIHJpZ2h0SW5wdXRdID0gdW5yZWYocmVmSW5wdXQpO1xuICAgICAgbGV0IGlucHV0ID0gbGVmdElucHV0O1xuICAgICAgaWYgKCFmb2N1c1N0YXJ0SW5wdXQgJiYgaXNSYW5nZUlucHV0LnZhbHVlKSB7XG4gICAgICAgIGlucHV0ID0gcmlnaHRJbnB1dDtcbiAgICAgIH1cbiAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlRm9jdXNJbnB1dCA9IChlKSA9PiB7XG4gICAgICBpZiAocHJvcHMucmVhZG9ubHkgfHwgcGlja2VyRGlzYWJsZWQudmFsdWUgfHwgcGlja2VyVmlzaWJsZS52YWx1ZSB8fCBpZ25vcmVGb2N1c0V2ZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBpY2tlclZpc2libGUudmFsdWUgPSB0cnVlO1xuICAgICAgZW1pdChcImZvY3VzXCIsIGUpO1xuICAgIH07XG4gICAgbGV0IGN1cnJlbnRIYW5kbGVCbHVyRGVmZXJDYWxsYmFjayA9IHZvaWQgMDtcbiAgICBjb25zdCBoYW5kbGVCbHVySW5wdXQgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlQmx1ckRlZmVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgaWYgKGN1cnJlbnRIYW5kbGVCbHVyRGVmZXJDYWxsYmFjayA9PT0gaGFuZGxlQmx1ckRlZmVyKSB7XG4gICAgICAgICAgICBpZiAoISgoKF9hID0gcmVmUG9wcGVyLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuaXNGb2N1c0luc2lkZUNvbnRlbnQoKSkgJiYgIWhhc0p1c3RUYWJFeGl0ZWRJbnB1dCkgJiYgcmVmSW5wdXQudmFsdWUuZmlsdGVyKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gaW5wdXQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgICAgICAgICB9KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgaGFuZGxlQ2hhbmdlKCk7XG4gICAgICAgICAgICAgIHBpY2tlclZpc2libGUudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgZW1pdChcImJsdXJcIiwgZSk7XG4gICAgICAgICAgICAgIHByb3BzLnZhbGlkYXRlRXZlbnQgJiYgKGZvcm1JdGVtID09IG51bGwgPyB2b2lkIDAgOiBmb3JtSXRlbS52YWxpZGF0ZShcImJsdXJcIikuY2F0Y2goKGVycikgPT4gZGVidWdXYXJuKGVycikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhc0p1c3RUYWJFeGl0ZWRJbnB1dCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgICB9O1xuICAgICAgY3VycmVudEhhbmRsZUJsdXJEZWZlckNhbGxiYWNrID0gaGFuZGxlQmx1ckRlZmVyO1xuICAgICAgaGFuZGxlQmx1ckRlZmVyKCk7XG4gICAgfTtcbiAgICBjb25zdCBwaWNrZXJEaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5kaXNhYmxlZCB8fCAoZm9ybSA9PSBudWxsID8gdm9pZCAwIDogZm9ybS5kaXNhYmxlZCk7XG4gICAgfSk7XG4gICAgY29uc3QgcGFyc2VkVmFsdWUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBsZXQgZGF5T3JEYXlzO1xuICAgICAgaWYgKHZhbHVlSXNFbXB0eS52YWx1ZSkge1xuICAgICAgICBpZiAocGlja2VyT3B0aW9ucy52YWx1ZS5nZXREZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICBkYXlPckRheXMgPSBwaWNrZXJPcHRpb25zLnZhbHVlLmdldERlZmF1bHRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNBcnJheShwcm9wcy5tb2RlbFZhbHVlKSkge1xuICAgICAgICAgIGRheU9yRGF5cyA9IHByb3BzLm1vZGVsVmFsdWUubWFwKChkKSA9PiBwYXJzZURhdGUoZCwgcHJvcHMudmFsdWVGb3JtYXQsIGxhbmcudmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXlPckRheXMgPSBwYXJzZURhdGUocHJvcHMubW9kZWxWYWx1ZSwgcHJvcHMudmFsdWVGb3JtYXQsIGxhbmcudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGlja2VyT3B0aW9ucy52YWx1ZS5nZXRSYW5nZUF2YWlsYWJsZVRpbWUpIHtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlUmVzdWx0ID0gcGlja2VyT3B0aW9ucy52YWx1ZS5nZXRSYW5nZUF2YWlsYWJsZVRpbWUoZGF5T3JEYXlzKTtcbiAgICAgICAgaWYgKCFpc0VxdWFsKGF2YWlsYWJsZVJlc3VsdCwgZGF5T3JEYXlzKSkge1xuICAgICAgICAgIGRheU9yRGF5cyA9IGF2YWlsYWJsZVJlc3VsdDtcbiAgICAgICAgICBlbWl0SW5wdXQoaXNBcnJheShkYXlPckRheXMpID8gZGF5T3JEYXlzLm1hcCgoXykgPT4gXy50b0RhdGUoKSkgOiBkYXlPckRheXMudG9EYXRlKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheShkYXlPckRheXMpICYmIGRheU9yRGF5cy5zb21lKChkYXkpID0+ICFkYXkpKSB7XG4gICAgICAgIGRheU9yRGF5cyA9IFtdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRheU9yRGF5cztcbiAgICB9KTtcbiAgICBjb25zdCBkaXNwbGF5VmFsdWUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoIXBpY2tlck9wdGlvbnMudmFsdWUucGFuZWxSZWFkeSlcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9IGZvcm1hdERheWpzVG9TdHJpbmcocGFyc2VkVmFsdWUudmFsdWUpO1xuICAgICAgaWYgKGlzQXJyYXkodXNlcklucHV0LnZhbHVlKSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHVzZXJJbnB1dC52YWx1ZVswXSB8fCBmb3JtYXR0ZWRWYWx1ZSAmJiBmb3JtYXR0ZWRWYWx1ZVswXSB8fCBcIlwiLFxuICAgICAgICAgIHVzZXJJbnB1dC52YWx1ZVsxXSB8fCBmb3JtYXR0ZWRWYWx1ZSAmJiBmb3JtYXR0ZWRWYWx1ZVsxXSB8fCBcIlwiXG4gICAgICAgIF07XG4gICAgICB9IGVsc2UgaWYgKHVzZXJJbnB1dC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdXNlcklucHV0LnZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKCFpc1RpbWVQaWNrZXIudmFsdWUgJiYgdmFsdWVJc0VtcHR5LnZhbHVlKVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIGlmICghcGlja2VyVmlzaWJsZS52YWx1ZSAmJiB2YWx1ZUlzRW1wdHkudmFsdWUpXG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgaWYgKGZvcm1hdHRlZFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0RhdGVzUGlja2VyLnZhbHVlID8gZm9ybWF0dGVkVmFsdWUuam9pbihcIiwgXCIpIDogZm9ybWF0dGVkVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9KTtcbiAgICBjb25zdCBpc1RpbWVMaWtlUGlja2VyID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMudHlwZS5pbmNsdWRlcyhcInRpbWVcIikpO1xuICAgIGNvbnN0IGlzVGltZVBpY2tlciA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnR5cGUuc3RhcnRzV2l0aChcInRpbWVcIikpO1xuICAgIGNvbnN0IGlzRGF0ZXNQaWNrZXIgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy50eXBlID09PSBcImRhdGVzXCIpO1xuICAgIGNvbnN0IHRyaWdnZXJJY29uID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMucHJlZml4SWNvbiB8fCAoaXNUaW1lTGlrZVBpY2tlci52YWx1ZSA/IENsb2NrIDogQ2FsZW5kYXIpKTtcbiAgICBjb25zdCBzaG93Q2xvc2UgPSByZWYoZmFsc2UpO1xuICAgIGNvbnN0IG9uQ2xlYXJJY29uQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChwcm9wcy5yZWFkb25seSB8fCBwaWNrZXJEaXNhYmxlZC52YWx1ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHNob3dDbG9zZS52YWx1ZSkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZm9jdXNPbklucHV0Qm94KCk7XG4gICAgICAgIGVtaXRJbnB1dChudWxsKTtcbiAgICAgICAgZW1pdENoYW5nZShudWxsLCB0cnVlKTtcbiAgICAgICAgc2hvd0Nsb3NlLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIHBpY2tlclZpc2libGUudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcGlja2VyT3B0aW9ucy52YWx1ZS5oYW5kbGVDbGVhciAmJiBwaWNrZXJPcHRpb25zLnZhbHVlLmhhbmRsZUNsZWFyKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB2YWx1ZUlzRW1wdHkgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCB7IG1vZGVsVmFsdWUgfSA9IHByb3BzO1xuICAgICAgcmV0dXJuICFtb2RlbFZhbHVlIHx8IGlzQXJyYXkobW9kZWxWYWx1ZSkgJiYgIW1vZGVsVmFsdWUuZmlsdGVyKEJvb2xlYW4pLmxlbmd0aDtcbiAgICB9KTtcbiAgICBjb25zdCBvbk1vdXNlRG93bklucHV0ID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAocHJvcHMucmVhZG9ubHkgfHwgcGlja2VyRGlzYWJsZWQudmFsdWUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmICgoKF9hID0gZXZlbnQudGFyZ2V0KSA9PSBudWxsID8gdm9pZCAwIDogX2EudGFnTmFtZSkgIT09IFwiSU5QVVRcIiB8fCByZWZJbnB1dC52YWx1ZS5pbmNsdWRlcyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBwaWNrZXJWaXNpYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uTW91c2VFbnRlciA9ICgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5yZWFkb25seSB8fCBwaWNrZXJEaXNhYmxlZC52YWx1ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKCF2YWx1ZUlzRW1wdHkudmFsdWUgJiYgcHJvcHMuY2xlYXJhYmxlKSB7XG4gICAgICAgIHNob3dDbG9zZS52YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBvbk1vdXNlTGVhdmUgPSAoKSA9PiB7XG4gICAgICBzaG93Q2xvc2UudmFsdWUgPSBmYWxzZTtcbiAgICB9O1xuICAgIGNvbnN0IG9uVG91Y2hTdGFydElucHV0ID0gKGV2ZW50KSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAocHJvcHMucmVhZG9ubHkgfHwgcGlja2VyRGlzYWJsZWQudmFsdWUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmICgoKF9hID0gZXZlbnQudG91Y2hlc1swXS50YXJnZXQpID09IG51bGwgPyB2b2lkIDAgOiBfYS50YWdOYW1lKSAhPT0gXCJJTlBVVFwiIHx8IHJlZklucHV0LnZhbHVlLmluY2x1ZGVzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHBpY2tlclZpc2libGUudmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaXNSYW5nZUlucHV0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnR5cGUuaW5jbHVkZXMoXCJyYW5nZVwiKTtcbiAgICB9KTtcbiAgICBjb25zdCBwaWNrZXJTaXplID0gdXNlRm9ybVNpemUoKTtcbiAgICBjb25zdCBwb3BwZXJFbCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICByZXR1cm4gKF9iID0gKF9hID0gdW5yZWYocmVmUG9wcGVyKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnBvcHBlclJlZikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNvbnRlbnRSZWY7XG4gICAgfSk7XG4gICAgY29uc3QgYWN0dWFsSW5wdXRSZWYgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAodW5yZWYoaXNSYW5nZUlucHV0KSkge1xuICAgICAgICByZXR1cm4gdW5yZWYoaW5wdXRSZWYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChfYSA9IHVucmVmKGlucHV0UmVmKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLiRlbDtcbiAgICB9KTtcbiAgICBvbkNsaWNrT3V0c2lkZShhY3R1YWxJbnB1dFJlZiwgKGUpID0+IHtcbiAgICAgIGNvbnN0IHVucmVmZWRQb3BwZXJFbCA9IHVucmVmKHBvcHBlckVsKTtcbiAgICAgIGNvbnN0IGlucHV0RWwgPSB1bnJlZihhY3R1YWxJbnB1dFJlZik7XG4gICAgICBpZiAodW5yZWZlZFBvcHBlckVsICYmIChlLnRhcmdldCA9PT0gdW5yZWZlZFBvcHBlckVsIHx8IGUuY29tcG9zZWRQYXRoKCkuaW5jbHVkZXModW5yZWZlZFBvcHBlckVsKSkgfHwgZS50YXJnZXQgPT09IGlucHV0RWwgfHwgZS5jb21wb3NlZFBhdGgoKS5pbmNsdWRlcyhpbnB1dEVsKSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgcGlja2VyVmlzaWJsZS52YWx1ZSA9IGZhbHNlO1xuICAgIH0pO1xuICAgIGNvbnN0IHVzZXJJbnB1dCA9IHJlZihudWxsKTtcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBpZiAodXNlcklucHV0LnZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VVc2VySW5wdXRUb0RheWpzKGRpc3BsYXlWYWx1ZS52YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgICBlbWl0SW5wdXQoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAoKF8pID0+IF8udG9EYXRlKCkpIDogdmFsdWUudG9EYXRlKCkpO1xuICAgICAgICAgICAgdXNlcklucHV0LnZhbHVlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh1c2VySW5wdXQudmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgZW1pdElucHV0KG51bGwpO1xuICAgICAgICBlbWl0Q2hhbmdlKG51bGwpO1xuICAgICAgICB1c2VySW5wdXQudmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcGFyc2VVc2VySW5wdXRUb0RheWpzID0gKHZhbHVlKSA9PiB7XG4gICAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBwaWNrZXJPcHRpb25zLnZhbHVlLnBhcnNlVXNlcklucHV0KHZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGZvcm1hdERheWpzVG9TdHJpbmcgPSAodmFsdWUpID0+IHtcbiAgICAgIGlmICghdmFsdWUpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHBpY2tlck9wdGlvbnMudmFsdWUuZm9ybWF0VG9TdHJpbmcodmFsdWUpO1xuICAgIH07XG4gICAgY29uc3QgaXNWYWxpZFZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgICByZXR1cm4gcGlja2VyT3B0aW9ucy52YWx1ZS5pc1ZhbGlkVmFsdWUodmFsdWUpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlS2V5ZG93bklucHV0ID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAocHJvcHMucmVhZG9ubHkgfHwgcGlja2VyRGlzYWJsZWQudmFsdWUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHsgY29kZSB9ID0gZXZlbnQ7XG4gICAgICBlbWl0S2V5ZG93bihldmVudCk7XG4gICAgICBpZiAoY29kZSA9PT0gRVZFTlRfQ09ERS5lc2MpIHtcbiAgICAgICAgaWYgKHBpY2tlclZpc2libGUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICBwaWNrZXJWaXNpYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY29kZSA9PT0gRVZFTlRfQ09ERS5kb3duKSB7XG4gICAgICAgIGlmIChwaWNrZXJPcHRpb25zLnZhbHVlLmhhbmRsZUZvY3VzUGlja2VyKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGlja2VyVmlzaWJsZS52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBwaWNrZXJWaXNpYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwaWNrZXJPcHRpb25zLnZhbHVlLmhhbmRsZUZvY3VzUGlja2VyKSB7XG4gICAgICAgICAgcGlja2VyT3B0aW9ucy52YWx1ZS5oYW5kbGVGb2N1c1BpY2tlcigpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IEVWRU5UX0NPREUudGFiKSB7XG4gICAgICAgIGhhc0p1c3RUYWJFeGl0ZWRJbnB1dCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjb2RlID09PSBFVkVOVF9DT0RFLmVudGVyIHx8IGNvZGUgPT09IEVWRU5UX0NPREUubnVtcGFkRW50ZXIpIHtcbiAgICAgICAgaWYgKHVzZXJJbnB1dC52YWx1ZSA9PT0gbnVsbCB8fCB1c2VySW5wdXQudmFsdWUgPT09IFwiXCIgfHwgaXNWYWxpZFZhbHVlKHBhcnNlVXNlcklucHV0VG9EYXlqcyhkaXNwbGF5VmFsdWUudmFsdWUpKSkge1xuICAgICAgICAgIGhhbmRsZUNoYW5nZSgpO1xuICAgICAgICAgIHBpY2tlclZpc2libGUudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHVzZXJJbnB1dC52YWx1ZSkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBpY2tlck9wdGlvbnMudmFsdWUuaGFuZGxlS2V5ZG93bklucHV0KSB7XG4gICAgICAgIHBpY2tlck9wdGlvbnMudmFsdWUuaGFuZGxlS2V5ZG93bklucHV0KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uVXNlcklucHV0ID0gKGUpID0+IHtcbiAgICAgIHVzZXJJbnB1dC52YWx1ZSA9IGU7XG4gICAgICBpZiAoIXBpY2tlclZpc2libGUudmFsdWUpIHtcbiAgICAgICAgcGlja2VyVmlzaWJsZS52YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVTdGFydElucHV0ID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICBpZiAodXNlcklucHV0LnZhbHVlKSB7XG4gICAgICAgIHVzZXJJbnB1dC52YWx1ZSA9IFt0YXJnZXQudmFsdWUsIHVzZXJJbnB1dC52YWx1ZVsxXV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1c2VySW5wdXQudmFsdWUgPSBbdGFyZ2V0LnZhbHVlLCBudWxsXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUVuZElucHV0ID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICBpZiAodXNlcklucHV0LnZhbHVlKSB7XG4gICAgICAgIHVzZXJJbnB1dC52YWx1ZSA9IFt1c2VySW5wdXQudmFsdWVbMF0sIHRhcmdldC52YWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1c2VySW5wdXQudmFsdWUgPSBbbnVsbCwgdGFyZ2V0LnZhbHVlXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVN0YXJ0Q2hhbmdlID0gKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgY29uc3QgdmFsdWVzID0gdXNlcklucHV0LnZhbHVlO1xuICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZVVzZXJJbnB1dFRvRGF5anModmFsdWVzICYmIHZhbHVlc1swXSk7XG4gICAgICBjb25zdCBwYXJzZWRWYWwgPSB1bnJlZihwYXJzZWRWYWx1ZSk7XG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUuaXNWYWxpZCgpKSB7XG4gICAgICAgIHVzZXJJbnB1dC52YWx1ZSA9IFtcbiAgICAgICAgICBmb3JtYXREYXlqc1RvU3RyaW5nKHZhbHVlKSxcbiAgICAgICAgICAoKF9hID0gZGlzcGxheVZhbHVlLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2FbMV0pIHx8IG51bGxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBbdmFsdWUsIHBhcnNlZFZhbCAmJiAocGFyc2VkVmFsWzFdIHx8IG51bGwpXTtcbiAgICAgICAgaWYgKGlzVmFsaWRWYWx1ZShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBlbWl0SW5wdXQobmV3VmFsdWUpO1xuICAgICAgICAgIHVzZXJJbnB1dC52YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUVuZENoYW5nZSA9ICgpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IHVucmVmKHVzZXJJbnB1dCk7XG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlVXNlcklucHV0VG9EYXlqcyh2YWx1ZXMgJiYgdmFsdWVzWzFdKTtcbiAgICAgIGNvbnN0IHBhcnNlZFZhbCA9IHVucmVmKHBhcnNlZFZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgdXNlcklucHV0LnZhbHVlID0gW1xuICAgICAgICAgICgoX2EgPSB1bnJlZihkaXNwbGF5VmFsdWUpKSA9PSBudWxsID8gdm9pZCAwIDogX2FbMF0pIHx8IG51bGwsXG4gICAgICAgICAgZm9ybWF0RGF5anNUb1N0cmluZyh2YWx1ZSlcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBbcGFyc2VkVmFsICYmIHBhcnNlZFZhbFswXSwgdmFsdWVdO1xuICAgICAgICBpZiAoaXNWYWxpZFZhbHVlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGVtaXRJbnB1dChuZXdWYWx1ZSk7XG4gICAgICAgICAgdXNlcklucHV0LnZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcGlja2VyT3B0aW9ucyA9IHJlZih7fSk7XG4gICAgY29uc3Qgb25TZXRQaWNrZXJPcHRpb24gPSAoZSkgPT4ge1xuICAgICAgcGlja2VyT3B0aW9ucy52YWx1ZVtlWzBdXSA9IGVbMV07XG4gICAgICBwaWNrZXJPcHRpb25zLnZhbHVlLnBhbmVsUmVhZHkgPSB0cnVlO1xuICAgIH07XG4gICAgY29uc3Qgb25DYWxlbmRhckNoYW5nZSA9IChlKSA9PiB7XG4gICAgICBlbWl0KFwiY2FsZW5kYXItY2hhbmdlXCIsIGUpO1xuICAgIH07XG4gICAgY29uc3Qgb25QYW5lbENoYW5nZSA9ICh2YWx1ZSwgbW9kZSwgdmlldykgPT4ge1xuICAgICAgZW1pdChcInBhbmVsLWNoYW5nZVwiLCB2YWx1ZSwgbW9kZSwgdmlldyk7XG4gICAgfTtcbiAgICBwcm92aWRlKFwiRVBfUElDS0VSX0JBU0VcIiwge1xuICAgICAgcHJvcHNcbiAgICB9KTtcbiAgICBleHBvc2Uoe1xuICAgICAgZm9jdXMsXG4gICAgICBoYW5kbGVGb2N1c0lucHV0LFxuICAgICAgaGFuZGxlQmx1cklucHV0LFxuICAgICAgaGFuZGxlT3BlbixcbiAgICAgIGhhbmRsZUNsb3NlLFxuICAgICAgb25QaWNrXG4gICAgfSk7XG4gICAgcmV0dXJuIChfY3R4LCBfY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2sodW5yZWYoRWxUb29sdGlwKSwgbWVyZ2VQcm9wcyh7XG4gICAgICAgIHJlZl9rZXk6IFwicmVmUG9wcGVyXCIsXG4gICAgICAgIHJlZjogcmVmUG9wcGVyLFxuICAgICAgICB2aXNpYmxlOiBwaWNrZXJWaXNpYmxlLnZhbHVlLFxuICAgICAgICBlZmZlY3Q6IFwibGlnaHRcIixcbiAgICAgICAgcHVyZTogXCJcIixcbiAgICAgICAgdHJpZ2dlcjogXCJjbGlja1wiXG4gICAgICB9LCBfY3R4LiRhdHRycywge1xuICAgICAgICByb2xlOiBcImRpYWxvZ1wiLFxuICAgICAgICB0ZWxlcG9ydGVkOiBcIlwiLFxuICAgICAgICB0cmFuc2l0aW9uOiBgJHt1bnJlZihuc0RhdGUpLm5hbWVzcGFjZS52YWx1ZX0tem9vbS1pbi10b3BgLFxuICAgICAgICBcInBvcHBlci1jbGFzc1wiOiBbYCR7dW5yZWYobnNEYXRlKS5uYW1lc3BhY2UudmFsdWV9LXBpY2tlcl9fcG9wcGVyYCwgX2N0eC5wb3BwZXJDbGFzc10sXG4gICAgICAgIFwicG9wcGVyLW9wdGlvbnNcIjogdW5yZWYoZWxQb3BwZXJPcHRpb25zKSxcbiAgICAgICAgXCJmYWxsYmFjay1wbGFjZW1lbnRzXCI6IFtcImJvdHRvbVwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwibGVmdFwiXSxcbiAgICAgICAgXCJncHUtYWNjZWxlcmF0aW9uXCI6IGZhbHNlLFxuICAgICAgICBcInN0b3AtcG9wcGVyLW1vdXNlLWV2ZW50XCI6IGZhbHNlLFxuICAgICAgICBcImhpZGUtYWZ0ZXJcIjogMCxcbiAgICAgICAgcGVyc2lzdGVudDogXCJcIixcbiAgICAgICAgb25CZWZvcmVTaG93LFxuICAgICAgICBvblNob3csXG4gICAgICAgIG9uSGlkZVxuICAgICAgfSksIHtcbiAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgIXVucmVmKGlzUmFuZ2VJbnB1dCkgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKEVsSW5wdXQpLCB7XG4gICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICBpZDogX2N0eC5pZCxcbiAgICAgICAgICAgIHJlZl9rZXk6IFwiaW5wdXRSZWZcIixcbiAgICAgICAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICAgICAgICBcImNvbnRhaW5lci1yb2xlXCI6IFwiY29tYm9ib3hcIixcbiAgICAgICAgICAgIFwibW9kZWwtdmFsdWVcIjogdW5yZWYoZGlzcGxheVZhbHVlKSxcbiAgICAgICAgICAgIG5hbWU6IF9jdHgubmFtZSxcbiAgICAgICAgICAgIHNpemU6IHVucmVmKHBpY2tlclNpemUpLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IHVucmVmKHBpY2tlckRpc2FibGVkKSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfY3R4LnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihuc0RhdGUpLmIoXCJlZGl0b3JcIiksIHVucmVmKG5zRGF0ZSkuYm0oXCJlZGl0b3JcIiwgX2N0eC50eXBlKSwgX2N0eC4kYXR0cnMuY2xhc3NdKSxcbiAgICAgICAgICAgIHN0eWxlOiBub3JtYWxpemVTdHlsZShfY3R4LiRhdHRycy5zdHlsZSksXG4gICAgICAgICAgICByZWFkb25seTogIV9jdHguZWRpdGFibGUgfHwgX2N0eC5yZWFkb25seSB8fCB1bnJlZihpc0RhdGVzUGlja2VyKSB8fCBfY3R4LnR5cGUgPT09IFwid2Vla1wiLFxuICAgICAgICAgICAgbGFiZWw6IF9jdHgubGFiZWwsXG4gICAgICAgICAgICB0YWJpbmRleDogX2N0eC50YWJpbmRleCxcbiAgICAgICAgICAgIFwidmFsaWRhdGUtZXZlbnRcIjogZmFsc2UsXG4gICAgICAgICAgICBvbklucHV0OiBvblVzZXJJbnB1dCxcbiAgICAgICAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzSW5wdXQsXG4gICAgICAgICAgICBvbkJsdXI6IGhhbmRsZUJsdXJJbnB1dCxcbiAgICAgICAgICAgIG9uS2V5ZG93bjogaGFuZGxlS2V5ZG93bklucHV0LFxuICAgICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgIG9uTW91c2Vkb3duOiBvbk1vdXNlRG93bklucHV0LFxuICAgICAgICAgICAgb25Nb3VzZWVudGVyOiBvbk1vdXNlRW50ZXIsXG4gICAgICAgICAgICBvbk1vdXNlbGVhdmU6IG9uTW91c2VMZWF2ZSxcbiAgICAgICAgICAgIG9uVG91Y2hzdGFydDogb25Ub3VjaFN0YXJ0SW5wdXQsXG4gICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IHdpdGhNb2RpZmllcnMoKCkgPT4ge1xuICAgICAgICAgICAgfSwgW1wic3RvcFwiXSkpXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgcHJlZml4OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgdW5yZWYodHJpZ2dlckljb24pID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayh1bnJlZihFbEljb24pLCB7XG4gICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihuc0lucHV0KS5lKFwiaWNvblwiKSksXG4gICAgICAgICAgICAgICAgb25Nb3VzZWRvd246IHdpdGhNb2RpZmllcnMob25Nb3VzZURvd25JbnB1dCwgW1wicHJldmVudFwiXSksXG4gICAgICAgICAgICAgICAgb25Ub3VjaHN0YXJ0OiBvblRvdWNoU3RhcnRJbnB1dFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHJlc29sdmVEeW5hbWljQ29tcG9uZW50KHVucmVmKHRyaWdnZXJJY29uKSkpKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSwgOCwgW1wiY2xhc3NcIiwgXCJvbk1vdXNlZG93blwiXSkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBzdWZmaXg6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBzaG93Q2xvc2UudmFsdWUgJiYgX2N0eC5jbGVhckljb24gPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKEVsSWNvbiksIHtcbiAgICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKGAke3VucmVmKG5zSW5wdXQpLmUoXCJpY29uXCIpfSBjbGVhci1pY29uYCksXG4gICAgICAgICAgICAgICAgb25DbGljazogd2l0aE1vZGlmaWVycyhvbkNsZWFySWNvbkNsaWNrLCBbXCJzdG9wXCJdKVxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHJlc29sdmVEeW5hbWljQ29tcG9uZW50KF9jdHguY2xlYXJJY29uKSkpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICB9LCA4LCBbXCJjbGFzc1wiLCBcIm9uQ2xpY2tcIl0pKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMVxuICAgICAgICAgIH0sIDgsIFtcImlkXCIsIFwibW9kZWwtdmFsdWVcIiwgXCJuYW1lXCIsIFwic2l6ZVwiLCBcImRpc2FibGVkXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJjbGFzc1wiLCBcInN0eWxlXCIsIFwicmVhZG9ubHlcIiwgXCJsYWJlbFwiLCBcInRhYmluZGV4XCIsIFwib25LZXlkb3duXCJdKSkgOiAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IDEsXG4gICAgICAgICAgICByZWZfa2V5OiBcImlucHV0UmVmXCIsXG4gICAgICAgICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcbiAgICAgICAgICAgICAgdW5yZWYobnNEYXRlKS5iKFwiZWRpdG9yXCIpLFxuICAgICAgICAgICAgICB1bnJlZihuc0RhdGUpLmJtKFwiZWRpdG9yXCIsIF9jdHgudHlwZSksXG4gICAgICAgICAgICAgIHVucmVmKG5zSW5wdXQpLmUoXCJ3cmFwcGVyXCIpLFxuICAgICAgICAgICAgICB1bnJlZihuc0RhdGUpLmlzKFwiZGlzYWJsZWRcIiwgdW5yZWYocGlja2VyRGlzYWJsZWQpKSxcbiAgICAgICAgICAgICAgdW5yZWYobnNEYXRlKS5pcyhcImFjdGl2ZVwiLCBwaWNrZXJWaXNpYmxlLnZhbHVlKSxcbiAgICAgICAgICAgICAgdW5yZWYobnNSYW5nZSkuYihcImVkaXRvclwiKSxcbiAgICAgICAgICAgICAgdW5yZWYocGlja2VyU2l6ZSkgPyB1bnJlZihuc1JhbmdlKS5ibShcImVkaXRvclwiLCB1bnJlZihwaWNrZXJTaXplKSkgOiBcIlwiLFxuICAgICAgICAgICAgICBfY3R4LiRhdHRycy5jbGFzc1xuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBzdHlsZTogbm9ybWFsaXplU3R5bGUoX2N0eC4kYXR0cnMuc3R5bGUpLFxuICAgICAgICAgICAgb25DbGljazogaGFuZGxlRm9jdXNJbnB1dCxcbiAgICAgICAgICAgIG9uTW91c2VlbnRlcjogb25Nb3VzZUVudGVyLFxuICAgICAgICAgICAgb25Nb3VzZWxlYXZlOiBvbk1vdXNlTGVhdmUsXG4gICAgICAgICAgICBvblRvdWNoc3RhcnQ6IG9uVG91Y2hTdGFydElucHV0LFxuICAgICAgICAgICAgb25LZXlkb3duOiBoYW5kbGVLZXlkb3duSW5wdXRcbiAgICAgICAgICB9LCBbXG4gICAgICAgICAgICB1bnJlZih0cmlnZ2VySWNvbikgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKEVsSWNvbiksIHtcbiAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW3VucmVmKG5zSW5wdXQpLmUoXCJpY29uXCIpLCB1bnJlZihuc1JhbmdlKS5lKFwiaWNvblwiKV0pLFxuICAgICAgICAgICAgICBvbk1vdXNlZG93bjogd2l0aE1vZGlmaWVycyhvbk1vdXNlRG93bklucHV0LCBbXCJwcmV2ZW50XCJdKSxcbiAgICAgICAgICAgICAgb25Ub3VjaHN0YXJ0OiBvblRvdWNoU3RhcnRJbnB1dFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHJlc29sdmVEeW5hbWljQ29tcG9uZW50KHVucmVmKHRyaWdnZXJJY29uKSkpKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgfSwgOCwgW1wiY2xhc3NcIiwgXCJvbk1vdXNlZG93blwiXSkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgaWQ6IF9jdHguaWQgJiYgX2N0eC5pZFswXSxcbiAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlOiBcIm9mZlwiLFxuICAgICAgICAgICAgICBuYW1lOiBfY3R4Lm5hbWUgJiYgX2N0eC5uYW1lWzBdLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogX2N0eC5zdGFydFBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICB2YWx1ZTogdW5yZWYoZGlzcGxheVZhbHVlKSAmJiB1bnJlZihkaXNwbGF5VmFsdWUpWzBdLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogdW5yZWYocGlja2VyRGlzYWJsZWQpLFxuICAgICAgICAgICAgICByZWFkb25seTogIV9jdHguZWRpdGFibGUgfHwgX2N0eC5yZWFkb25seSxcbiAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKG5zUmFuZ2UpLmIoXCJpbnB1dFwiKSksXG4gICAgICAgICAgICAgIG9uTW91c2Vkb3duOiBvbk1vdXNlRG93bklucHV0LFxuICAgICAgICAgICAgICBvbklucHV0OiBoYW5kbGVTdGFydElucHV0LFxuICAgICAgICAgICAgICBvbkNoYW5nZTogaGFuZGxlU3RhcnRDaGFuZ2UsXG4gICAgICAgICAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzSW5wdXQsXG4gICAgICAgICAgICAgIG9uQmx1cjogaGFuZGxlQmx1cklucHV0XG4gICAgICAgICAgICB9LCBudWxsLCA0MiwgX2hvaXN0ZWRfMSksXG4gICAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcInJhbmdlLXNlcGFyYXRvclwiLCB7fSwgKCkgPT4gW1xuICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnNSYW5nZSkuYihcInNlcGFyYXRvclwiKSlcbiAgICAgICAgICAgICAgfSwgdG9EaXNwbGF5U3RyaW5nKF9jdHgucmFuZ2VTZXBhcmF0b3IpLCAzKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGlkOiBfY3R4LmlkICYmIF9jdHguaWRbMV0sXG4gICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogXCJvZmZcIixcbiAgICAgICAgICAgICAgbmFtZTogX2N0eC5uYW1lICYmIF9jdHgubmFtZVsxXSxcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IF9jdHguZW5kUGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgIHZhbHVlOiB1bnJlZihkaXNwbGF5VmFsdWUpICYmIHVucmVmKGRpc3BsYXlWYWx1ZSlbMV0sXG4gICAgICAgICAgICAgIGRpc2FibGVkOiB1bnJlZihwaWNrZXJEaXNhYmxlZCksXG4gICAgICAgICAgICAgIHJlYWRvbmx5OiAhX2N0eC5lZGl0YWJsZSB8fCBfY3R4LnJlYWRvbmx5LFxuICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnNSYW5nZSkuYihcImlucHV0XCIpKSxcbiAgICAgICAgICAgICAgb25Nb3VzZWRvd246IG9uTW91c2VEb3duSW5wdXQsXG4gICAgICAgICAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzSW5wdXQsXG4gICAgICAgICAgICAgIG9uQmx1cjogaGFuZGxlQmx1cklucHV0LFxuICAgICAgICAgICAgICBvbklucHV0OiBoYW5kbGVFbmRJbnB1dCxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUVuZENoYW5nZVxuICAgICAgICAgICAgfSwgbnVsbCwgNDIsIF9ob2lzdGVkXzIpLFxuICAgICAgICAgICAgX2N0eC5jbGVhckljb24gPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKEVsSWNvbiksIHtcbiAgICAgICAgICAgICAga2V5OiAxLFxuICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1xuICAgICAgICAgICAgICAgIHVucmVmKG5zSW5wdXQpLmUoXCJpY29uXCIpLFxuICAgICAgICAgICAgICAgIHVucmVmKG5zUmFuZ2UpLmUoXCJjbG9zZS1pY29uXCIpLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFt1bnJlZihuc1JhbmdlKS5lKFwiY2xvc2UtaWNvbi0taGlkZGVuXCIpXTogIXNob3dDbG9zZS52YWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IG9uQ2xlYXJJY29uQ2xpY2tcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhyZXNvbHZlRHluYW1pY0NvbXBvbmVudChfY3R4LmNsZWFySWNvbikpKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgfSwgOCwgW1wiY2xhc3NcIl0pKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgICAgICBdLCAzOCkpXG4gICAgICAgIF0pLFxuICAgICAgICBjb250ZW50OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIiwge1xuICAgICAgICAgICAgdmlzaWJsZTogcGlja2VyVmlzaWJsZS52YWx1ZSxcbiAgICAgICAgICAgIGFjdHVhbFZpc2libGU6IHBpY2tlckFjdHVhbFZpc2libGUudmFsdWUsXG4gICAgICAgICAgICBwYXJzZWRWYWx1ZTogdW5yZWYocGFyc2VkVmFsdWUpLFxuICAgICAgICAgICAgZm9ybWF0OiBfY3R4LmZvcm1hdCxcbiAgICAgICAgICAgIHVubGlua1BhbmVsczogX2N0eC51bmxpbmtQYW5lbHMsXG4gICAgICAgICAgICB0eXBlOiBfY3R4LnR5cGUsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IF9jdHguZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgb25QaWNrLFxuICAgICAgICAgICAgb25TZWxlY3RSYW5nZTogc2V0U2VsZWN0aW9uUmFuZ2UsXG4gICAgICAgICAgICBvblNldFBpY2tlck9wdGlvbixcbiAgICAgICAgICAgIG9uQ2FsZW5kYXJDaGFuZ2UsXG4gICAgICAgICAgICBvblBhbmVsQ2hhbmdlLFxuICAgICAgICAgICAgb25LZXlkb3duOiBvbktleWRvd25Qb3BwZXJDb250ZW50LFxuICAgICAgICAgICAgb25Nb3VzZWRvd246IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gd2l0aE1vZGlmaWVycygoKSA9PiB7XG4gICAgICAgICAgICB9LCBbXCJzdG9wXCJdKSlcbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgXzogM1xuICAgICAgfSwgMTYsIFtcInZpc2libGVcIiwgXCJ0cmFuc2l0aW9uXCIsIFwicG9wcGVyLWNsYXNzXCIsIFwicG9wcGVyLW9wdGlvbnNcIl0pO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIENvbW1vblBpY2tlciA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvdGltZS1waWNrZXIvc3JjL2NvbW1vbi9waWNrZXIudnVlXCJdXSk7XG5cbmV4cG9ydCB7IENvbW1vblBpY2tlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waWNrZXIubWpzLm1hcFxuIiwiaW1wb3J0ICcuLi8uLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgdGltZVBhbmVsU2hhcmVkUHJvcHMgfSBmcm9tICcuL3NoYXJlZC5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuXG5jb25zdCBwYW5lbFRpbWVQaWNrZXJQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICAuLi50aW1lUGFuZWxTaGFyZWRQcm9wcyxcbiAgZGF0ZXRpbWVSb2xlOiBTdHJpbmcsXG4gIHBhcnNlZFZhbHVlOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoT2JqZWN0KVxuICB9XG59KTtcblxuZXhwb3J0IHsgcGFuZWxUaW1lUGlja2VyUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhbmVsLXRpbWUtcGlja2VyLm1qcy5tYXBcbiIsImNvbnN0IHVzZVRpbWVQYW5lbCA9ICh7XG4gIGdldEF2YWlsYWJsZUhvdXJzLFxuICBnZXRBdmFpbGFibGVNaW51dGVzLFxuICBnZXRBdmFpbGFibGVTZWNvbmRzXG59KSA9PiB7XG4gIGNvbnN0IGdldEF2YWlsYWJsZVRpbWUgPSAoZGF0ZSwgcm9sZSwgZmlyc3QsIGNvbXBhcmVEYXRlKSA9PiB7XG4gICAgY29uc3QgYXZhaWxhYmxlVGltZUdldHRlcnMgPSB7XG4gICAgICBob3VyOiBnZXRBdmFpbGFibGVIb3VycyxcbiAgICAgIG1pbnV0ZTogZ2V0QXZhaWxhYmxlTWludXRlcyxcbiAgICAgIHNlY29uZDogZ2V0QXZhaWxhYmxlU2Vjb25kc1xuICAgIH07XG4gICAgbGV0IHJlc3VsdCA9IGRhdGU7XG4gICAgW1wiaG91clwiLCBcIm1pbnV0ZVwiLCBcInNlY29uZFwiXS5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICBpZiAoYXZhaWxhYmxlVGltZUdldHRlcnNbdHlwZV0pIHtcbiAgICAgICAgbGV0IGF2YWlsYWJsZVRpbWVTbG90cztcbiAgICAgICAgY29uc3QgbWV0aG9kID0gYXZhaWxhYmxlVGltZUdldHRlcnNbdHlwZV07XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJtaW51dGVcIjoge1xuICAgICAgICAgICAgYXZhaWxhYmxlVGltZVNsb3RzID0gbWV0aG9kKHJlc3VsdC5ob3VyKCksIHJvbGUsIGNvbXBhcmVEYXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwic2Vjb25kXCI6IHtcbiAgICAgICAgICAgIGF2YWlsYWJsZVRpbWVTbG90cyA9IG1ldGhvZChyZXN1bHQuaG91cigpLCByZXN1bHQubWludXRlKCksIHJvbGUsIGNvbXBhcmVEYXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBhdmFpbGFibGVUaW1lU2xvdHMgPSBtZXRob2Qocm9sZSwgY29tcGFyZURhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgoYXZhaWxhYmxlVGltZVNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBhdmFpbGFibGVUaW1lU2xvdHMubGVuZ3RoKSAmJiAhYXZhaWxhYmxlVGltZVNsb3RzLmluY2x1ZGVzKHJlc3VsdFt0eXBlXSgpKSkge1xuICAgICAgICAgIGNvbnN0IHBvcyA9IGZpcnN0ID8gMCA6IGF2YWlsYWJsZVRpbWVTbG90cy5sZW5ndGggLSAxO1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdFt0eXBlXShhdmFpbGFibGVUaW1lU2xvdHNbcG9zXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb25zdCB0aW1lUGlja2VyT3B0aW9ucyA9IHt9O1xuICBjb25zdCBvblNldE9wdGlvbiA9IChba2V5LCB2YWxdKSA9PiB7XG4gICAgdGltZVBpY2tlck9wdGlvbnNba2V5XSA9IHZhbDtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB0aW1lUGlja2VyT3B0aW9ucyxcbiAgICBnZXRBdmFpbGFibGVUaW1lLFxuICAgIG9uU2V0T3B0aW9uXG4gIH07XG59O1xuXG5leHBvcnQgeyB1c2VUaW1lUGFuZWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS10aW1lLXBhbmVsLm1qcy5tYXBcbiIsImltcG9ydCB7IHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgbWFrZUxpc3QgfSBmcm9tICcuLi91dGlscy5tanMnO1xuXG5jb25zdCBtYWtlQXZhaWxhYmxlQXJyID0gKGRpc2FibGVkTGlzdCkgPT4ge1xuICBjb25zdCB0cnVlT3JOdW1iZXIgPSAoaXNEaXNhYmxlZCwgaW5kZXgpID0+IGlzRGlzYWJsZWQgfHwgaW5kZXg7XG4gIGNvbnN0IGdldE51bWJlciA9IChwcmVkaWNhdGUpID0+IHByZWRpY2F0ZSAhPT0gdHJ1ZTtcbiAgcmV0dXJuIGRpc2FibGVkTGlzdC5tYXAodHJ1ZU9yTnVtYmVyKS5maWx0ZXIoZ2V0TnVtYmVyKTtcbn07XG5jb25zdCBnZXRUaW1lTGlzdHMgPSAoZGlzYWJsZWRIb3VycywgZGlzYWJsZWRNaW51dGVzLCBkaXNhYmxlZFNlY29uZHMpID0+IHtcbiAgY29uc3QgZ2V0SG91cnNMaXN0ID0gKHJvbGUsIGNvbXBhcmUpID0+IHtcbiAgICByZXR1cm4gbWFrZUxpc3QoMjQsIGRpc2FibGVkSG91cnMgJiYgKCgpID0+IGRpc2FibGVkSG91cnMgPT0gbnVsbCA/IHZvaWQgMCA6IGRpc2FibGVkSG91cnMocm9sZSwgY29tcGFyZSkpKTtcbiAgfTtcbiAgY29uc3QgZ2V0TWludXRlc0xpc3QgPSAoaG91ciwgcm9sZSwgY29tcGFyZSkgPT4ge1xuICAgIHJldHVybiBtYWtlTGlzdCg2MCwgZGlzYWJsZWRNaW51dGVzICYmICgoKSA9PiBkaXNhYmxlZE1pbnV0ZXMgPT0gbnVsbCA/IHZvaWQgMCA6IGRpc2FibGVkTWludXRlcyhob3VyLCByb2xlLCBjb21wYXJlKSkpO1xuICB9O1xuICBjb25zdCBnZXRTZWNvbmRzTGlzdCA9IChob3VyLCBtaW51dGUsIHJvbGUsIGNvbXBhcmUpID0+IHtcbiAgICByZXR1cm4gbWFrZUxpc3QoNjAsIGRpc2FibGVkU2Vjb25kcyAmJiAoKCkgPT4gZGlzYWJsZWRTZWNvbmRzID09IG51bGwgPyB2b2lkIDAgOiBkaXNhYmxlZFNlY29uZHMoaG91ciwgbWludXRlLCByb2xlLCBjb21wYXJlKSkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldEhvdXJzTGlzdCxcbiAgICBnZXRNaW51dGVzTGlzdCxcbiAgICBnZXRTZWNvbmRzTGlzdFxuICB9O1xufTtcbmNvbnN0IGJ1aWxkQXZhaWxhYmxlVGltZVNsb3RHZXR0ZXIgPSAoZGlzYWJsZWRIb3VycywgZGlzYWJsZWRNaW51dGVzLCBkaXNhYmxlZFNlY29uZHMpID0+IHtcbiAgY29uc3QgeyBnZXRIb3Vyc0xpc3QsIGdldE1pbnV0ZXNMaXN0LCBnZXRTZWNvbmRzTGlzdCB9ID0gZ2V0VGltZUxpc3RzKGRpc2FibGVkSG91cnMsIGRpc2FibGVkTWludXRlcywgZGlzYWJsZWRTZWNvbmRzKTtcbiAgY29uc3QgZ2V0QXZhaWxhYmxlSG91cnMgPSAocm9sZSwgY29tcGFyZSkgPT4ge1xuICAgIHJldHVybiBtYWtlQXZhaWxhYmxlQXJyKGdldEhvdXJzTGlzdChyb2xlLCBjb21wYXJlKSk7XG4gIH07XG4gIGNvbnN0IGdldEF2YWlsYWJsZU1pbnV0ZXMgPSAoaG91ciwgcm9sZSwgY29tcGFyZSkgPT4ge1xuICAgIHJldHVybiBtYWtlQXZhaWxhYmxlQXJyKGdldE1pbnV0ZXNMaXN0KGhvdXIsIHJvbGUsIGNvbXBhcmUpKTtcbiAgfTtcbiAgY29uc3QgZ2V0QXZhaWxhYmxlU2Vjb25kcyA9IChob3VyLCBtaW51dGUsIHJvbGUsIGNvbXBhcmUpID0+IHtcbiAgICByZXR1cm4gbWFrZUF2YWlsYWJsZUFycihnZXRTZWNvbmRzTGlzdChob3VyLCBtaW51dGUsIHJvbGUsIGNvbXBhcmUpKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXRBdmFpbGFibGVIb3VycyxcbiAgICBnZXRBdmFpbGFibGVNaW51dGVzLFxuICAgIGdldEF2YWlsYWJsZVNlY29uZHNcbiAgfTtcbn07XG5jb25zdCB1c2VPbGRWYWx1ZSA9IChwcm9wcykgPT4ge1xuICBjb25zdCBvbGRWYWx1ZSA9IHJlZihwcm9wcy5wYXJzZWRWYWx1ZSk7XG4gIHdhdGNoKCgpID0+IHByb3BzLnZpc2libGUsICh2YWwpID0+IHtcbiAgICBpZiAoIXZhbCkge1xuICAgICAgb2xkVmFsdWUudmFsdWUgPSBwcm9wcy5wYXJzZWRWYWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2xkVmFsdWU7XG59O1xuXG5leHBvcnQgeyBidWlsZEF2YWlsYWJsZVRpbWVTbG90R2V0dGVyLCBnZXRUaW1lTGlzdHMsIHVzZU9sZFZhbHVlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtdGltZS1waWNrZXIubWpzLm1hcFxuIiwiaW1wb3J0ICcuLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3QgUkVQRUFUX0lOVEVSVkFMID0gMTAwO1xuY29uc3QgUkVQRUFUX0RFTEFZID0gNjAwO1xuY29uc3QgdlJlcGVhdENsaWNrID0ge1xuICBiZWZvcmVNb3VudChlbCwgYmluZGluZykge1xuICAgIGNvbnN0IHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgICBjb25zdCB7IGludGVydmFsID0gUkVQRUFUX0lOVEVSVkFMLCBkZWxheSA9IFJFUEVBVF9ERUxBWSB9ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB7fSA6IHZhbHVlO1xuICAgIGxldCBpbnRlcnZhbElkO1xuICAgIGxldCBkZWxheUlkO1xuICAgIGNvbnN0IGhhbmRsZXIgPSAoKSA9PiBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlKCkgOiB2YWx1ZS5oYW5kbGVyKCk7XG4gICAgY29uc3QgY2xlYXIgPSAoKSA9PiB7XG4gICAgICBpZiAoZGVsYXlJZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZGVsYXlJZCk7XG4gICAgICAgIGRlbGF5SWQgPSB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJ2YWxJZCkge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgICAgICBpbnRlcnZhbElkID0gdm9pZCAwO1xuICAgICAgfVxuICAgIH07XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZXZ0KSA9PiB7XG4gICAgICBpZiAoZXZ0LmJ1dHRvbiAhPT0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2xlYXIoKTtcbiAgICAgIGhhbmRsZXIoKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsICgpID0+IGNsZWFyKCksIHtcbiAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBkZWxheUlkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgaGFuZGxlcigpO1xuICAgICAgICB9LCBpbnRlcnZhbCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IFJFUEVBVF9ERUxBWSwgUkVQRUFUX0lOVEVSVkFMLCB2UmVwZWF0Q2xpY2sgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGRpc2FibGVkVGltZUxpc3RzUHJvcHMgfSBmcm9tICcuL3NoYXJlZC5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuXG5jb25zdCBiYXNpY1RpbWVTcGlubmVyUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgcm9sZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZVxuICB9LFxuICBzcGlubmVyRGF0ZToge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKE9iamVjdCksXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgc2hvd1NlY29uZHM6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgYXJyb3dDb250cm9sOiBCb29sZWFuLFxuICBhbVBtTW9kZToge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKFN0cmluZyksXG4gICAgZGVmYXVsdDogXCJcIlxuICB9LFxuICAuLi5kaXNhYmxlZFRpbWVMaXN0c1Byb3BzXG59KTtcblxuZXhwb3J0IHsgYmFzaWNUaW1lU3Bpbm5lclByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNpYy10aW1lLXNwaW5uZXIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCByZWYsIGNvbXB1dGVkLCB1bnJlZiwgbmV4dFRpY2ssIG9uTW91bnRlZCwgd2F0Y2gsIG9wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrLCBub3JtYWxpemVDbGFzcywgRnJhZ21lbnQsIHJlbmRlckxpc3QsIGNyZWF0ZUJsb2NrLCB3aXRoQ3R4LCBjcmVhdGVUZXh0Vk5vZGUsIHRvRGlzcGxheVN0cmluZywgY3JlYXRlQ29tbWVudFZOb2RlLCB3aXRoRGlyZWN0aXZlcywgY3JlYXRlVk5vZGUsIGNyZWF0ZUVsZW1lbnRWTm9kZSB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gJ2xvZGFzaC11bmlmaWVkJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vZGlyZWN0aXZlcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgRWxTY3JvbGxiYXIgfSBmcm9tICcuLi8uLi8uLi9zY3JvbGxiYXIvaW5kZXgubWpzJztcbmltcG9ydCB7IEVsSWNvbiB9IGZyb20gJy4uLy4uLy4uL2ljb24vaW5kZXgubWpzJztcbmltcG9ydCB7IEFycm93VXAsIEFycm93RG93biB9IGZyb20gJ0BlbGVtZW50LXBsdXMvaWNvbnMtdnVlJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IHRpbWVVbml0cyB9IGZyb20gJy4uL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgYnVpbGRUaW1lTGlzdCB9IGZyb20gJy4uL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyBiYXNpY1RpbWVTcGlubmVyUHJvcHMgfSBmcm9tICcuLi9wcm9wcy9iYXNpYy10aW1lLXNwaW5uZXIubWpzJztcbmltcG9ydCB7IGdldFRpbWVMaXN0cyB9IGZyb20gJy4uL2NvbXBvc2FibGVzL3VzZS10aW1lLXBpY2tlci5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgdlJlcGVhdENsaWNrIH0gZnJvbSAnLi4vLi4vLi4vLi4vZGlyZWN0aXZlcy9yZXBlYXQtY2xpY2svaW5kZXgubWpzJztcblxuY29uc3QgX2hvaXN0ZWRfMSA9IFtcIm9uQ2xpY2tcIl07XG5jb25zdCBfaG9pc3RlZF8yID0gW1wib25Nb3VzZWVudGVyXCJdO1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIF9fbmFtZTogXCJiYXNpYy10aW1lLXNwaW5uZXJcIixcbiAgcHJvcHM6IGJhc2ljVGltZVNwaW5uZXJQcm9wcyxcbiAgZW1pdHM6IFtcImNoYW5nZVwiLCBcInNlbGVjdC1yYW5nZVwiLCBcInNldC1vcHRpb25cIl0sXG4gIHNldHVwKF9fcHJvcHMsIHsgZW1pdCB9KSB7XG4gICAgY29uc3QgcHJvcHMgPSBfX3Byb3BzO1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwidGltZVwiKTtcbiAgICBjb25zdCB7IGdldEhvdXJzTGlzdCwgZ2V0TWludXRlc0xpc3QsIGdldFNlY29uZHNMaXN0IH0gPSBnZXRUaW1lTGlzdHMocHJvcHMuZGlzYWJsZWRIb3VycywgcHJvcHMuZGlzYWJsZWRNaW51dGVzLCBwcm9wcy5kaXNhYmxlZFNlY29uZHMpO1xuICAgIGxldCBpc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIGNvbnN0IGN1cnJlbnRTY3JvbGxiYXIgPSByZWYoKTtcbiAgICBjb25zdCBsaXN0SG91cnNSZWYgPSByZWYoKTtcbiAgICBjb25zdCBsaXN0TWludXRlc1JlZiA9IHJlZigpO1xuICAgIGNvbnN0IGxpc3RTZWNvbmRzUmVmID0gcmVmKCk7XG4gICAgY29uc3QgbGlzdFJlZnNNYXAgPSB7XG4gICAgICBob3VyczogbGlzdEhvdXJzUmVmLFxuICAgICAgbWludXRlczogbGlzdE1pbnV0ZXNSZWYsXG4gICAgICBzZWNvbmRzOiBsaXN0U2Vjb25kc1JlZlxuICAgIH07XG4gICAgY29uc3Qgc3Bpbm5lckl0ZW1zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnNob3dTZWNvbmRzID8gdGltZVVuaXRzIDogdGltZVVuaXRzLnNsaWNlKDAsIDIpO1xuICAgIH0pO1xuICAgIGNvbnN0IHRpbWVQYXJ0aWFscyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHsgc3Bpbm5lckRhdGUgfSA9IHByb3BzO1xuICAgICAgY29uc3QgaG91cnMgPSBzcGlubmVyRGF0ZS5ob3VyKCk7XG4gICAgICBjb25zdCBtaW51dGVzID0gc3Bpbm5lckRhdGUubWludXRlKCk7XG4gICAgICBjb25zdCBzZWNvbmRzID0gc3Bpbm5lckRhdGUuc2Vjb25kKCk7XG4gICAgICByZXR1cm4geyBob3VycywgbWludXRlcywgc2Vjb25kcyB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHRpbWVMaXN0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgeyBob3VycywgbWludXRlcyB9ID0gdW5yZWYodGltZVBhcnRpYWxzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhvdXJzOiBnZXRIb3Vyc0xpc3QocHJvcHMucm9sZSksXG4gICAgICAgIG1pbnV0ZXM6IGdldE1pbnV0ZXNMaXN0KGhvdXJzLCBwcm9wcy5yb2xlKSxcbiAgICAgICAgc2Vjb25kczogZ2V0U2Vjb25kc0xpc3QoaG91cnMsIG1pbnV0ZXMsIHByb3BzLnJvbGUpXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGFycm93Q29udHJvbFRpbWVMaXN0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgeyBob3VycywgbWludXRlcywgc2Vjb25kcyB9ID0gdW5yZWYodGltZVBhcnRpYWxzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhvdXJzOiBidWlsZFRpbWVMaXN0KGhvdXJzLCAyMyksXG4gICAgICAgIG1pbnV0ZXM6IGJ1aWxkVGltZUxpc3QobWludXRlcywgNTkpLFxuICAgICAgICBzZWNvbmRzOiBidWlsZFRpbWVMaXN0KHNlY29uZHMsIDU5KVxuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBkZWJvdW5jZWRSZXNldFNjcm9sbCA9IGRlYm91bmNlKCh0eXBlKSA9PiB7XG4gICAgICBpc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgYWRqdXN0Q3VycmVudFNwaW5uZXIodHlwZSk7XG4gICAgfSwgMjAwKTtcbiAgICBjb25zdCBnZXRBbVBtRmxhZyA9IChob3VyKSA9PiB7XG4gICAgICBjb25zdCBzaG91bGRTaG93QW1QbSA9ICEhcHJvcHMuYW1QbU1vZGU7XG4gICAgICBpZiAoIXNob3VsZFNob3dBbVBtKVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIGNvbnN0IGlzQ2FwaXRhbCA9IHByb3BzLmFtUG1Nb2RlID09PSBcIkFcIjtcbiAgICAgIGxldCBjb250ZW50ID0gaG91ciA8IDEyID8gXCIgYW1cIiA6IFwiIHBtXCI7XG4gICAgICBpZiAoaXNDYXBpdGFsKVxuICAgICAgICBjb250ZW50ID0gY29udGVudC50b1VwcGVyQ2FzZSgpO1xuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfTtcbiAgICBjb25zdCBlbWl0U2VsZWN0UmFuZ2UgPSAodHlwZSkgPT4ge1xuICAgICAgbGV0IHJhbmdlO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJob3Vyc1wiOlxuICAgICAgICAgIHJhbmdlID0gWzAsIDJdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWludXRlc1wiOlxuICAgICAgICAgIHJhbmdlID0gWzMsIDVdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic2Vjb25kc1wiOlxuICAgICAgICAgIHJhbmdlID0gWzYsIDhdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3QgW2xlZnQsIHJpZ2h0XSA9IHJhbmdlO1xuICAgICAgZW1pdChcInNlbGVjdC1yYW5nZVwiLCBsZWZ0LCByaWdodCk7XG4gICAgICBjdXJyZW50U2Nyb2xsYmFyLnZhbHVlID0gdHlwZTtcbiAgICB9O1xuICAgIGNvbnN0IGFkanVzdEN1cnJlbnRTcGlubmVyID0gKHR5cGUpID0+IHtcbiAgICAgIGFkanVzdFNwaW5uZXIodHlwZSwgdW5yZWYodGltZVBhcnRpYWxzKVt0eXBlXSk7XG4gICAgfTtcbiAgICBjb25zdCBhZGp1c3RTcGlubmVycyA9ICgpID0+IHtcbiAgICAgIGFkanVzdEN1cnJlbnRTcGlubmVyKFwiaG91cnNcIik7XG4gICAgICBhZGp1c3RDdXJyZW50U3Bpbm5lcihcIm1pbnV0ZXNcIik7XG4gICAgICBhZGp1c3RDdXJyZW50U3Bpbm5lcihcInNlY29uZHNcIik7XG4gICAgfTtcbiAgICBjb25zdCBnZXRTY3JvbGxiYXJFbGVtZW50ID0gKGVsKSA9PiBlbC5xdWVyeVNlbGVjdG9yKGAuJHtucy5uYW1lc3BhY2UudmFsdWV9LXNjcm9sbGJhcl9fd3JhcGApO1xuICAgIGNvbnN0IGFkanVzdFNwaW5uZXIgPSAodHlwZSwgdmFsdWUpID0+IHtcbiAgICAgIGlmIChwcm9wcy5hcnJvd0NvbnRyb2wpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHNjcm9sbGJhciA9IHVucmVmKGxpc3RSZWZzTWFwW3R5cGVdKTtcbiAgICAgIGlmIChzY3JvbGxiYXIgJiYgc2Nyb2xsYmFyLiRlbCkge1xuICAgICAgICBnZXRTY3JvbGxiYXJFbGVtZW50KHNjcm9sbGJhci4kZWwpLnNjcm9sbFRvcCA9IE1hdGgubWF4KDAsIHZhbHVlICogdHlwZUl0ZW1IZWlnaHQodHlwZSkpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdHlwZUl0ZW1IZWlnaHQgPSAodHlwZSkgPT4ge1xuICAgICAgY29uc3Qgc2Nyb2xsYmFyID0gdW5yZWYobGlzdFJlZnNNYXBbdHlwZV0pO1xuICAgICAgcmV0dXJuIChzY3JvbGxiYXIgPT0gbnVsbCA/IHZvaWQgMCA6IHNjcm9sbGJhci4kZWwucXVlcnlTZWxlY3RvcihcImxpXCIpLm9mZnNldEhlaWdodCkgfHwgMDtcbiAgICB9O1xuICAgIGNvbnN0IG9uSW5jcmVtZW50ID0gKCkgPT4ge1xuICAgICAgc2Nyb2xsRG93bigxKTtcbiAgICB9O1xuICAgIGNvbnN0IG9uRGVjcmVtZW50ID0gKCkgPT4ge1xuICAgICAgc2Nyb2xsRG93bigtMSk7XG4gICAgfTtcbiAgICBjb25zdCBzY3JvbGxEb3duID0gKHN0ZXApID0+IHtcbiAgICAgIGlmICghY3VycmVudFNjcm9sbGJhci52YWx1ZSkge1xuICAgICAgICBlbWl0U2VsZWN0UmFuZ2UoXCJob3Vyc1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxhYmVsID0gY3VycmVudFNjcm9sbGJhci52YWx1ZTtcbiAgICAgIGNvbnN0IG5vdyA9IHVucmVmKHRpbWVQYXJ0aWFscylbbGFiZWxdO1xuICAgICAgY29uc3QgdG90YWwgPSBjdXJyZW50U2Nyb2xsYmFyLnZhbHVlID09PSBcImhvdXJzXCIgPyAyNCA6IDYwO1xuICAgICAgY29uc3QgbmV4dCA9IGZpbmROZXh0VW5EaXNhYmxlZChsYWJlbCwgbm93LCBzdGVwLCB0b3RhbCk7XG4gICAgICBtb2RpZnlEYXRlRmllbGQobGFiZWwsIG5leHQpO1xuICAgICAgYWRqdXN0U3Bpbm5lcihsYWJlbCwgbmV4dCk7XG4gICAgICBuZXh0VGljaygoKSA9PiBlbWl0U2VsZWN0UmFuZ2UobGFiZWwpKTtcbiAgICB9O1xuICAgIGNvbnN0IGZpbmROZXh0VW5EaXNhYmxlZCA9ICh0eXBlLCBub3csIHN0ZXAsIHRvdGFsKSA9PiB7XG4gICAgICBsZXQgbmV4dCA9IChub3cgKyBzdGVwICsgdG90YWwpICUgdG90YWw7XG4gICAgICBjb25zdCBsaXN0ID0gdW5yZWYodGltZUxpc3QpW3R5cGVdO1xuICAgICAgd2hpbGUgKGxpc3RbbmV4dF0gJiYgbmV4dCAhPT0gbm93KSB7XG4gICAgICAgIG5leHQgPSAobmV4dCArIHN0ZXAgKyB0b3RhbCkgJSB0b3RhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gICAgY29uc3QgbW9kaWZ5RGF0ZUZpZWxkID0gKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBsaXN0ID0gdW5yZWYodGltZUxpc3QpW3R5cGVdO1xuICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IGxpc3RbdmFsdWVdO1xuICAgICAgaWYgKGlzRGlzYWJsZWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMgfSA9IHVucmVmKHRpbWVQYXJ0aWFscyk7XG4gICAgICBsZXQgY2hhbmdlVG87XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImhvdXJzXCI6XG4gICAgICAgICAgY2hhbmdlVG8gPSBwcm9wcy5zcGlubmVyRGF0ZS5ob3VyKHZhbHVlKS5taW51dGUobWludXRlcykuc2Vjb25kKHNlY29uZHMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWludXRlc1wiOlxuICAgICAgICAgIGNoYW5nZVRvID0gcHJvcHMuc3Bpbm5lckRhdGUuaG91cihob3VycykubWludXRlKHZhbHVlKS5zZWNvbmQoc2Vjb25kcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzZWNvbmRzXCI6XG4gICAgICAgICAgY2hhbmdlVG8gPSBwcm9wcy5zcGlubmVyRGF0ZS5ob3VyKGhvdXJzKS5taW51dGUobWludXRlcykuc2Vjb25kKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGVtaXQoXCJjaGFuZ2VcIiwgY2hhbmdlVG8pO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSAodHlwZSwgeyB2YWx1ZSwgZGlzYWJsZWQgfSkgPT4ge1xuICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICBtb2RpZnlEYXRlRmllbGQodHlwZSwgdmFsdWUpO1xuICAgICAgICBlbWl0U2VsZWN0UmFuZ2UodHlwZSk7XG4gICAgICAgIGFkanVzdFNwaW5uZXIodHlwZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlU2Nyb2xsID0gKHR5cGUpID0+IHtcbiAgICAgIGlzU2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgIGRlYm91bmNlZFJlc2V0U2Nyb2xsKHR5cGUpO1xuICAgICAgY29uc3QgdmFsdWUgPSBNYXRoLm1pbihNYXRoLnJvdW5kKChnZXRTY3JvbGxiYXJFbGVtZW50KHVucmVmKGxpc3RSZWZzTWFwW3R5cGVdKS4kZWwpLnNjcm9sbFRvcCAtIChzY3JvbGxCYXJIZWlnaHQodHlwZSkgKiAwLjUgLSAxMCkgLyB0eXBlSXRlbUhlaWdodCh0eXBlKSArIDMpIC8gdHlwZUl0ZW1IZWlnaHQodHlwZSkpLCB0eXBlID09PSBcImhvdXJzXCIgPyAyMyA6IDU5KTtcbiAgICAgIG1vZGlmeURhdGVGaWVsZCh0eXBlLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBjb25zdCBzY3JvbGxCYXJIZWlnaHQgPSAodHlwZSkgPT4ge1xuICAgICAgcmV0dXJuIHVucmVmKGxpc3RSZWZzTWFwW3R5cGVdKS4kZWwub2Zmc2V0SGVpZ2h0O1xuICAgIH07XG4gICAgY29uc3QgYmluZFNjcm9sbEV2ZW50ID0gKCkgPT4ge1xuICAgICAgY29uc3QgYmluZEZ1bmN0aW9uID0gKHR5cGUpID0+IHtcbiAgICAgICAgY29uc3Qgc2Nyb2xsYmFyID0gdW5yZWYobGlzdFJlZnNNYXBbdHlwZV0pO1xuICAgICAgICBpZiAoc2Nyb2xsYmFyICYmIHNjcm9sbGJhci4kZWwpIHtcbiAgICAgICAgICBnZXRTY3JvbGxiYXJFbGVtZW50KHNjcm9sbGJhci4kZWwpLm9uc2Nyb2xsID0gKCkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlU2Nyb2xsKHR5cGUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBiaW5kRnVuY3Rpb24oXCJob3Vyc1wiKTtcbiAgICAgIGJpbmRGdW5jdGlvbihcIm1pbnV0ZXNcIik7XG4gICAgICBiaW5kRnVuY3Rpb24oXCJzZWNvbmRzXCIpO1xuICAgIH07XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgIXByb3BzLmFycm93Q29udHJvbCAmJiBiaW5kU2Nyb2xsRXZlbnQoKTtcbiAgICAgICAgYWRqdXN0U3Bpbm5lcnMoKTtcbiAgICAgICAgaWYgKHByb3BzLnJvbGUgPT09IFwic3RhcnRcIilcbiAgICAgICAgICBlbWl0U2VsZWN0UmFuZ2UoXCJob3Vyc1wiKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHNldFJlZiA9IChzY3JvbGxiYXIsIHR5cGUpID0+IHtcbiAgICAgIGxpc3RSZWZzTWFwW3R5cGVdLnZhbHVlID0gc2Nyb2xsYmFyO1xuICAgIH07XG4gICAgZW1pdChcInNldC1vcHRpb25cIiwgW2Ake3Byb3BzLnJvbGV9X3Njcm9sbERvd25gLCBzY3JvbGxEb3duXSk7XG4gICAgZW1pdChcInNldC1vcHRpb25cIiwgW2Ake3Byb3BzLnJvbGV9X2VtaXRTZWxlY3RSYW5nZWAsIGVtaXRTZWxlY3RSYW5nZV0pO1xuICAgIHdhdGNoKCgpID0+IHByb3BzLnNwaW5uZXJEYXRlLCAoKSA9PiB7XG4gICAgICBpZiAoaXNTY3JvbGxpbmcpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGFkanVzdFNwaW5uZXJzKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIChfY3R4LCBfY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihucykuYihcInNwaW5uZXJcIiksIHsgXCJoYXMtc2Vjb25kc1wiOiBfY3R4LnNob3dTZWNvbmRzIH1dKVxuICAgICAgfSwgW1xuICAgICAgICAhX2N0eC5hcnJvd0NvbnRyb2wgPyAob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIHsga2V5OiAwIH0sIHJlbmRlckxpc3QodW5yZWYoc3Bpbm5lckl0ZW1zKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKEVsU2Nyb2xsYmFyKSwge1xuICAgICAgICAgICAga2V5OiBpdGVtLFxuICAgICAgICAgICAgcmVmX2ZvcjogdHJ1ZSxcbiAgICAgICAgICAgIHJlZjogKHNjcm9sbGJhcikgPT4gc2V0UmVmKHNjcm9sbGJhciwgaXRlbSksXG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmJlKFwic3Bpbm5lclwiLCBcIndyYXBwZXJcIikpLFxuICAgICAgICAgICAgXCJ3cmFwLXN0eWxlXCI6IFwibWF4LWhlaWdodDogaW5oZXJpdDtcIixcbiAgICAgICAgICAgIFwidmlldy1jbGFzc1wiOiB1bnJlZihucykuYmUoXCJzcGlubmVyXCIsIFwibGlzdFwiKSxcbiAgICAgICAgICAgIG5vcmVzaXplOiBcIlwiLFxuICAgICAgICAgICAgdGFnOiBcInVsXCIsXG4gICAgICAgICAgICBvbk1vdXNlZW50ZXI6ICgkZXZlbnQpID0+IGVtaXRTZWxlY3RSYW5nZShpdGVtKSxcbiAgICAgICAgICAgIG9uTW91c2Vtb3ZlOiAoJGV2ZW50KSA9PiBhZGp1c3RDdXJyZW50U3Bpbm5lcihpdGVtKVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIG51bGwsIHJlbmRlckxpc3QodW5yZWYodGltZUxpc3QpW2l0ZW1dLCAoZGlzYWJsZWQsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwibGlcIiwge1xuICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcbiAgICAgICAgICAgICAgICAgICAgdW5yZWYobnMpLmJlKFwic3Bpbm5lclwiLCBcIml0ZW1cIiksXG4gICAgICAgICAgICAgICAgICAgIHVucmVmKG5zKS5pcyhcImFjdGl2ZVwiLCBrZXkgPT09IHVucmVmKHRpbWVQYXJ0aWFscylbaXRlbV0pLFxuICAgICAgICAgICAgICAgICAgICB1bnJlZihucykuaXMoXCJkaXNhYmxlZFwiLCBkaXNhYmxlZClcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgb25DbGljazogKCRldmVudCkgPT4gaGFuZGxlQ2xpY2soaXRlbSwgeyB2YWx1ZToga2V5LCBkaXNhYmxlZCB9KVxuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgIGl0ZW0gPT09IFwiaG91cnNcIiA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCB7IGtleTogMCB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVRleHRWTm9kZSh0b0Rpc3BsYXlTdHJpbmcoKFwiMFwiICsgKF9jdHguYW1QbU1vZGUgPyBrZXkgJSAxMiB8fCAxMiA6IGtleSkpLnNsaWNlKC0yKSkgKyB0b0Rpc3BsYXlTdHJpbmcoZ2V0QW1QbUZsYWcoa2V5KSksIDEpXG4gICAgICAgICAgICAgICAgICBdLCA2NCkpIDogKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIHsga2V5OiAxIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlVGV4dFZOb2RlKHRvRGlzcGxheVN0cmluZygoXCIwXCIgKyBrZXkpLnNsaWNlKC0yKSksIDEpXG4gICAgICAgICAgICAgICAgICBdLCA2NCkpXG4gICAgICAgICAgICAgICAgXSwgMTAsIF9ob2lzdGVkXzEpO1xuICAgICAgICAgICAgICB9KSwgMTI4KSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMlxuICAgICAgICAgIH0sIDEwMzIsIFtcImNsYXNzXCIsIFwidmlldy1jbGFzc1wiLCBcIm9uTW91c2VlbnRlclwiLCBcIm9uTW91c2Vtb3ZlXCJdKTtcbiAgICAgICAgfSksIDEyOCkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgX2N0eC5hcnJvd0NvbnRyb2wgPyAob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIHsga2V5OiAxIH0sIHJlbmRlckxpc3QodW5yZWYoc3Bpbm5lckl0ZW1zKSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IGl0ZW0sXG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW3VucmVmKG5zKS5iZShcInNwaW5uZXJcIiwgXCJ3cmFwcGVyXCIpLCB1bnJlZihucykuaXMoXCJhcnJvd1wiKV0pLFxuICAgICAgICAgICAgb25Nb3VzZWVudGVyOiAoJGV2ZW50KSA9PiBlbWl0U2VsZWN0UmFuZ2UoaXRlbSlcbiAgICAgICAgICB9LCBbXG4gICAgICAgICAgICB3aXRoRGlyZWN0aXZlcygob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKEVsSWNvbiksIHtcbiAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcImFycm93LXVwXCIsIHVucmVmKG5zKS5iZShcInNwaW5uZXJcIiwgXCJhcnJvd1wiKV0pXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEFycm93VXApKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgfSwgOCwgW1wiY2xhc3NcIl0pKSwgW1xuICAgICAgICAgICAgICBbdW5yZWYodlJlcGVhdENsaWNrKSwgb25EZWNyZW1lbnRdXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIHdpdGhEaXJlY3RpdmVzKChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2sodW5yZWYoRWxJY29uKSwge1xuICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1wiYXJyb3ctZG93blwiLCB1bnJlZihucykuYmUoXCJzcGlubmVyXCIsIFwiYXJyb3dcIildKVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihBcnJvd0Rvd24pKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgfSwgOCwgW1wiY2xhc3NcIl0pKSwgW1xuICAgICAgICAgICAgICBbdW5yZWYodlJlcGVhdENsaWNrKSwgb25JbmNyZW1lbnRdXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInVsXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKG5zKS5iZShcInNwaW5uZXJcIiwgXCJsaXN0XCIpKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIG51bGwsIHJlbmRlckxpc3QodW5yZWYoYXJyb3dDb250cm9sVGltZUxpc3QpW2l0ZW1dLCAodGltZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJsaVwiLCB7XG4gICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1xuICAgICAgICAgICAgICAgICAgICB1bnJlZihucykuYmUoXCJzcGlubmVyXCIsIFwiaXRlbVwiKSxcbiAgICAgICAgICAgICAgICAgICAgdW5yZWYobnMpLmlzKFwiYWN0aXZlXCIsIHRpbWUgPT09IHVucmVmKHRpbWVQYXJ0aWFscylbaXRlbV0pLFxuICAgICAgICAgICAgICAgICAgICB1bnJlZihucykuaXMoXCJkaXNhYmxlZFwiLCB1bnJlZih0aW1lTGlzdClbaXRlbV1bdGltZV0pXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aW1lID09PSBcIm51bWJlclwiID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIHsga2V5OiAwIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9PT0gXCJob3Vyc1wiID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIHsga2V5OiAwIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVUZXh0Vk5vZGUodG9EaXNwbGF5U3RyaW5nKChcIjBcIiArIChfY3R4LmFtUG1Nb2RlID8gdGltZSAlIDEyIHx8IDEyIDogdGltZSkpLnNsaWNlKC0yKSkgKyB0b0Rpc3BsYXlTdHJpbmcoZ2V0QW1QbUZsYWcodGltZSkpLCAxKVxuICAgICAgICAgICAgICAgICAgICBdLCA2NCkpIDogKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIHsga2V5OiAxIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVUZXh0Vk5vZGUodG9EaXNwbGF5U3RyaW5nKChcIjBcIiArIHRpbWUpLnNsaWNlKC0yKSksIDEpXG4gICAgICAgICAgICAgICAgICAgIF0sIDY0KSlcbiAgICAgICAgICAgICAgICAgIF0sIDY0KSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgXSwgMik7XG4gICAgICAgICAgICAgIH0pLCAxMjgpKVxuICAgICAgICAgICAgXSwgMilcbiAgICAgICAgICBdLCA0MiwgX2hvaXN0ZWRfMik7XG4gICAgICAgIH0pLCAxMjgpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgIF0sIDIpO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIFRpbWVTcGlubmVyID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy90aW1lLXBpY2tlci9zcmMvdGltZS1waWNrZXItY29tL2Jhc2ljLXRpbWUtc3Bpbm5lci52dWVcIl1dKTtcblxuZXhwb3J0IHsgVGltZVNwaW5uZXIgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzaWMtdGltZS1zcGlubmVyLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaW5qZWN0LCByZWYsIGNvbXB1dGVkLCBvcGVuQmxvY2ssIGNyZWF0ZUJsb2NrLCBUcmFuc2l0aW9uLCB1bnJlZiwgd2l0aEN0eCwgY3JlYXRlRWxlbWVudEJsb2NrLCBub3JtYWxpemVDbGFzcywgY3JlYXRlRWxlbWVudFZOb2RlLCBjcmVhdGVWTm9kZSwgdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVDb21tZW50Vk5vZGUgfSBmcm9tICd2dWUnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vY29uc3RhbnRzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBwYW5lbFRpbWVQaWNrZXJQcm9wcyB9IGZyb20gJy4uL3Byb3BzL3BhbmVsLXRpbWUtcGlja2VyLm1qcyc7XG5pbXBvcnQgeyB1c2VUaW1lUGFuZWwgfSBmcm9tICcuLi9jb21wb3NhYmxlcy91c2UtdGltZS1wYW5lbC5tanMnO1xuaW1wb3J0IHsgYnVpbGRBdmFpbGFibGVUaW1lU2xvdEdldHRlciwgdXNlT2xkVmFsdWUgfSBmcm9tICcuLi9jb21wb3NhYmxlcy91c2UtdGltZS1waWNrZXIubWpzJztcbmltcG9ydCBUaW1lU3Bpbm5lciBmcm9tICcuL2Jhc2ljLXRpbWUtc3Bpbm5lci5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLWxvY2FsZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy90eXBlcy5tanMnO1xuaW1wb3J0IHsgRVZFTlRfQ09ERSB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnN0YW50cy9hcmlhLm1qcyc7XG5cbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICBfX25hbWU6IFwicGFuZWwtdGltZS1waWNrXCIsXG4gIHByb3BzOiBwYW5lbFRpbWVQaWNrZXJQcm9wcyxcbiAgZW1pdHM6IFtcInBpY2tcIiwgXCJzZWxlY3QtcmFuZ2VcIiwgXCJzZXQtcGlja2VyLW9wdGlvblwiXSxcbiAgc2V0dXAoX19wcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgcGlja2VyQmFzZSA9IGluamVjdChcIkVQX1BJQ0tFUl9CQVNFXCIpO1xuICAgIGNvbnN0IHtcbiAgICAgIGFycm93Q29udHJvbCxcbiAgICAgIGRpc2FibGVkSG91cnMsXG4gICAgICBkaXNhYmxlZE1pbnV0ZXMsXG4gICAgICBkaXNhYmxlZFNlY29uZHMsXG4gICAgICBkZWZhdWx0VmFsdWVcbiAgICB9ID0gcGlja2VyQmFzZS5wcm9wcztcbiAgICBjb25zdCB7IGdldEF2YWlsYWJsZUhvdXJzLCBnZXRBdmFpbGFibGVNaW51dGVzLCBnZXRBdmFpbGFibGVTZWNvbmRzIH0gPSBidWlsZEF2YWlsYWJsZVRpbWVTbG90R2V0dGVyKGRpc2FibGVkSG91cnMsIGRpc2FibGVkTWludXRlcywgZGlzYWJsZWRTZWNvbmRzKTtcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInRpbWVcIik7XG4gICAgY29uc3QgeyB0LCBsYW5nIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCBzZWxlY3Rpb25SYW5nZSA9IHJlZihbMCwgMl0pO1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdXNlT2xkVmFsdWUocHJvcHMpO1xuICAgIGNvbnN0IHRyYW5zaXRpb25OYW1lID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGlzVW5kZWZpbmVkKHByb3BzLmFjdHVhbFZpc2libGUpID8gYCR7bnMubmFtZXNwYWNlLnZhbHVlfS16b29tLWluLXRvcGAgOiBcIlwiO1xuICAgIH0pO1xuICAgIGNvbnN0IHNob3dTZWNvbmRzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmZvcm1hdC5pbmNsdWRlcyhcInNzXCIpO1xuICAgIH0pO1xuICAgIGNvbnN0IGFtUG1Nb2RlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmZvcm1hdC5pbmNsdWRlcyhcIkFcIikpXG4gICAgICAgIHJldHVybiBcIkFcIjtcbiAgICAgIGlmIChwcm9wcy5mb3JtYXQuaW5jbHVkZXMoXCJhXCIpKVxuICAgICAgICByZXR1cm4gXCJhXCI7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9KTtcbiAgICBjb25zdCBpc1ZhbGlkVmFsdWUgPSAoX2RhdGUpID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlZERhdGUgPSBkYXlqcyhfZGF0ZSkubG9jYWxlKGxhbmcudmFsdWUpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0UmFuZ2VBdmFpbGFibGVUaW1lKHBhcnNlZERhdGUpO1xuICAgICAgcmV0dXJuIHBhcnNlZERhdGUuaXNTYW1lKHJlc3VsdCk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVDYW5jZWwgPSAoKSA9PiB7XG4gICAgICBlbWl0KFwicGlja1wiLCBvbGRWYWx1ZS52YWx1ZSwgZmFsc2UpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlQ29uZmlybSA9ICh2aXNpYmxlID0gZmFsc2UsIGZpcnN0ID0gZmFsc2UpID0+IHtcbiAgICAgIGlmIChmaXJzdClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZW1pdChcInBpY2tcIiwgcHJvcHMucGFyc2VkVmFsdWUsIHZpc2libGUpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKF9kYXRlKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLnZpc2libGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0UmFuZ2VBdmFpbGFibGVUaW1lKF9kYXRlKS5taWxsaXNlY29uZCgwKTtcbiAgICAgIGVtaXQoXCJwaWNrXCIsIHJlc3VsdCwgdHJ1ZSk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRTZWxlY3Rpb25SYW5nZSA9IChzdGFydCwgZW5kKSA9PiB7XG4gICAgICBlbWl0KFwic2VsZWN0LXJhbmdlXCIsIHN0YXJ0LCBlbmQpO1xuICAgICAgc2VsZWN0aW9uUmFuZ2UudmFsdWUgPSBbc3RhcnQsIGVuZF07XG4gICAgfTtcbiAgICBjb25zdCBjaGFuZ2VTZWxlY3Rpb25SYW5nZSA9IChzdGVwKSA9PiB7XG4gICAgICBjb25zdCBsaXN0ID0gWzAsIDNdLmNvbmNhdChzaG93U2Vjb25kcy52YWx1ZSA/IFs2XSA6IFtdKTtcbiAgICAgIGNvbnN0IG1hcHBpbmcgPSBbXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIl0uY29uY2F0KHNob3dTZWNvbmRzLnZhbHVlID8gW1wic2Vjb25kc1wiXSA6IFtdKTtcbiAgICAgIGNvbnN0IGluZGV4ID0gbGlzdC5pbmRleE9mKHNlbGVjdGlvblJhbmdlLnZhbHVlWzBdKTtcbiAgICAgIGNvbnN0IG5leHQgPSAoaW5kZXggKyBzdGVwICsgbGlzdC5sZW5ndGgpICUgbGlzdC5sZW5ndGg7XG4gICAgICB0aW1lUGlja2VyT3B0aW9uc1tcInN0YXJ0X2VtaXRTZWxlY3RSYW5nZVwiXShtYXBwaW5nW25leHRdKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUtleWRvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGNvZGUgPSBldmVudC5jb2RlO1xuICAgICAgY29uc3QgeyBsZWZ0LCByaWdodCwgdXAsIGRvd24gfSA9IEVWRU5UX0NPREU7XG4gICAgICBpZiAoW2xlZnQsIHJpZ2h0XS5pbmNsdWRlcyhjb2RlKSkge1xuICAgICAgICBjb25zdCBzdGVwID0gY29kZSA9PT0gbGVmdCA/IC0xIDogMTtcbiAgICAgICAgY2hhbmdlU2VsZWN0aW9uUmFuZ2Uoc3RlcCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChbdXAsIGRvd25dLmluY2x1ZGVzKGNvZGUpKSB7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSBjb2RlID09PSB1cCA/IC0xIDogMTtcbiAgICAgICAgdGltZVBpY2tlck9wdGlvbnNbXCJzdGFydF9zY3JvbGxEb3duXCJdKHN0ZXApO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB7IHRpbWVQaWNrZXJPcHRpb25zLCBvblNldE9wdGlvbiwgZ2V0QXZhaWxhYmxlVGltZSB9ID0gdXNlVGltZVBhbmVsKHtcbiAgICAgIGdldEF2YWlsYWJsZUhvdXJzLFxuICAgICAgZ2V0QXZhaWxhYmxlTWludXRlcyxcbiAgICAgIGdldEF2YWlsYWJsZVNlY29uZHNcbiAgICB9KTtcbiAgICBjb25zdCBnZXRSYW5nZUF2YWlsYWJsZVRpbWUgPSAoZGF0ZSkgPT4ge1xuICAgICAgcmV0dXJuIGdldEF2YWlsYWJsZVRpbWUoZGF0ZSwgcHJvcHMuZGF0ZXRpbWVSb2xlIHx8IFwiXCIsIHRydWUpO1xuICAgIH07XG4gICAgY29uc3QgcGFyc2VVc2VySW5wdXQgPSAodmFsdWUpID0+IHtcbiAgICAgIGlmICghdmFsdWUpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIGRheWpzKHZhbHVlLCBwcm9wcy5mb3JtYXQpLmxvY2FsZShsYW5nLnZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGZvcm1hdFRvU3RyaW5nID0gKHZhbHVlKSA9PiB7XG4gICAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB2YWx1ZS5mb3JtYXQocHJvcHMuZm9ybWF0KTtcbiAgICB9O1xuICAgIGNvbnN0IGdldERlZmF1bHRWYWx1ZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiBkYXlqcyhkZWZhdWx0VmFsdWUpLmxvY2FsZShsYW5nLnZhbHVlKTtcbiAgICB9O1xuICAgIGVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLCBbXCJpc1ZhbGlkVmFsdWVcIiwgaXNWYWxpZFZhbHVlXSk7XG4gICAgZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsIFtcImZvcm1hdFRvU3RyaW5nXCIsIGZvcm1hdFRvU3RyaW5nXSk7XG4gICAgZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsIFtcInBhcnNlVXNlcklucHV0XCIsIHBhcnNlVXNlcklucHV0XSk7XG4gICAgZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsIFtcImhhbmRsZUtleWRvd25JbnB1dFwiLCBoYW5kbGVLZXlkb3duXSk7XG4gICAgZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsIFtcImdldFJhbmdlQXZhaWxhYmxlVGltZVwiLCBnZXRSYW5nZUF2YWlsYWJsZVRpbWVdKTtcbiAgICBlbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIiwgW1wiZ2V0RGVmYXVsdFZhbHVlXCIsIGdldERlZmF1bHRWYWx1ZV0pO1xuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKFRyYW5zaXRpb24sIHsgbmFtZTogdW5yZWYodHJhbnNpdGlvbk5hbWUpIH0sIHtcbiAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgX2N0eC5hY3R1YWxWaXNpYmxlIHx8IF9jdHgudmlzaWJsZSA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihucykuYihcInBhbmVsXCIpKVxuICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbdW5yZWYobnMpLmJlKFwicGFuZWxcIiwgXCJjb250ZW50XCIpLCB7IFwiaGFzLXNlY29uZHNcIjogdW5yZWYoc2hvd1NlY29uZHMpIH1dKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICBjcmVhdGVWTm9kZShUaW1lU3Bpbm5lciwge1xuICAgICAgICAgICAgICAgIHJlZjogXCJzcGlubmVyXCIsXG4gICAgICAgICAgICAgICAgcm9sZTogX2N0eC5kYXRldGltZVJvbGUgfHwgXCJzdGFydFwiLFxuICAgICAgICAgICAgICAgIFwiYXJyb3ctY29udHJvbFwiOiB1bnJlZihhcnJvd0NvbnRyb2wpLFxuICAgICAgICAgICAgICAgIFwic2hvdy1zZWNvbmRzXCI6IHVucmVmKHNob3dTZWNvbmRzKSxcbiAgICAgICAgICAgICAgICBcImFtLXBtLW1vZGVcIjogdW5yZWYoYW1QbU1vZGUpLFxuICAgICAgICAgICAgICAgIFwic3Bpbm5lci1kYXRlXCI6IF9jdHgucGFyc2VkVmFsdWUsXG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlZC1ob3Vyc1wiOiB1bnJlZihkaXNhYmxlZEhvdXJzKSxcbiAgICAgICAgICAgICAgICBcImRpc2FibGVkLW1pbnV0ZXNcIjogdW5yZWYoZGlzYWJsZWRNaW51dGVzKSxcbiAgICAgICAgICAgICAgICBcImRpc2FibGVkLXNlY29uZHNcIjogdW5yZWYoZGlzYWJsZWRTZWNvbmRzKSxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgICAgIG9uU2V0T3B0aW9uOiB1bnJlZihvblNldE9wdGlvbiksXG4gICAgICAgICAgICAgICAgb25TZWxlY3RSYW5nZTogc2V0U2VsZWN0aW9uUmFuZ2VcbiAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wicm9sZVwiLCBcImFycm93LWNvbnRyb2xcIiwgXCJzaG93LXNlY29uZHNcIiwgXCJhbS1wbS1tb2RlXCIsIFwic3Bpbm5lci1kYXRlXCIsIFwiZGlzYWJsZWQtaG91cnNcIiwgXCJkaXNhYmxlZC1taW51dGVzXCIsIFwiZGlzYWJsZWQtc2Vjb25kc1wiLCBcIm9uU2V0T3B0aW9uXCJdKVxuICAgICAgICAgICAgXSwgMiksXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmJlKFwicGFuZWxcIiwgXCJmb290ZXJcIikpXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW3VucmVmKG5zKS5iZShcInBhbmVsXCIsIFwiYnRuXCIpLCBcImNhbmNlbFwiXSksXG4gICAgICAgICAgICAgICAgb25DbGljazogaGFuZGxlQ2FuY2VsXG4gICAgICAgICAgICAgIH0sIHRvRGlzcGxheVN0cmluZyh1bnJlZih0KShcImVsLmRhdGVwaWNrZXIuY2FuY2VsXCIpKSwgMyksXG4gICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW3VucmVmKG5zKS5iZShcInBhbmVsXCIsIFwiYnRuXCIpLCBcImNvbmZpcm1cIl0pLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKCRldmVudCkgPT4gaGFuZGxlQ29uZmlybSgpKVxuICAgICAgICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcodW5yZWYodCkoXCJlbC5kYXRlcGlja2VyLmNvbmZpcm1cIikpLCAzKVxuICAgICAgICAgICAgXSwgMilcbiAgICAgICAgICBdLCAyKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgICAgIF0pLFxuICAgICAgICBfOiAxXG4gICAgICB9LCA4LCBbXCJuYW1lXCJdKTtcbiAgICB9O1xuICB9XG59KTtcbnZhciBUaW1lUGlja1BhbmVsID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy90aW1lLXBpY2tlci9zcmMvdGltZS1waWNrZXItY29tL3BhbmVsLXRpbWUtcGljay52dWVcIl1dKTtcblxuZXhwb3J0IHsgVGltZVBpY2tQYW5lbCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYW5lbC10aW1lLXBpY2subWpzLm1hcFxuIiwiIWZ1bmN0aW9uKG4sZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6KG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpufHxzZWxmKS5kYXlqc19wbHVnaW5fbG9jYWxlRGF0YT1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGZ1bmN0aW9uKG4sZSx0KXt2YXIgcj1lLnByb3RvdHlwZSxvPWZ1bmN0aW9uKG4pe3JldHVybiBuJiYobi5pbmRleE9mP246bi5zKX0sdT1mdW5jdGlvbihuLGUsdCxyLHUpe3ZhciBpPW4ubmFtZT9uOm4uJGxvY2FsZSgpLGE9byhpW2VdKSxzPW8oaVt0XSksZj1hfHxzLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuIG4uc2xpY2UoMCxyKX0pKTtpZighdSlyZXR1cm4gZjt2YXIgZD1pLndlZWtTdGFydDtyZXR1cm4gZi5tYXAoKGZ1bmN0aW9uKG4sZSl7cmV0dXJuIGZbKGUrKGR8fDApKSU3XX0pKX0saT1mdW5jdGlvbigpe3JldHVybiB0LkxzW3QubG9jYWxlKCldfSxhPWZ1bmN0aW9uKG4sZSl7cmV0dXJuIG4uZm9ybWF0c1tlXXx8ZnVuY3Rpb24obil7cmV0dXJuIG4ucmVwbGFjZSgvKFxcW1teXFxdXStdKXwoTU1NTXxNTXxERHxkZGRkKS9nLChmdW5jdGlvbihuLGUsdCl7cmV0dXJuIGV8fHQuc2xpY2UoMSl9KSl9KG4uZm9ybWF0c1tlLnRvVXBwZXJDYXNlKCldKX0scz1mdW5jdGlvbigpe3ZhciBuPXRoaXM7cmV0dXJue21vbnRoczpmdW5jdGlvbihlKXtyZXR1cm4gZT9lLmZvcm1hdChcIk1NTU1cIik6dShuLFwibW9udGhzXCIpfSxtb250aHNTaG9ydDpmdW5jdGlvbihlKXtyZXR1cm4gZT9lLmZvcm1hdChcIk1NTVwiKTp1KG4sXCJtb250aHNTaG9ydFwiLFwibW9udGhzXCIsMyl9LGZpcnN0RGF5T2ZXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuIG4uJGxvY2FsZSgpLndlZWtTdGFydHx8MH0sd2Vla2RheXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/ZS5mb3JtYXQoXCJkZGRkXCIpOnUobixcIndlZWtkYXlzXCIpfSx3ZWVrZGF5c01pbjpmdW5jdGlvbihlKXtyZXR1cm4gZT9lLmZvcm1hdChcImRkXCIpOnUobixcIndlZWtkYXlzTWluXCIsXCJ3ZWVrZGF5c1wiLDIpfSx3ZWVrZGF5c1Nob3J0OmZ1bmN0aW9uKGUpe3JldHVybiBlP2UuZm9ybWF0KFwiZGRkXCIpOnUobixcIndlZWtkYXlzU2hvcnRcIixcIndlZWtkYXlzXCIsMyl9LGxvbmdEYXRlRm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBhKG4uJGxvY2FsZSgpLGUpfSxtZXJpZGllbTp0aGlzLiRsb2NhbGUoKS5tZXJpZGllbSxvcmRpbmFsOnRoaXMuJGxvY2FsZSgpLm9yZGluYWx9fTtyLmxvY2FsZURhdGE9ZnVuY3Rpb24oKXtyZXR1cm4gcy5iaW5kKHRoaXMpKCl9LHQubG9jYWxlRGF0YT1mdW5jdGlvbigpe3ZhciBuPWkoKTtyZXR1cm57Zmlyc3REYXlPZldlZWs6ZnVuY3Rpb24oKXtyZXR1cm4gbi53ZWVrU3RhcnR8fDB9LHdlZWtkYXlzOmZ1bmN0aW9uKCl7cmV0dXJuIHQud2Vla2RheXMoKX0sd2Vla2RheXNTaG9ydDpmdW5jdGlvbigpe3JldHVybiB0LndlZWtkYXlzU2hvcnQoKX0sd2Vla2RheXNNaW46ZnVuY3Rpb24oKXtyZXR1cm4gdC53ZWVrZGF5c01pbigpfSxtb250aHM6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tb250aHMoKX0sbW9udGhzU2hvcnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tb250aHNTaG9ydCgpfSxsb25nRGF0ZUZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gYShuLGUpfSxtZXJpZGllbTpuLm1lcmlkaWVtLG9yZGluYWw6bi5vcmRpbmFsfX0sdC5tb250aHM9ZnVuY3Rpb24oKXtyZXR1cm4gdShpKCksXCJtb250aHNcIil9LHQubW9udGhzU2hvcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdShpKCksXCJtb250aHNTaG9ydFwiLFwibW9udGhzXCIsMyl9LHQud2Vla2RheXM9ZnVuY3Rpb24obil7cmV0dXJuIHUoaSgpLFwid2Vla2RheXNcIixudWxsLG51bGwsbil9LHQud2Vla2RheXNTaG9ydD1mdW5jdGlvbihuKXtyZXR1cm4gdShpKCksXCJ3ZWVrZGF5c1Nob3J0XCIsXCJ3ZWVrZGF5c1wiLDMsbil9LHQud2Vla2RheXNNaW49ZnVuY3Rpb24obil7cmV0dXJuIHUoaSgpLFwid2Vla2RheXNNaW5cIixcIndlZWtkYXlzXCIsMixuKX19fSkpOyIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOihlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6ZXx8c2VsZikuZGF5anNfcGx1Z2luX2FkdmFuY2VkRm9ybWF0PXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gZnVuY3Rpb24oZSx0KXt2YXIgcj10LnByb3RvdHlwZSxuPXIuZm9ybWF0O3IuZm9ybWF0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10aGlzLiRsb2NhbGUoKTtpZighdGhpcy5pc1ZhbGlkKCkpcmV0dXJuIG4uYmluZCh0aGlzKShlKTt2YXIgcz10aGlzLiR1dGlscygpLGE9KGV8fFwiWVlZWS1NTS1ERFRISDptbTpzc1pcIikucmVwbGFjZSgvXFxbKFteXFxdXSspXXxRfHdvfHd3fHd8V1d8V3x6enp8enxnZ2dnfEdHR0d8RG98WHx4fGt7MSwyfXxTL2csKGZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlXCJRXCI6cmV0dXJuIE1hdGguY2VpbCgodC4kTSsxKS8zKTtjYXNlXCJEb1wiOnJldHVybiByLm9yZGluYWwodC4kRCk7Y2FzZVwiZ2dnZ1wiOnJldHVybiB0LndlZWtZZWFyKCk7Y2FzZVwiR0dHR1wiOnJldHVybiB0Lmlzb1dlZWtZZWFyKCk7Y2FzZVwid29cIjpyZXR1cm4gci5vcmRpbmFsKHQud2VlaygpLFwiV1wiKTtjYXNlXCJ3XCI6Y2FzZVwid3dcIjpyZXR1cm4gcy5zKHQud2VlaygpLFwid1wiPT09ZT8xOjIsXCIwXCIpO2Nhc2VcIldcIjpjYXNlXCJXV1wiOnJldHVybiBzLnModC5pc29XZWVrKCksXCJXXCI9PT1lPzE6MixcIjBcIik7Y2FzZVwia1wiOmNhc2VcImtrXCI6cmV0dXJuIHMucyhTdHJpbmcoMD09PXQuJEg/MjQ6dC4kSCksXCJrXCI9PT1lPzE6MixcIjBcIik7Y2FzZVwiWFwiOnJldHVybiBNYXRoLmZsb29yKHQuJGQuZ2V0VGltZSgpLzFlMyk7Y2FzZVwieFwiOnJldHVybiB0LiRkLmdldFRpbWUoKTtjYXNlXCJ6XCI6cmV0dXJuXCJbXCIrdC5vZmZzZXROYW1lKCkrXCJdXCI7Y2FzZVwienp6XCI6cmV0dXJuXCJbXCIrdC5vZmZzZXROYW1lKFwibG9uZ1wiKStcIl1cIjtkZWZhdWx0OnJldHVybiBlfX0pKTtyZXR1cm4gbi5iaW5kKHRoaXMpKGEpfX19KSk7IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5kYXlqc19wbHVnaW5fd2Vla09mWWVhcj10KCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9XCJ3ZWVrXCIsdD1cInllYXJcIjtyZXR1cm4gZnVuY3Rpb24oaSxuLHIpe3ZhciBmPW4ucHJvdG90eXBlO2Yud2Vlaz1mdW5jdGlvbihpKXtpZih2b2lkIDA9PT1pJiYoaT1udWxsKSxudWxsIT09aSlyZXR1cm4gdGhpcy5hZGQoNyooaS10aGlzLndlZWsoKSksXCJkYXlcIik7dmFyIG49dGhpcy4kbG9jYWxlKCkueWVhclN0YXJ0fHwxO2lmKDExPT09dGhpcy5tb250aCgpJiZ0aGlzLmRhdGUoKT4yNSl7dmFyIGY9cih0aGlzKS5zdGFydE9mKHQpLmFkZCgxLHQpLmRhdGUobikscz1yKHRoaXMpLmVuZE9mKGUpO2lmKGYuaXNCZWZvcmUocykpcmV0dXJuIDF9dmFyIGE9cih0aGlzKS5zdGFydE9mKHQpLmRhdGUobikuc3RhcnRPZihlKS5zdWJ0cmFjdCgxLFwibWlsbGlzZWNvbmRcIiksbz10aGlzLmRpZmYoYSxlLCEwKTtyZXR1cm4gbzwwP3IodGhpcykuc3RhcnRPZihcIndlZWtcIikud2VlaygpOk1hdGguY2VpbChvKX0sZi53ZWVrcz1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9bnVsbCksdGhpcy53ZWVrKGUpfX19KSk7IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5kYXlqc19wbHVnaW5fd2Vla1llYXI9dCgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihlLHQpe3QucHJvdG90eXBlLndlZWtZZWFyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5tb250aCgpLHQ9dGhpcy53ZWVrKCksbj10aGlzLnllYXIoKTtyZXR1cm4gMT09PXQmJjExPT09ZT9uKzE6MD09PWUmJnQ+PTUyP24tMTpufX19KSk7IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5kYXlqc19wbHVnaW5fZGF5T2ZZZWFyPXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gZnVuY3Rpb24oZSx0LG4pe3QucHJvdG90eXBlLmRheU9mWWVhcj1mdW5jdGlvbihlKXt2YXIgdD1NYXRoLnJvdW5kKChuKHRoaXMpLnN0YXJ0T2YoXCJkYXlcIiktbih0aGlzKS5zdGFydE9mKFwieWVhclwiKSkvODY0ZTUpKzE7cmV0dXJuIG51bGw9PWU/dDp0aGlzLmFkZChlLXQsXCJkYXlcIil9fX0pKTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTooZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOmV8fHNlbGYpLmRheWpzX3BsdWdpbl9pc1NhbWVPckFmdGVyPXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gZnVuY3Rpb24oZSx0KXt0LnByb3RvdHlwZS5pc1NhbWVPckFmdGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaXNTYW1lKGUsdCl8fHRoaXMuaXNBZnRlcihlLHQpfX19KSk7IiwiIWZ1bmN0aW9uKGUsaSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9aSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoaSk6KGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5kYXlqc19wbHVnaW5faXNTYW1lT3JCZWZvcmU9aSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihlLGkpe2kucHJvdG90eXBlLmlzU2FtZU9yQmVmb3JlPWZ1bmN0aW9uKGUsaSl7cmV0dXJuIHRoaXMuaXNTYW1lKGUsaSl8fHRoaXMuaXNCZWZvcmUoZSxpKX19fSkpOyIsImNvbnN0IFJPT1RfUElDS0VSX0lOSkVDVElPTl9LRVkgPSBTeW1ib2woKTtcblxuZXhwb3J0IHsgUk9PVF9QSUNLRVJfSU5KRUNUSU9OX0tFWSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMsIGRlZmluZVByb3BUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcblxuY29uc3QgZGF0ZVBpY2tlclByb3BzID0gYnVpbGRQcm9wcyh7XG4gIHR5cGU6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShTdHJpbmcpLFxuICAgIGRlZmF1bHQ6IFwiZGF0ZVwiXG4gIH1cbn0pO1xuXG5leHBvcnQgeyBkYXRlUGlja2VyUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGUtcGlja2VyLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vY29uc3RhbnRzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzLCBkZWZpbmVQcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lLm1qcyc7XG5pbXBvcnQgeyBkYXRlUGlja1R5cGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uc3RhbnRzL2RhdGUubWpzJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHNlbGVjdGlvbk1vZGVzID0gW1wiZGF0ZVwiLCBcImRhdGVzXCIsIFwieWVhclwiLCBcIm1vbnRoXCIsIFwid2Vla1wiLCBcInJhbmdlXCJdO1xuY29uc3QgZGF0ZVBpY2tlclNoYXJlZFByb3BzID0gYnVpbGRQcm9wcyh7XG4gIGRpc2FibGVkRGF0ZToge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKEZ1bmN0aW9uKVxuICB9LFxuICBkYXRlOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoT2JqZWN0KSxcbiAgICByZXF1aXJlZDogdHJ1ZVxuICB9LFxuICBtaW5EYXRlOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoT2JqZWN0KVxuICB9LFxuICBtYXhEYXRlOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoT2JqZWN0KVxuICB9LFxuICBwYXJzZWRWYWx1ZToge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKFtPYmplY3QsIEFycmF5XSlcbiAgfSxcbiAgcmFuZ2VTdGF0ZToge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKE9iamVjdCksXG4gICAgZGVmYXVsdDogKCkgPT4gKHtcbiAgICAgIGVuZERhdGU6IG51bGwsXG4gICAgICBzZWxlY3Rpbmc6IGZhbHNlXG4gICAgfSlcbiAgfVxufSk7XG5jb25zdCBwYW5lbFNoYXJlZFByb3BzID0gYnVpbGRQcm9wcyh7XG4gIHR5cGU6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShTdHJpbmcpLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHZhbHVlczogZGF0ZVBpY2tUeXBlc1xuICB9XG59KTtcbmNvbnN0IHBhbmVsUmFuZ2VTaGFyZWRQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICB1bmxpbmtQYW5lbHM6IEJvb2xlYW4sXG4gIHBhcnNlZFZhbHVlOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoQXJyYXkpXG4gIH1cbn0pO1xuY29uc3Qgc2VsZWN0aW9uTW9kZVdpdGhEZWZhdWx0ID0gKG1vZGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsdWVzOiBzZWxlY3Rpb25Nb2RlcyxcbiAgICBkZWZhdWx0OiBtb2RlXG4gIH07XG59O1xuY29uc3QgcmFuZ2VQaWNrZXJTaGFyZWRFbWl0cyA9IHtcbiAgcGljazogKHJhbmdlKSA9PiBpc0FycmF5KHJhbmdlKVxufTtcblxuZXhwb3J0IHsgZGF0ZVBpY2tlclNoYXJlZFByb3BzLCBwYW5lbFJhbmdlU2hhcmVkUHJvcHMsIHBhbmVsU2hhcmVkUHJvcHMsIHJhbmdlUGlja2VyU2hhcmVkRW1pdHMsIHNlbGVjdGlvbk1vZGVXaXRoRGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVkLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IHBhbmVsU2hhcmVkUHJvcHMgfSBmcm9tICcuL3NoYXJlZC5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuXG5jb25zdCBwYW5lbERhdGVQaWNrUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgLi4ucGFuZWxTaGFyZWRQcm9wcyxcbiAgcGFyc2VkVmFsdWU6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShbT2JqZWN0LCBBcnJheV0pXG4gIH0sXG4gIHZpc2libGU6IHtcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0sXG4gIGZvcm1hdDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcIlwiXG4gIH1cbn0pO1xuXG5leHBvcnQgeyBwYW5lbERhdGVQaWNrUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhbmVsLWRhdGUtcGljay5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBkYXRlUGlja2VyU2hhcmVkUHJvcHMsIHNlbGVjdGlvbk1vZGVXaXRoRGVmYXVsdCB9IGZyb20gJy4vc2hhcmVkLm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzLCBkZWZpbmVQcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lLm1qcyc7XG5cbmNvbnN0IGJhc2ljRGF0ZVRhYmxlUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgLi4uZGF0ZVBpY2tlclNoYXJlZFByb3BzLFxuICBjZWxsQ2xhc3NOYW1lOiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoRnVuY3Rpb24pXG4gIH0sXG4gIHNob3dXZWVrTnVtYmVyOiBCb29sZWFuLFxuICBzZWxlY3Rpb25Nb2RlOiBzZWxlY3Rpb25Nb2RlV2l0aERlZmF1bHQoXCJkYXRlXCIpXG59KTtcblxuZXhwb3J0IHsgYmFzaWNEYXRlVGFibGVQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzaWMtZGF0ZS10YWJsZS5tanMubWFwXG4iLCJpbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnO1xuaW1wb3J0ICcuLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3QgaXNWYWxpZFJhbmdlID0gKHJhbmdlKSA9PiB7XG4gIGlmICghaXNBcnJheShyYW5nZSkpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBbbGVmdCwgcmlnaHRdID0gcmFuZ2U7XG4gIHJldHVybiBkYXlqcy5pc0RheWpzKGxlZnQpICYmIGRheWpzLmlzRGF5anMocmlnaHQpICYmIGxlZnQuaXNTYW1lT3JCZWZvcmUocmlnaHQpO1xufTtcbmNvbnN0IGdldERlZmF1bHRWYWx1ZSA9IChkZWZhdWx0VmFsdWUsIHsgbGFuZywgdW5pdCwgdW5saW5rUGFuZWxzIH0pID0+IHtcbiAgbGV0IHN0YXJ0O1xuICBpZiAoaXNBcnJheShkZWZhdWx0VmFsdWUpKSB7XG4gICAgbGV0IFtsZWZ0LCByaWdodF0gPSBkZWZhdWx0VmFsdWUubWFwKChkKSA9PiBkYXlqcyhkKS5sb2NhbGUobGFuZykpO1xuICAgIGlmICghdW5saW5rUGFuZWxzKSB7XG4gICAgICByaWdodCA9IGxlZnQuYWRkKDEsIHVuaXQpO1xuICAgIH1cbiAgICByZXR1cm4gW2xlZnQsIHJpZ2h0XTtcbiAgfSBlbHNlIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICBzdGFydCA9IGRheWpzKGRlZmF1bHRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBkYXlqcygpO1xuICB9XG4gIHN0YXJ0ID0gc3RhcnQubG9jYWxlKGxhbmcpO1xuICByZXR1cm4gW3N0YXJ0LCBzdGFydC5hZGQoMSwgdW5pdCldO1xufTtcbmNvbnN0IGJ1aWxkUGlja2VyVGFibGUgPSAoZGltZW5zaW9uLCByb3dzLCB7XG4gIGNvbHVtbkluZGV4T2Zmc2V0LFxuICBzdGFydERhdGUsXG4gIG5leHRFbmREYXRlLFxuICBub3csXG4gIHVuaXQsXG4gIHJlbGF0aXZlRGF0ZUdldHRlcixcbiAgc2V0Q2VsbE1ldGFkYXRhLFxuICBzZXRSb3dNZXRhZGF0YVxufSkgPT4ge1xuICBmb3IgKGxldCByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgZGltZW5zaW9uLnJvdzsgcm93SW5kZXgrKykge1xuICAgIGNvbnN0IHJvdyA9IHJvd3Nbcm93SW5kZXhdO1xuICAgIGZvciAobGV0IGNvbHVtbkluZGV4ID0gMDsgY29sdW1uSW5kZXggPCBkaW1lbnNpb24uY29sdW1uOyBjb2x1bW5JbmRleCsrKSB7XG4gICAgICBsZXQgY2VsbCA9IHJvd1tjb2x1bW5JbmRleCArIGNvbHVtbkluZGV4T2Zmc2V0XTtcbiAgICAgIGlmICghY2VsbCkge1xuICAgICAgICBjZWxsID0ge1xuICAgICAgICAgIHJvdzogcm93SW5kZXgsXG4gICAgICAgICAgY29sdW1uOiBjb2x1bW5JbmRleCxcbiAgICAgICAgICB0eXBlOiBcIm5vcm1hbFwiLFxuICAgICAgICAgIGluUmFuZ2U6IGZhbHNlLFxuICAgICAgICAgIHN0YXJ0OiBmYWxzZSxcbiAgICAgICAgICBlbmQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb25zdCBpbmRleCA9IHJvd0luZGV4ICogZGltZW5zaW9uLmNvbHVtbiArIGNvbHVtbkluZGV4O1xuICAgICAgY29uc3QgbmV4dFN0YXJ0RGF0ZSA9IHJlbGF0aXZlRGF0ZUdldHRlcihpbmRleCk7XG4gICAgICBjZWxsLmRheWpzID0gbmV4dFN0YXJ0RGF0ZTtcbiAgICAgIGNlbGwuZGF0ZSA9IG5leHRTdGFydERhdGUudG9EYXRlKCk7XG4gICAgICBjZWxsLnRpbWVzdGFtcCA9IG5leHRTdGFydERhdGUudmFsdWVPZigpO1xuICAgICAgY2VsbC50eXBlID0gXCJub3JtYWxcIjtcbiAgICAgIGNlbGwuaW5SYW5nZSA9ICEhKHN0YXJ0RGF0ZSAmJiBuZXh0U3RhcnREYXRlLmlzU2FtZU9yQWZ0ZXIoc3RhcnREYXRlLCB1bml0KSAmJiBuZXh0RW5kRGF0ZSAmJiBuZXh0U3RhcnREYXRlLmlzU2FtZU9yQmVmb3JlKG5leHRFbmREYXRlLCB1bml0KSkgfHwgISEoc3RhcnREYXRlICYmIG5leHRTdGFydERhdGUuaXNTYW1lT3JCZWZvcmUoc3RhcnREYXRlLCB1bml0KSAmJiBuZXh0RW5kRGF0ZSAmJiBuZXh0U3RhcnREYXRlLmlzU2FtZU9yQWZ0ZXIobmV4dEVuZERhdGUsIHVuaXQpKTtcbiAgICAgIGlmIChzdGFydERhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXJ0RGF0ZS5pc1NhbWVPckFmdGVyKG5leHRFbmREYXRlKSkge1xuICAgICAgICBjZWxsLnN0YXJ0ID0gISFuZXh0RW5kRGF0ZSAmJiBuZXh0U3RhcnREYXRlLmlzU2FtZShuZXh0RW5kRGF0ZSwgdW5pdCk7XG4gICAgICAgIGNlbGwuZW5kID0gc3RhcnREYXRlICYmIG5leHRTdGFydERhdGUuaXNTYW1lKHN0YXJ0RGF0ZSwgdW5pdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjZWxsLnN0YXJ0ID0gISFzdGFydERhdGUgJiYgbmV4dFN0YXJ0RGF0ZS5pc1NhbWUoc3RhcnREYXRlLCB1bml0KTtcbiAgICAgICAgY2VsbC5lbmQgPSAhIW5leHRFbmREYXRlICYmIG5leHRTdGFydERhdGUuaXNTYW1lKG5leHRFbmREYXRlLCB1bml0KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzVG9kYXkgPSBuZXh0U3RhcnREYXRlLmlzU2FtZShub3csIHVuaXQpO1xuICAgICAgaWYgKGlzVG9kYXkpIHtcbiAgICAgICAgY2VsbC50eXBlID0gXCJ0b2RheVwiO1xuICAgICAgfVxuICAgICAgc2V0Q2VsbE1ldGFkYXRhID09IG51bGwgPyB2b2lkIDAgOiBzZXRDZWxsTWV0YWRhdGEoY2VsbCwgeyByb3dJbmRleCwgY29sdW1uSW5kZXggfSk7XG4gICAgICByb3dbY29sdW1uSW5kZXggKyBjb2x1bW5JbmRleE9mZnNldF0gPSBjZWxsO1xuICAgIH1cbiAgICBzZXRSb3dNZXRhZGF0YSA9PSBudWxsID8gdm9pZCAwIDogc2V0Um93TWV0YWRhdGEocm93KTtcbiAgfVxufTtcblxuZXhwb3J0IHsgYnVpbGRQaWNrZXJUYWJsZSwgZ2V0RGVmYXVsdFZhbHVlLCBpc1ZhbGlkUmFuZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMsIGRlZmluZVByb3BUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcblxuY29uc3QgYmFzaWNDZWxsUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgY2VsbDoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKE9iamVjdClcbiAgfVxufSk7XG5cbmV4cG9ydCB7IGJhc2ljQ2VsbFByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNpYy1jZWxsLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaW5qZWN0LCBjcmVhdGVWTm9kZSB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBST09UX1BJQ0tFUl9JTkpFQ1RJT05fS0VZIH0gZnJvbSAnLi4vY29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyBiYXNpY0NlbGxQcm9wcyB9IGZyb20gJy4uL3Byb3BzL2Jhc2ljLWNlbGwubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcblxudmFyIEVsRGF0ZVBpY2tlckNlbGwgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsRGF0ZVBpY2tlckNlbGxcIixcbiAgcHJvcHM6IGJhc2ljQ2VsbFByb3BzLFxuICBzZXR1cChwcm9wcykge1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwiZGF0ZS10YWJsZS1jZWxsXCIpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IGluamVjdChST09UX1BJQ0tFUl9JTkpFQ1RJT05fS0VZKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjZWxsXG4gICAgICB9ID0gcHJvcHM7XG4gICAgICBpZiAoc2xvdHMuZGVmYXVsdCkge1xuICAgICAgICBjb25zdCBsaXN0ID0gc2xvdHMuZGVmYXVsdChjZWxsKS5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5wYXRjaEZsYWcgIT09IC0yICYmIGl0ZW0udHlwZS50b1N0cmluZygpICE9PSBcIlN5bWJvbChDb21tZW50KVwiO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogbnMuYigpXG4gICAgICB9LCBbY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBucy5lKFwidGV4dFwiKVxuICAgICAgfSwgW2NlbGwgPT0gbnVsbCA/IHZvaWQgMCA6IGNlbGwudGV4dF0pXSk7XG4gICAgfTtcbiAgfVxufSk7XG5cbmV4cG9ydCB7IEVsRGF0ZVBpY2tlckNlbGwgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzaWMtY2VsbC1yZW5kZXIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCByZWYsIGNvbXB1dGVkLCB1bnJlZiwgd2F0Y2gsIG5leHRUaWNrLCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIHdpdGhNb2RpZmllcnMsIGNyZWF0ZUVsZW1lbnRWTm9kZSwgdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVDb21tZW50Vk5vZGUsIEZyYWdtZW50LCByZW5kZXJMaXN0LCBjcmVhdGVWTm9kZSB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnO1xuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJ2xvZGFzaC11bmlmaWVkJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGJhc2ljRGF0ZVRhYmxlUHJvcHMgfSBmcm9tICcuLi9wcm9wcy9iYXNpYy1kYXRlLXRhYmxlLm1qcyc7XG5pbXBvcnQgeyBidWlsZFBpY2tlclRhYmxlIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcbmltcG9ydCBFbERhdGVQaWNrZXJDZWxsIGZyb20gJy4vYmFzaWMtY2VsbC1yZW5kZXIubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgubWpzJztcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1sb2NhbGUvaW5kZXgubWpzJztcbmltcG9ydCB7IGNhc3RBcnJheSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2FycmF5cy5tanMnO1xuXG5jb25zdCBfaG9pc3RlZF8xID0gW1wiYXJpYS1sYWJlbFwiLCBcIm9uTW91c2Vkb3duXCJdO1xuY29uc3QgX2hvaXN0ZWRfMiA9IHtcbiAga2V5OiAwLFxuICBzY29wZTogXCJjb2xcIlxufTtcbmNvbnN0IF9ob2lzdGVkXzMgPSBbXCJhcmlhLWxhYmVsXCJdO1xuY29uc3QgX2hvaXN0ZWRfNCA9IFtcImFyaWEtY3VycmVudFwiLCBcImFyaWEtc2VsZWN0ZWRcIiwgXCJ0YWJpbmRleFwiXTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICBfX25hbWU6IFwiYmFzaWMtZGF0ZS10YWJsZVwiLFxuICBwcm9wczogYmFzaWNEYXRlVGFibGVQcm9wcyxcbiAgZW1pdHM6IFtcImNoYW5nZXJhbmdlXCIsIFwicGlja1wiLCBcInNlbGVjdFwiXSxcbiAgc2V0dXAoX19wcm9wcywgeyBleHBvc2UsIGVtaXQgfSkge1xuICAgIGNvbnN0IHByb3BzID0gX19wcm9wcztcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcImRhdGUtdGFibGVcIik7XG4gICAgY29uc3QgeyB0LCBsYW5nIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCB0Ym9keVJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGN1cnJlbnRDZWxsUmVmID0gcmVmKCk7XG4gICAgY29uc3QgbGFzdFJvdyA9IHJlZigpO1xuICAgIGNvbnN0IGxhc3RDb2x1bW4gPSByZWYoKTtcbiAgICBjb25zdCB0YWJsZVJvd3MgPSByZWYoW1tdLCBbXSwgW10sIFtdLCBbXSwgW11dKTtcbiAgICBsZXQgZm9jdXNXaXRoQ2xpY2sgPSBmYWxzZTtcbiAgICBjb25zdCBmaXJzdERheU9mV2VlayA9IHByb3BzLmRhdGUuJGxvY2FsZSgpLndlZWtTdGFydCB8fCA3O1xuICAgIGNvbnN0IFdFRUtTX0NPTlNUQU5UID0gcHJvcHMuZGF0ZS5sb2NhbGUoXCJlblwiKS5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCgpLm1hcCgoXykgPT4gXy50b0xvd2VyQ2FzZSgpKTtcbiAgICBjb25zdCBvZmZzZXREYXkgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gZmlyc3REYXlPZldlZWsgPiAzID8gNyAtIGZpcnN0RGF5T2ZXZWVrIDogLWZpcnN0RGF5T2ZXZWVrO1xuICAgIH0pO1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0RGF5T2ZNb250aCA9IHByb3BzLmRhdGUuc3RhcnRPZihcIm1vbnRoXCIpO1xuICAgICAgcmV0dXJuIHN0YXJ0RGF5T2ZNb250aC5zdWJ0cmFjdChzdGFydERheU9mTW9udGguZGF5KCkgfHwgNywgXCJkYXlcIik7XG4gICAgfSk7XG4gICAgY29uc3QgV0VFS1MgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gV0VFS1NfQ09OU1RBTlQuY29uY2F0KFdFRUtTX0NPTlNUQU5UKS5zbGljZShmaXJzdERheU9mV2VlaywgZmlyc3REYXlPZldlZWsgKyA3KTtcbiAgICB9KTtcbiAgICBjb25zdCBoYXNDdXJyZW50ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGZsYXR0ZW4ocm93cy52YWx1ZSkuc29tZSgocm93KSA9PiB7XG4gICAgICAgIHJldHVybiByb3cuaXNDdXJyZW50O1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY29uc3QgZGF5cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0T2ZNb250aCA9IHByb3BzLmRhdGUuc3RhcnRPZihcIm1vbnRoXCIpO1xuICAgICAgY29uc3Qgc3RhcnRPZk1vbnRoRGF5ID0gc3RhcnRPZk1vbnRoLmRheSgpIHx8IDc7XG4gICAgICBjb25zdCBkYXRlQ291bnRPZk1vbnRoID0gc3RhcnRPZk1vbnRoLmRheXNJbk1vbnRoKCk7XG4gICAgICBjb25zdCBkYXRlQ291bnRPZkxhc3RNb250aCA9IHN0YXJ0T2ZNb250aC5zdWJ0cmFjdCgxLCBcIm1vbnRoXCIpLmRheXNJbk1vbnRoKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydE9mTW9udGhEYXksXG4gICAgICAgIGRhdGVDb3VudE9mTW9udGgsXG4gICAgICAgIGRhdGVDb3VudE9mTGFzdE1vbnRoXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHNlbGVjdGVkRGF0ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5zZWxlY3Rpb25Nb2RlID09PSBcImRhdGVzXCIgPyBjYXN0QXJyYXkocHJvcHMucGFyc2VkVmFsdWUpIDogW107XG4gICAgfSk7XG4gICAgY29uc3Qgc2V0RGF0ZVRleHQgPSAoY2VsbCwge1xuICAgICAgY291bnQsXG4gICAgICByb3dJbmRleCxcbiAgICAgIGNvbHVtbkluZGV4XG4gICAgfSkgPT4ge1xuICAgICAgY29uc3QgeyBzdGFydE9mTW9udGhEYXksIGRhdGVDb3VudE9mTW9udGgsIGRhdGVDb3VudE9mTGFzdE1vbnRoIH0gPSB1bnJlZihkYXlzKTtcbiAgICAgIGNvbnN0IG9mZnNldCA9IHVucmVmKG9mZnNldERheSk7XG4gICAgICBpZiAocm93SW5kZXggPj0gMCAmJiByb3dJbmRleCA8PSAxKSB7XG4gICAgICAgIGNvbnN0IG51bWJlck9mRGF5c0Zyb21QcmV2aW91c01vbnRoID0gc3RhcnRPZk1vbnRoRGF5ICsgb2Zmc2V0IDwgMCA/IDcgKyBzdGFydE9mTW9udGhEYXkgKyBvZmZzZXQgOiBzdGFydE9mTW9udGhEYXkgKyBvZmZzZXQ7XG4gICAgICAgIGlmIChjb2x1bW5JbmRleCArIHJvd0luZGV4ICogNyA+PSBudW1iZXJPZkRheXNGcm9tUHJldmlvdXNNb250aCkge1xuICAgICAgICAgIGNlbGwudGV4dCA9IGNvdW50O1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNlbGwudGV4dCA9IGRhdGVDb3VudE9mTGFzdE1vbnRoIC0gKG51bWJlck9mRGF5c0Zyb21QcmV2aW91c01vbnRoIC0gY29sdW1uSW5kZXggJSA3KSArIDEgKyByb3dJbmRleCAqIDc7XG4gICAgICAgICAgY2VsbC50eXBlID0gXCJwcmV2LW1vbnRoXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb3VudCA8PSBkYXRlQ291bnRPZk1vbnRoKSB7XG4gICAgICAgICAgY2VsbC50ZXh0ID0gY291bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2VsbC50ZXh0ID0gY291bnQgLSBkYXRlQ291bnRPZk1vbnRoO1xuICAgICAgICAgIGNlbGwudHlwZSA9IFwibmV4dC1tb250aFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgY29uc3Qgc2V0Q2VsbE1ldGFkYXRhID0gKGNlbGwsIHtcbiAgICAgIGNvbHVtbkluZGV4LFxuICAgICAgcm93SW5kZXhcbiAgICB9LCBjb3VudCkgPT4ge1xuICAgICAgY29uc3QgeyBkaXNhYmxlZERhdGUsIGNlbGxDbGFzc05hbWUgfSA9IHByb3BzO1xuICAgICAgY29uc3QgX3NlbGVjdGVkRGF0ZSA9IHVucmVmKHNlbGVjdGVkRGF0ZSk7XG4gICAgICBjb25zdCBzaG91bGRJbmNyZW1lbnQgPSBzZXREYXRlVGV4dChjZWxsLCB7IGNvdW50LCByb3dJbmRleCwgY29sdW1uSW5kZXggfSk7XG4gICAgICBjb25zdCBjZWxsRGF0ZSA9IGNlbGwuZGF5anMudG9EYXRlKCk7XG4gICAgICBjZWxsLnNlbGVjdGVkID0gX3NlbGVjdGVkRGF0ZS5maW5kKChkKSA9PiBkLnZhbHVlT2YoKSA9PT0gY2VsbC5kYXlqcy52YWx1ZU9mKCkpO1xuICAgICAgY2VsbC5pc1NlbGVjdGVkID0gISFjZWxsLnNlbGVjdGVkO1xuICAgICAgY2VsbC5pc0N1cnJlbnQgPSBpc0N1cnJlbnQoY2VsbCk7XG4gICAgICBjZWxsLmRpc2FibGVkID0gZGlzYWJsZWREYXRlID09IG51bGwgPyB2b2lkIDAgOiBkaXNhYmxlZERhdGUoY2VsbERhdGUpO1xuICAgICAgY2VsbC5jdXN0b21DbGFzcyA9IGNlbGxDbGFzc05hbWUgPT0gbnVsbCA/IHZvaWQgMCA6IGNlbGxDbGFzc05hbWUoY2VsbERhdGUpO1xuICAgICAgcmV0dXJuIHNob3VsZEluY3JlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IHNldFJvd01ldGFkYXRhID0gKHJvdykgPT4ge1xuICAgICAgaWYgKHByb3BzLnNlbGVjdGlvbk1vZGUgPT09IFwid2Vla1wiKSB7XG4gICAgICAgIGNvbnN0IFtzdGFydCwgZW5kXSA9IHByb3BzLnNob3dXZWVrTnVtYmVyID8gWzEsIDddIDogWzAsIDZdO1xuICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IGlzV2Vla0FjdGl2ZShyb3dbc3RhcnQgKyAxXSk7XG4gICAgICAgIHJvd1tzdGFydF0uaW5SYW5nZSA9IGlzQWN0aXZlO1xuICAgICAgICByb3dbc3RhcnRdLnN0YXJ0ID0gaXNBY3RpdmU7XG4gICAgICAgIHJvd1tlbmRdLmluUmFuZ2UgPSBpc0FjdGl2ZTtcbiAgICAgICAgcm93W2VuZF0uZW5kID0gaXNBY3RpdmU7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByb3dzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgeyBtaW5EYXRlLCBtYXhEYXRlLCByYW5nZVN0YXRlLCBzaG93V2Vla051bWJlciB9ID0gcHJvcHM7XG4gICAgICBjb25zdCBvZmZzZXQgPSBvZmZzZXREYXkudmFsdWU7XG4gICAgICBjb25zdCByb3dzXyA9IHRhYmxlUm93cy52YWx1ZTtcbiAgICAgIGNvbnN0IGRhdGVVbml0ID0gXCJkYXlcIjtcbiAgICAgIGxldCBjb3VudCA9IDE7XG4gICAgICBpZiAoc2hvd1dlZWtOdW1iZXIpIHtcbiAgICAgICAgZm9yIChsZXQgcm93SW5kZXggPSAwOyByb3dJbmRleCA8IDY7IHJvd0luZGV4KyspIHtcbiAgICAgICAgICBpZiAoIXJvd3NfW3Jvd0luZGV4XVswXSkge1xuICAgICAgICAgICAgcm93c19bcm93SW5kZXhdWzBdID0ge1xuICAgICAgICAgICAgICB0eXBlOiBcIndlZWtcIixcbiAgICAgICAgICAgICAgdGV4dDogc3RhcnREYXRlLnZhbHVlLmFkZChyb3dJbmRleCAqIDcgKyAxLCBkYXRlVW5pdCkud2VlaygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnVpbGRQaWNrZXJUYWJsZSh7IHJvdzogNiwgY29sdW1uOiA3IH0sIHJvd3NfLCB7XG4gICAgICAgIHN0YXJ0RGF0ZTogbWluRGF0ZSxcbiAgICAgICAgY29sdW1uSW5kZXhPZmZzZXQ6IHNob3dXZWVrTnVtYmVyID8gMSA6IDAsXG4gICAgICAgIG5leHRFbmREYXRlOiByYW5nZVN0YXRlLmVuZERhdGUgfHwgbWF4RGF0ZSB8fCByYW5nZVN0YXRlLnNlbGVjdGluZyAmJiBtaW5EYXRlIHx8IG51bGwsXG4gICAgICAgIG5vdzogZGF5anMoKS5sb2NhbGUodW5yZWYobGFuZykpLnN0YXJ0T2YoZGF0ZVVuaXQpLFxuICAgICAgICB1bml0OiBkYXRlVW5pdCxcbiAgICAgICAgcmVsYXRpdmVEYXRlR2V0dGVyOiAoaWR4KSA9PiBzdGFydERhdGUudmFsdWUuYWRkKGlkeCAtIG9mZnNldCwgZGF0ZVVuaXQpLFxuICAgICAgICBzZXRDZWxsTWV0YWRhdGE6ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgaWYgKHNldENlbGxNZXRhZGF0YSguLi5hcmdzLCBjb3VudCkpIHtcbiAgICAgICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXRSb3dNZXRhZGF0YVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcm93c187XG4gICAgfSk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuZGF0ZSwgYXN5bmMgKCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIGlmICgoX2EgPSB0Ym9keVJlZi52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICAgIChfYiA9IGN1cnJlbnRDZWxsUmVmLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2IuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBmb2N1cyA9IGFzeW5jICgpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIChfYSA9IGN1cnJlbnRDZWxsUmVmLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICB9O1xuICAgIGNvbnN0IGlzTm9ybWFsRGF5ID0gKHR5cGUgPSBcIlwiKSA9PiB7XG4gICAgICByZXR1cm4gW1wibm9ybWFsXCIsIFwidG9kYXlcIl0uaW5jbHVkZXModHlwZSk7XG4gICAgfTtcbiAgICBjb25zdCBpc0N1cnJlbnQgPSAoY2VsbCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnNlbGVjdGlvbk1vZGUgPT09IFwiZGF0ZVwiICYmIGlzTm9ybWFsRGF5KGNlbGwudHlwZSkgJiYgY2VsbE1hdGNoZXNEYXRlKGNlbGwsIHByb3BzLnBhcnNlZFZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGNlbGxNYXRjaGVzRGF0ZSA9IChjZWxsLCBkYXRlKSA9PiB7XG4gICAgICBpZiAoIWRhdGUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBkYXlqcyhkYXRlKS5sb2NhbGUobGFuZy52YWx1ZSkuaXNTYW1lKHByb3BzLmRhdGUuZGF0ZShOdW1iZXIoY2VsbC50ZXh0KSksIFwiZGF5XCIpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q2VsbENsYXNzZXMgPSAoY2VsbCkgPT4ge1xuICAgICAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICAgICAgaWYgKGlzTm9ybWFsRGF5KGNlbGwudHlwZSkgJiYgIWNlbGwuZGlzYWJsZWQpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFwiYXZhaWxhYmxlXCIpO1xuICAgICAgICBpZiAoY2VsbC50eXBlID09PSBcInRvZGF5XCIpIHtcbiAgICAgICAgICBjbGFzc2VzLnB1c2goXCJ0b2RheVwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKGNlbGwudHlwZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNDdXJyZW50KGNlbGwpKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcImN1cnJlbnRcIik7XG4gICAgICB9XG4gICAgICBpZiAoY2VsbC5pblJhbmdlICYmIChpc05vcm1hbERheShjZWxsLnR5cGUpIHx8IHByb3BzLnNlbGVjdGlvbk1vZGUgPT09IFwid2Vla1wiKSkge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJpbi1yYW5nZVwiKTtcbiAgICAgICAgaWYgKGNlbGwuc3RhcnQpIHtcbiAgICAgICAgICBjbGFzc2VzLnB1c2goXCJzdGFydC1kYXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjZWxsLmVuZCkge1xuICAgICAgICAgIGNsYXNzZXMucHVzaChcImVuZC1kYXRlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2VsbC5kaXNhYmxlZCkge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJkaXNhYmxlZFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChjZWxsLnNlbGVjdGVkKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcInNlbGVjdGVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGNlbGwuY3VzdG9tQ2xhc3MpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKGNlbGwuY3VzdG9tQ2xhc3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsYXNzZXMuam9pbihcIiBcIik7XG4gICAgfTtcbiAgICBjb25zdCBnZXREYXRlT2ZDZWxsID0gKHJvdywgY29sdW1uKSA9PiB7XG4gICAgICBjb25zdCBvZmZzZXRGcm9tU3RhcnQgPSByb3cgKiA3ICsgKGNvbHVtbiAtIChwcm9wcy5zaG93V2Vla051bWJlciA/IDEgOiAwKSkgLSBvZmZzZXREYXkudmFsdWU7XG4gICAgICByZXR1cm4gc3RhcnREYXRlLnZhbHVlLmFkZChvZmZzZXRGcm9tU3RhcnQsIFwiZGF5XCIpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlTW91c2VNb3ZlID0gKGV2ZW50KSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAoIXByb3BzLnJhbmdlU3RhdGUuc2VsZWN0aW5nKVxuICAgICAgICByZXR1cm47XG4gICAgICBsZXQgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldC50YWdOYW1lID09PSBcIlNQQU5cIikge1xuICAgICAgICB0YXJnZXQgPSAoX2EgPSB0YXJnZXQucGFyZW50Tm9kZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgPT09IFwiRElWXCIpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgIT09IFwiVERcIilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3Qgcm93ID0gdGFyZ2V0LnBhcmVudE5vZGUucm93SW5kZXggLSAxO1xuICAgICAgY29uc3QgY29sdW1uID0gdGFyZ2V0LmNlbGxJbmRleDtcbiAgICAgIGlmIChyb3dzLnZhbHVlW3Jvd11bY29sdW1uXS5kaXNhYmxlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHJvdyAhPT0gbGFzdFJvdy52YWx1ZSB8fCBjb2x1bW4gIT09IGxhc3RDb2x1bW4udmFsdWUpIHtcbiAgICAgICAgbGFzdFJvdy52YWx1ZSA9IHJvdztcbiAgICAgICAgbGFzdENvbHVtbi52YWx1ZSA9IGNvbHVtbjtcbiAgICAgICAgZW1pdChcImNoYW5nZXJhbmdlXCIsIHtcbiAgICAgICAgICBzZWxlY3Rpbmc6IHRydWUsXG4gICAgICAgICAgZW5kRGF0ZTogZ2V0RGF0ZU9mQ2VsbChyb3csIGNvbHVtbilcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBpc1NlbGVjdGVkQ2VsbCA9IChjZWxsKSA9PiB7XG4gICAgICByZXR1cm4gIWhhc0N1cnJlbnQudmFsdWUgJiYgKGNlbGwgPT0gbnVsbCA/IHZvaWQgMCA6IGNlbGwudGV4dCkgPT09IDEgJiYgY2VsbC50eXBlID09PSBcIm5vcm1hbFwiIHx8IGNlbGwuaXNDdXJyZW50O1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlRm9jdXMgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChmb2N1c1dpdGhDbGljayB8fCBoYXNDdXJyZW50LnZhbHVlIHx8IHByb3BzLnNlbGVjdGlvbk1vZGUgIT09IFwiZGF0ZVwiKVxuICAgICAgICByZXR1cm47XG4gICAgICBoYW5kbGVQaWNrRGF0ZShldmVudCwgdHJ1ZSk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVNb3VzZURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwidGRcIik7XG4gICAgICBpZiAoIXRhcmdldClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZm9jdXNXaXRoQ2xpY2sgPSB0cnVlO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlTW91c2VVcCA9IChldmVudCkgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCJ0ZFwiKTtcbiAgICAgIGlmICghdGFyZ2V0KVxuICAgICAgICByZXR1cm47XG4gICAgICBmb2N1c1dpdGhDbGljayA9IGZhbHNlO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlUGlja0RhdGUgPSAoZXZlbnQsIGlzS2V5Ym9hcmRNb3ZlbWVudCA9IGZhbHNlKSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQuY2xvc2VzdChcInRkXCIpO1xuICAgICAgaWYgKCF0YXJnZXQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHJvdyA9IHRhcmdldC5wYXJlbnROb2RlLnJvd0luZGV4IC0gMTtcbiAgICAgIGNvbnN0IGNvbHVtbiA9IHRhcmdldC5jZWxsSW5kZXg7XG4gICAgICBjb25zdCBjZWxsID0gcm93cy52YWx1ZVtyb3ddW2NvbHVtbl07XG4gICAgICBpZiAoY2VsbC5kaXNhYmxlZCB8fCBjZWxsLnR5cGUgPT09IFwid2Vla1wiKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBuZXdEYXRlID0gZ2V0RGF0ZU9mQ2VsbChyb3csIGNvbHVtbik7XG4gICAgICBpZiAocHJvcHMuc2VsZWN0aW9uTW9kZSA9PT0gXCJyYW5nZVwiKSB7XG4gICAgICAgIGlmICghcHJvcHMucmFuZ2VTdGF0ZS5zZWxlY3RpbmcgfHwgIXByb3BzLm1pbkRhdGUpIHtcbiAgICAgICAgICBlbWl0KFwicGlja1wiLCB7IG1pbkRhdGU6IG5ld0RhdGUsIG1heERhdGU6IG51bGwgfSk7XG4gICAgICAgICAgZW1pdChcInNlbGVjdFwiLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmV3RGF0ZSA+PSBwcm9wcy5taW5EYXRlKSB7XG4gICAgICAgICAgICBlbWl0KFwicGlja1wiLCB7IG1pbkRhdGU6IHByb3BzLm1pbkRhdGUsIG1heERhdGU6IG5ld0RhdGUgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVtaXQoXCJwaWNrXCIsIHsgbWluRGF0ZTogbmV3RGF0ZSwgbWF4RGF0ZTogcHJvcHMubWluRGF0ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZW1pdChcInNlbGVjdFwiLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuc2VsZWN0aW9uTW9kZSA9PT0gXCJkYXRlXCIpIHtcbiAgICAgICAgZW1pdChcInBpY2tcIiwgbmV3RGF0ZSwgaXNLZXlib2FyZE1vdmVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuc2VsZWN0aW9uTW9kZSA9PT0gXCJ3ZWVrXCIpIHtcbiAgICAgICAgY29uc3Qgd2Vla051bWJlciA9IG5ld0RhdGUud2VlaygpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGAke25ld0RhdGUueWVhcigpfXcke3dlZWtOdW1iZXJ9YDtcbiAgICAgICAgZW1pdChcInBpY2tcIiwge1xuICAgICAgICAgIHllYXI6IG5ld0RhdGUueWVhcigpLFxuICAgICAgICAgIHdlZWs6IHdlZWtOdW1iZXIsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgZGF0ZTogbmV3RGF0ZS5zdGFydE9mKFwid2Vla1wiKVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuc2VsZWN0aW9uTW9kZSA9PT0gXCJkYXRlc1wiKSB7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gY2VsbC5zZWxlY3RlZCA/IGNhc3RBcnJheShwcm9wcy5wYXJzZWRWYWx1ZSkuZmlsdGVyKChkKSA9PiAoZCA9PSBudWxsID8gdm9pZCAwIDogZC52YWx1ZU9mKCkpICE9PSBuZXdEYXRlLnZhbHVlT2YoKSkgOiBjYXN0QXJyYXkocHJvcHMucGFyc2VkVmFsdWUpLmNvbmNhdChbbmV3RGF0ZV0pO1xuICAgICAgICBlbWl0KFwicGlja1wiLCBuZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBpc1dlZWtBY3RpdmUgPSAoY2VsbCkgPT4ge1xuICAgICAgaWYgKHByb3BzLnNlbGVjdGlvbk1vZGUgIT09IFwid2Vla1wiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBsZXQgbmV3RGF0ZSA9IHByb3BzLmRhdGUuc3RhcnRPZihcImRheVwiKTtcbiAgICAgIGlmIChjZWxsLnR5cGUgPT09IFwicHJldi1tb250aFwiKSB7XG4gICAgICAgIG5ld0RhdGUgPSBuZXdEYXRlLnN1YnRyYWN0KDEsIFwibW9udGhcIik7XG4gICAgICB9XG4gICAgICBpZiAoY2VsbC50eXBlID09PSBcIm5leHQtbW9udGhcIikge1xuICAgICAgICBuZXdEYXRlID0gbmV3RGF0ZS5hZGQoMSwgXCJtb250aFwiKTtcbiAgICAgIH1cbiAgICAgIG5ld0RhdGUgPSBuZXdEYXRlLmRhdGUoTnVtYmVyLnBhcnNlSW50KGNlbGwudGV4dCwgMTApKTtcbiAgICAgIGlmIChwcm9wcy5wYXJzZWRWYWx1ZSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcy5wYXJzZWRWYWx1ZSkpIHtcbiAgICAgICAgY29uc3QgZGF5T2Zmc2V0ID0gKHByb3BzLnBhcnNlZFZhbHVlLmRheSgpIC0gZmlyc3REYXlPZldlZWsgKyA3KSAlIDcgLSAxO1xuICAgICAgICBjb25zdCB3ZWVrRGF0ZSA9IHByb3BzLnBhcnNlZFZhbHVlLnN1YnRyYWN0KGRheU9mZnNldCwgXCJkYXlcIik7XG4gICAgICAgIHJldHVybiB3ZWVrRGF0ZS5pc1NhbWUobmV3RGF0ZSwgXCJkYXlcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBleHBvc2Uoe1xuICAgICAgZm9jdXNcbiAgICB9KTtcbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJ0YWJsZVwiLCB7XG4gICAgICAgIHJvbGU6IFwiZ3JpZFwiLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogdW5yZWYodCkoXCJlbC5kYXRlcGlja2VyLmRhdGVUYWJsZVByb21wdFwiKSxcbiAgICAgICAgY2VsbHNwYWNpbmc6IFwiMFwiLFxuICAgICAgICBjZWxscGFkZGluZzogXCIwXCIsXG4gICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbdW5yZWYobnMpLmIoKSwgeyBcImlzLXdlZWstbW9kZVwiOiBfY3R4LnNlbGVjdGlvbk1vZGUgPT09IFwid2Vla1wiIH1dKSxcbiAgICAgICAgb25DbGljazogaGFuZGxlUGlja0RhdGUsXG4gICAgICAgIG9uTW91c2Vtb3ZlOiBoYW5kbGVNb3VzZU1vdmUsXG4gICAgICAgIG9uTW91c2Vkb3duOiB3aXRoTW9kaWZpZXJzKGhhbmRsZU1vdXNlRG93biwgW1wicHJldmVudFwiXSksXG4gICAgICAgIG9uTW91c2V1cDogaGFuZGxlTW91c2VVcFxuICAgICAgfSwgW1xuICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJ0Ym9keVwiLCB7XG4gICAgICAgICAgcmVmX2tleTogXCJ0Ym9keVJlZlwiLFxuICAgICAgICAgIHJlZjogdGJvZHlSZWZcbiAgICAgICAgfSwgW1xuICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInRyXCIsIG51bGwsIFtcbiAgICAgICAgICAgIF9jdHguc2hvd1dlZWtOdW1iZXIgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInRoXCIsIF9ob2lzdGVkXzIsIHRvRGlzcGxheVN0cmluZyh1bnJlZih0KShcImVsLmRhdGVwaWNrZXIud2Vla1wiKSksIDEpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgICAgICAob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIG51bGwsIHJlbmRlckxpc3QodW5yZWYoV0VFS1MpLCAod2Vlaywga2V5KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwidGhcIiwge1xuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBzY29wZTogXCJjb2xcIixcbiAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogdW5yZWYodCkoXCJlbC5kYXRlcGlja2VyLndlZWtzRnVsbC5cIiArIHdlZWspXG4gICAgICAgICAgICAgIH0sIHRvRGlzcGxheVN0cmluZyh1bnJlZih0KShcImVsLmRhdGVwaWNrZXIud2Vla3MuXCIgKyB3ZWVrKSksIDksIF9ob2lzdGVkXzMpO1xuICAgICAgICAgICAgfSksIDEyOCkpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgKG9wZW5CbG9jayh0cnVlKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCBudWxsLCByZW5kZXJMaXN0KHVucmVmKHJvd3MpLCAocm93LCByb3dLZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwidHJcIiwge1xuICAgICAgICAgICAgICBrZXk6IHJvd0tleSxcbiAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihucykuZShcInJvd1wiKSwgeyBjdXJyZW50OiBpc1dlZWtBY3RpdmUocm93WzFdKSB9XSlcbiAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgKG9wZW5CbG9jayh0cnVlKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCBudWxsLCByZW5kZXJMaXN0KHJvdywgKGNlbGwsIGNvbHVtbktleSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwidGRcIiwge1xuICAgICAgICAgICAgICAgICAga2V5OiBgJHtyb3dLZXl9LiR7Y29sdW1uS2V5fWAsXG4gICAgICAgICAgICAgICAgICByZWZfZm9yOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgcmVmOiAoZWwpID0+IGlzU2VsZWN0ZWRDZWxsKGNlbGwpICYmIChjdXJyZW50Q2VsbFJlZi52YWx1ZSA9IGVsKSxcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhnZXRDZWxsQ2xhc3NlcyhjZWxsKSksXG4gICAgICAgICAgICAgICAgICBcImFyaWEtY3VycmVudFwiOiBjZWxsLmlzQ3VycmVudCA/IFwiZGF0ZVwiIDogdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgXCJhcmlhLXNlbGVjdGVkXCI6IGNlbGwuaXNDdXJyZW50LFxuICAgICAgICAgICAgICAgICAgdGFiaW5kZXg6IGlzU2VsZWN0ZWRDZWxsKGNlbGwpID8gMCA6IC0xLFxuICAgICAgICAgICAgICAgICAgb25Gb2N1czogaGFuZGxlRm9jdXNcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbERhdGVQaWNrZXJDZWxsKSwgeyBjZWxsIH0sIG51bGwsIDgsIFtcImNlbGxcIl0pXG4gICAgICAgICAgICAgICAgXSwgNDIsIF9ob2lzdGVkXzQpO1xuICAgICAgICAgICAgICB9KSwgMTI4KSlcbiAgICAgICAgICAgIF0sIDIpO1xuICAgICAgICAgIH0pLCAxMjgpKVxuICAgICAgICBdLCA1MTIpXG4gICAgICBdLCA0MiwgX2hvaXN0ZWRfMSk7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgRGF0ZVRhYmxlID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9zcmMvZGF0ZS1waWNrZXItY29tL2Jhc2ljLWRhdGUtdGFibGUudnVlXCJdXSk7XG5cbmV4cG9ydCB7IERhdGVUYWJsZSBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNpYy1kYXRlLXRhYmxlLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGRhdGVQaWNrZXJTaGFyZWRQcm9wcywgc2VsZWN0aW9uTW9kZVdpdGhEZWZhdWx0IH0gZnJvbSAnLi9zaGFyZWQubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuXG5jb25zdCBiYXNpY01vbnRoVGFibGVQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICAuLi5kYXRlUGlja2VyU2hhcmVkUHJvcHMsXG4gIHNlbGVjdGlvbk1vZGU6IHNlbGVjdGlvbk1vZGVXaXRoRGVmYXVsdChcIm1vbnRoXCIpXG59KTtcblxuZXhwb3J0IHsgYmFzaWNNb250aFRhYmxlUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2ljLW1vbnRoLXRhYmxlLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgcmVmLCBjb21wdXRlZCwgd2F0Y2gsIG5leHRUaWNrLCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgdW5yZWYsIG5vcm1hbGl6ZUNsYXNzLCBjcmVhdGVFbGVtZW50Vk5vZGUsIEZyYWdtZW50LCByZW5kZXJMaXN0LCB3aXRoS2V5cywgd2l0aE1vZGlmaWVycywgdG9EaXNwbGF5U3RyaW5nIH0gZnJvbSAndnVlJztcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL3RpbWUtcGlja2VyL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBiYXNpY01vbnRoVGFibGVQcm9wcyB9IGZyb20gJy4uL3Byb3BzL2Jhc2ljLW1vbnRoLXRhYmxlLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyByYW5nZUFyciB9IGZyb20gJy4uLy4uLy4uL3RpbWUtcGlja2VyL3NyYy91dGlscy5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLWxvY2FsZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgY2FzdEFycmF5IH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvYXJyYXlzLm1qcyc7XG5pbXBvcnQgeyBoYXNDbGFzcyB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2RvbS9zdHlsZS5tanMnO1xuXG5jb25zdCBfaG9pc3RlZF8xID0gW1wiYXJpYS1sYWJlbFwiXTtcbmNvbnN0IF9ob2lzdGVkXzIgPSBbXCJhcmlhLXNlbGVjdGVkXCIsIFwiYXJpYS1sYWJlbFwiLCBcInRhYmluZGV4XCIsIFwib25LZXlkb3duXCJdO1xuY29uc3QgX2hvaXN0ZWRfMyA9IHsgY2xhc3M6IFwiY2VsbFwiIH07XG5jb25zdCBfc2ZjX21haW4gPSAvKiBAX19QVVJFX18gKi8gZGVmaW5lQ29tcG9uZW50KHtcbiAgX19uYW1lOiBcImJhc2ljLW1vbnRoLXRhYmxlXCIsXG4gIHByb3BzOiBiYXNpY01vbnRoVGFibGVQcm9wcyxcbiAgZW1pdHM6IFtcImNoYW5nZXJhbmdlXCIsIFwicGlja1wiLCBcInNlbGVjdFwiXSxcbiAgc2V0dXAoX19wcm9wcywgeyBleHBvc2UsIGVtaXQgfSkge1xuICAgIGNvbnN0IHByb3BzID0gX19wcm9wcztcbiAgICBjb25zdCBkYXRlc0luTW9udGggPSAoeWVhciwgbW9udGgsIGxhbmcyKSA9PiB7XG4gICAgICBjb25zdCBmaXJzdERheSA9IGRheWpzKCkubG9jYWxlKGxhbmcyKS5zdGFydE9mKFwibW9udGhcIikubW9udGgobW9udGgpLnllYXIoeWVhcik7XG4gICAgICBjb25zdCBudW1PZkRheXMgPSBmaXJzdERheS5kYXlzSW5Nb250aCgpO1xuICAgICAgcmV0dXJuIHJhbmdlQXJyKG51bU9mRGF5cykubWFwKChuKSA9PiBmaXJzdERheS5hZGQobiwgXCJkYXlcIikudG9EYXRlKCkpO1xuICAgIH07XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJtb250aC10YWJsZVwiKTtcbiAgICBjb25zdCB7IHQsIGxhbmcgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHRib2R5UmVmID0gcmVmKCk7XG4gICAgY29uc3QgY3VycmVudENlbGxSZWYgPSByZWYoKTtcbiAgICBjb25zdCBtb250aHMgPSByZWYocHJvcHMuZGF0ZS5sb2NhbGUoXCJlblwiKS5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQoKS5tYXAoKF8pID0+IF8udG9Mb3dlckNhc2UoKSkpO1xuICAgIGNvbnN0IHRhYmxlUm93cyA9IHJlZihbXG4gICAgICBbXSxcbiAgICAgIFtdLFxuICAgICAgW11cbiAgICBdKTtcbiAgICBjb25zdCBsYXN0Um93ID0gcmVmKCk7XG4gICAgY29uc3QgbGFzdENvbHVtbiA9IHJlZigpO1xuICAgIGNvbnN0IHJvd3MgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICB2YXIgX2EsIF9iO1xuICAgICAgY29uc3Qgcm93czIgPSB0YWJsZVJvd3MudmFsdWU7XG4gICAgICBjb25zdCBub3cgPSBkYXlqcygpLmxvY2FsZShsYW5nLnZhbHVlKS5zdGFydE9mKFwibW9udGhcIik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICBjb25zdCByb3cgPSByb3dzMltpXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyBqKyspIHtcbiAgICAgICAgICBjb25zdCBjZWxsID0gcm93W2pdIHx8IChyb3dbal0gPSB7XG4gICAgICAgICAgICByb3c6IGksXG4gICAgICAgICAgICBjb2x1bW46IGosXG4gICAgICAgICAgICB0eXBlOiBcIm5vcm1hbFwiLFxuICAgICAgICAgICAgaW5SYW5nZTogZmFsc2UsXG4gICAgICAgICAgICBzdGFydDogZmFsc2UsXG4gICAgICAgICAgICBlbmQ6IGZhbHNlLFxuICAgICAgICAgICAgdGV4dDogLTEsXG4gICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjZWxsLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gaSAqIDQgKyBqO1xuICAgICAgICAgIGNvbnN0IGNhbFRpbWUgPSBwcm9wcy5kYXRlLnN0YXJ0T2YoXCJ5ZWFyXCIpLm1vbnRoKGluZGV4KTtcbiAgICAgICAgICBjb25zdCBjYWxFbmREYXRlID0gcHJvcHMucmFuZ2VTdGF0ZS5lbmREYXRlIHx8IHByb3BzLm1heERhdGUgfHwgcHJvcHMucmFuZ2VTdGF0ZS5zZWxlY3RpbmcgJiYgcHJvcHMubWluRGF0ZSB8fCBudWxsO1xuICAgICAgICAgIGNlbGwuaW5SYW5nZSA9ICEhKHByb3BzLm1pbkRhdGUgJiYgY2FsVGltZS5pc1NhbWVPckFmdGVyKHByb3BzLm1pbkRhdGUsIFwibW9udGhcIikgJiYgY2FsRW5kRGF0ZSAmJiBjYWxUaW1lLmlzU2FtZU9yQmVmb3JlKGNhbEVuZERhdGUsIFwibW9udGhcIikpIHx8ICEhKHByb3BzLm1pbkRhdGUgJiYgY2FsVGltZS5pc1NhbWVPckJlZm9yZShwcm9wcy5taW5EYXRlLCBcIm1vbnRoXCIpICYmIGNhbEVuZERhdGUgJiYgY2FsVGltZS5pc1NhbWVPckFmdGVyKGNhbEVuZERhdGUsIFwibW9udGhcIikpO1xuICAgICAgICAgIGlmICgoX2EgPSBwcm9wcy5taW5EYXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuaXNTYW1lT3JBZnRlcihjYWxFbmREYXRlKSkge1xuICAgICAgICAgICAgY2VsbC5zdGFydCA9ICEhKGNhbEVuZERhdGUgJiYgY2FsVGltZS5pc1NhbWUoY2FsRW5kRGF0ZSwgXCJtb250aFwiKSk7XG4gICAgICAgICAgICBjZWxsLmVuZCA9IHByb3BzLm1pbkRhdGUgJiYgY2FsVGltZS5pc1NhbWUocHJvcHMubWluRGF0ZSwgXCJtb250aFwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2VsbC5zdGFydCA9ICEhKHByb3BzLm1pbkRhdGUgJiYgY2FsVGltZS5pc1NhbWUocHJvcHMubWluRGF0ZSwgXCJtb250aFwiKSk7XG4gICAgICAgICAgICBjZWxsLmVuZCA9ICEhKGNhbEVuZERhdGUgJiYgY2FsVGltZS5pc1NhbWUoY2FsRW5kRGF0ZSwgXCJtb250aFwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGlzVG9kYXkgPSBub3cuaXNTYW1lKGNhbFRpbWUpO1xuICAgICAgICAgIGlmIChpc1RvZGF5KSB7XG4gICAgICAgICAgICBjZWxsLnR5cGUgPSBcInRvZGF5XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNlbGwudGV4dCA9IGluZGV4O1xuICAgICAgICAgIGNlbGwuZGlzYWJsZWQgPSAoKF9iID0gcHJvcHMuZGlzYWJsZWREYXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChwcm9wcywgY2FsVGltZS50b0RhdGUoKSkpIHx8IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcm93czI7XG4gICAgfSk7XG4gICAgY29uc3QgZm9jdXMgPSAoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICAoX2EgPSBjdXJyZW50Q2VsbFJlZi52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRDZWxsU3R5bGUgPSAoY2VsbCkgPT4ge1xuICAgICAgY29uc3Qgc3R5bGUgPSB7fTtcbiAgICAgIGNvbnN0IHllYXIgPSBwcm9wcy5kYXRlLnllYXIoKTtcbiAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IG1vbnRoID0gY2VsbC50ZXh0O1xuICAgICAgc3R5bGUuZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZERhdGUgPyBkYXRlc0luTW9udGgoeWVhciwgbW9udGgsIGxhbmcudmFsdWUpLmV2ZXJ5KHByb3BzLmRpc2FibGVkRGF0ZSkgOiBmYWxzZTtcbiAgICAgIHN0eWxlLmN1cnJlbnQgPSBjYXN0QXJyYXkocHJvcHMucGFyc2VkVmFsdWUpLmZpbmRJbmRleCgoZGF0ZSkgPT4gZGF5anMuaXNEYXlqcyhkYXRlKSAmJiBkYXRlLnllYXIoKSA9PT0geWVhciAmJiBkYXRlLm1vbnRoKCkgPT09IG1vbnRoKSA+PSAwO1xuICAgICAgc3R5bGUudG9kYXkgPSB0b2RheS5nZXRGdWxsWWVhcigpID09PSB5ZWFyICYmIHRvZGF5LmdldE1vbnRoKCkgPT09IG1vbnRoO1xuICAgICAgaWYgKGNlbGwuaW5SYW5nZSkge1xuICAgICAgICBzdHlsZVtcImluLXJhbmdlXCJdID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNlbGwuc3RhcnQpIHtcbiAgICAgICAgICBzdHlsZVtcInN0YXJ0LWRhdGVcIl0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjZWxsLmVuZCkge1xuICAgICAgICAgIHN0eWxlW1wiZW5kLWRhdGVcIl0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfTtcbiAgICBjb25zdCBpc1NlbGVjdGVkQ2VsbCA9IChjZWxsKSA9PiB7XG4gICAgICBjb25zdCB5ZWFyID0gcHJvcHMuZGF0ZS55ZWFyKCk7XG4gICAgICBjb25zdCBtb250aCA9IGNlbGwudGV4dDtcbiAgICAgIHJldHVybiBjYXN0QXJyYXkocHJvcHMuZGF0ZSkuZmluZEluZGV4KChkYXRlKSA9PiBkYXRlLnllYXIoKSA9PT0geWVhciAmJiBkYXRlLm1vbnRoKCkgPT09IG1vbnRoKSA+PSAwO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlTW91c2VNb3ZlID0gKGV2ZW50KSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAoIXByb3BzLnJhbmdlU3RhdGUuc2VsZWN0aW5nKVxuICAgICAgICByZXR1cm47XG4gICAgICBsZXQgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldC50YWdOYW1lID09PSBcIkFcIikge1xuICAgICAgICB0YXJnZXQgPSAoX2EgPSB0YXJnZXQucGFyZW50Tm9kZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgPT09IFwiRElWXCIpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgIT09IFwiVERcIilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3Qgcm93ID0gdGFyZ2V0LnBhcmVudE5vZGUucm93SW5kZXg7XG4gICAgICBjb25zdCBjb2x1bW4gPSB0YXJnZXQuY2VsbEluZGV4O1xuICAgICAgaWYgKHJvd3MudmFsdWVbcm93XVtjb2x1bW5dLmRpc2FibGVkKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAocm93ICE9PSBsYXN0Um93LnZhbHVlIHx8IGNvbHVtbiAhPT0gbGFzdENvbHVtbi52YWx1ZSkge1xuICAgICAgICBsYXN0Um93LnZhbHVlID0gcm93O1xuICAgICAgICBsYXN0Q29sdW1uLnZhbHVlID0gY29sdW1uO1xuICAgICAgICBlbWl0KFwiY2hhbmdlcmFuZ2VcIiwge1xuICAgICAgICAgIHNlbGVjdGluZzogdHJ1ZSxcbiAgICAgICAgICBlbmREYXRlOiBwcm9wcy5kYXRlLnN0YXJ0T2YoXCJ5ZWFyXCIpLm1vbnRoKHJvdyAqIDQgKyBjb2x1bW4pXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlTW9udGhUYWJsZUNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBjb25zdCB0YXJnZXQgPSAoX2EgPSBldmVudC50YXJnZXQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jbG9zZXN0KFwidGRcIik7XG4gICAgICBpZiAoKHRhcmdldCA9PSBudWxsID8gdm9pZCAwIDogdGFyZ2V0LnRhZ05hbWUpICE9PSBcIlREXCIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmIChoYXNDbGFzcyh0YXJnZXQsIFwiZGlzYWJsZWRcIikpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IGNvbHVtbiA9IHRhcmdldC5jZWxsSW5kZXg7XG4gICAgICBjb25zdCByb3cgPSB0YXJnZXQucGFyZW50Tm9kZS5yb3dJbmRleDtcbiAgICAgIGNvbnN0IG1vbnRoID0gcm93ICogNCArIGNvbHVtbjtcbiAgICAgIGNvbnN0IG5ld0RhdGUgPSBwcm9wcy5kYXRlLnN0YXJ0T2YoXCJ5ZWFyXCIpLm1vbnRoKG1vbnRoKTtcbiAgICAgIGlmIChwcm9wcy5zZWxlY3Rpb25Nb2RlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgaWYgKCFwcm9wcy5yYW5nZVN0YXRlLnNlbGVjdGluZykge1xuICAgICAgICAgIGVtaXQoXCJwaWNrXCIsIHsgbWluRGF0ZTogbmV3RGF0ZSwgbWF4RGF0ZTogbnVsbCB9KTtcbiAgICAgICAgICBlbWl0KFwic2VsZWN0XCIsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcm9wcy5taW5EYXRlICYmIG5ld0RhdGUgPj0gcHJvcHMubWluRGF0ZSkge1xuICAgICAgICAgICAgZW1pdChcInBpY2tcIiwgeyBtaW5EYXRlOiBwcm9wcy5taW5EYXRlLCBtYXhEYXRlOiBuZXdEYXRlIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbWl0KFwicGlja1wiLCB7IG1pbkRhdGU6IG5ld0RhdGUsIG1heERhdGU6IHByb3BzLm1pbkRhdGUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVtaXQoXCJzZWxlY3RcIiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KFwicGlja1wiLCBtb250aCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5kYXRlLCBhc3luYyAoKSA9PiB7XG4gICAgICB2YXIgX2EsIF9iO1xuICAgICAgaWYgKChfYSA9IHRib2R5UmVmLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgKF9iID0gY3VycmVudENlbGxSZWYudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGV4cG9zZSh7XG4gICAgICBmb2N1c1xuICAgIH0pO1xuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInRhYmxlXCIsIHtcbiAgICAgICAgcm9sZTogXCJncmlkXCIsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB1bnJlZih0KShcImVsLmRhdGVwaWNrZXIubW9udGhUYWJsZVByb21wdFwiKSxcbiAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKG5zKS5iKCkpLFxuICAgICAgICBvbkNsaWNrOiBoYW5kbGVNb250aFRhYmxlQ2xpY2ssXG4gICAgICAgIG9uTW91c2Vtb3ZlOiBoYW5kbGVNb3VzZU1vdmVcbiAgICAgIH0sIFtcbiAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwidGJvZHlcIiwge1xuICAgICAgICAgIHJlZl9rZXk6IFwidGJvZHlSZWZcIixcbiAgICAgICAgICByZWY6IHRib2R5UmVmXG4gICAgICAgIH0sIFtcbiAgICAgICAgICAob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIG51bGwsIHJlbmRlckxpc3QodW5yZWYocm93cyksIChyb3csIGtleSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJ0clwiLCB7IGtleSB9LCBbXG4gICAgICAgICAgICAgIChvcGVuQmxvY2sodHJ1ZSksIGNyZWF0ZUVsZW1lbnRCbG9jayhGcmFnbWVudCwgbnVsbCwgcmVuZGVyTGlzdChyb3csIChjZWxsLCBrZXlfKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJ0ZFwiLCB7XG4gICAgICAgICAgICAgICAgICBrZXk6IGtleV8sXG4gICAgICAgICAgICAgICAgICByZWZfZm9yOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgcmVmOiAoZWwpID0+IGlzU2VsZWN0ZWRDZWxsKGNlbGwpICYmIChjdXJyZW50Q2VsbFJlZi52YWx1ZSA9IGVsKSxcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhnZXRDZWxsU3R5bGUoY2VsbCkpLFxuICAgICAgICAgICAgICAgICAgXCJhcmlhLXNlbGVjdGVkXCI6IGAke2lzU2VsZWN0ZWRDZWxsKGNlbGwpfWAsXG4gICAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogdW5yZWYodCkoYGVsLmRhdGVwaWNrZXIubW9udGgkeytjZWxsLnRleHQgKyAxfWApLFxuICAgICAgICAgICAgICAgICAgdGFiaW5kZXg6IGlzU2VsZWN0ZWRDZWxsKGNlbGwpID8gMCA6IC0xLFxuICAgICAgICAgICAgICAgICAgb25LZXlkb3duOiBbXG4gICAgICAgICAgICAgICAgICAgIHdpdGhLZXlzKHdpdGhNb2RpZmllcnMoaGFuZGxlTW9udGhUYWJsZUNsaWNrLCBbXCJwcmV2ZW50XCIsIFwic3RvcFwiXSksIFtcInNwYWNlXCJdKSxcbiAgICAgICAgICAgICAgICAgICAgd2l0aEtleXMod2l0aE1vZGlmaWVycyhoYW5kbGVNb250aFRhYmxlQ2xpY2ssIFtcInByZXZlbnRcIiwgXCJzdG9wXCJdKSwgW1wiZW50ZXJcIl0pXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIG51bGwsIFtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCBfaG9pc3RlZF8zLCB0b0Rpc3BsYXlTdHJpbmcodW5yZWYodCkoXCJlbC5kYXRlcGlja2VyLm1vbnRocy5cIiArIG1vbnRocy52YWx1ZVtjZWxsLnRleHRdKSksIDEpXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0sIDQyLCBfaG9pc3RlZF8yKTtcbiAgICAgICAgICAgICAgfSksIDEyOCkpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICB9KSwgMTI4KSlcbiAgICAgICAgXSwgNTEyKVxuICAgICAgXSwgNDIsIF9ob2lzdGVkXzEpO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIE1vbnRoVGFibGUgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL2RhdGUtcGlja2VyL3NyYy9kYXRlLXBpY2tlci1jb20vYmFzaWMtbW9udGgtdGFibGUudnVlXCJdXSk7XG5cbmV4cG9ydCB7IE1vbnRoVGFibGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzaWMtbW9udGgtdGFibGUubWpzLm1hcFxuIiwiaW1wb3J0ICcuLi8uLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0IHsgZGF0ZVBpY2tlclNoYXJlZFByb3BzIH0gZnJvbSAnLi9zaGFyZWQubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZS5tanMnO1xuXG5jb25zdCB7IGRhdGUsIGRpc2FibGVkRGF0ZSwgcGFyc2VkVmFsdWUgfSA9IGRhdGVQaWNrZXJTaGFyZWRQcm9wcztcbmNvbnN0IGJhc2ljWWVhclRhYmxlUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgZGF0ZSxcbiAgZGlzYWJsZWREYXRlLFxuICBwYXJzZWRWYWx1ZVxufSk7XG5cbmV4cG9ydCB7IGJhc2ljWWVhclRhYmxlUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2ljLXllYXItdGFibGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCByZWYsIGNvbXB1dGVkLCB3YXRjaCwgbmV4dFRpY2ssIG9wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrLCB1bnJlZiwgbm9ybWFsaXplQ2xhc3MsIGNyZWF0ZUVsZW1lbnRWTm9kZSwgRnJhZ21lbnQsIHJlbmRlckxpc3QsIHdpdGhLZXlzLCB3aXRoTW9kaWZpZXJzLCB0b0Rpc3BsYXlTdHJpbmcgfSBmcm9tICd2dWUnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdGltZS1waWNrZXIvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IGJhc2ljWWVhclRhYmxlUHJvcHMgfSBmcm9tICcuLi9wcm9wcy9iYXNpYy15ZWFyLXRhYmxlLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyByYW5nZUFyciB9IGZyb20gJy4uLy4uLy4uL3RpbWUtcGlja2VyL3NyYy91dGlscy5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLWxvY2FsZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgY2FzdEFycmF5IH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvYXJyYXlzLm1qcyc7XG5pbXBvcnQgeyBoYXNDbGFzcyB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2RvbS9zdHlsZS5tanMnO1xuXG5jb25zdCBfaG9pc3RlZF8xID0gW1wiYXJpYS1sYWJlbFwiXTtcbmNvbnN0IF9ob2lzdGVkXzIgPSBbXCJhcmlhLXNlbGVjdGVkXCIsIFwidGFiaW5kZXhcIiwgXCJvbktleWRvd25cIl07XG5jb25zdCBfaG9pc3RlZF8zID0geyBjbGFzczogXCJjZWxsXCIgfTtcbmNvbnN0IF9ob2lzdGVkXzQgPSB7IGtleTogMSB9O1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIF9fbmFtZTogXCJiYXNpYy15ZWFyLXRhYmxlXCIsXG4gIHByb3BzOiBiYXNpY1llYXJUYWJsZVByb3BzLFxuICBlbWl0czogW1wicGlja1wiXSxcbiAgc2V0dXAoX19wcm9wcywgeyBleHBvc2UsIGVtaXQgfSkge1xuICAgIGNvbnN0IHByb3BzID0gX19wcm9wcztcbiAgICBjb25zdCBkYXRlc0luWWVhciA9ICh5ZWFyLCBsYW5nMikgPT4ge1xuICAgICAgY29uc3QgZmlyc3REYXkgPSBkYXlqcyhTdHJpbmcoeWVhcikpLmxvY2FsZShsYW5nMikuc3RhcnRPZihcInllYXJcIik7XG4gICAgICBjb25zdCBsYXN0RGF5ID0gZmlyc3REYXkuZW5kT2YoXCJ5ZWFyXCIpO1xuICAgICAgY29uc3QgbnVtT2ZEYXlzID0gbGFzdERheS5kYXlPZlllYXIoKTtcbiAgICAgIHJldHVybiByYW5nZUFycihudW1PZkRheXMpLm1hcCgobikgPT4gZmlyc3REYXkuYWRkKG4sIFwiZGF5XCIpLnRvRGF0ZSgpKTtcbiAgICB9O1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwieWVhci10YWJsZVwiKTtcbiAgICBjb25zdCB7IHQsIGxhbmcgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHRib2R5UmVmID0gcmVmKCk7XG4gICAgY29uc3QgY3VycmVudENlbGxSZWYgPSByZWYoKTtcbiAgICBjb25zdCBzdGFydFllYXIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihwcm9wcy5kYXRlLnllYXIoKSAvIDEwKSAqIDEwO1xuICAgIH0pO1xuICAgIGNvbnN0IGZvY3VzID0gKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgKF9hID0gY3VycmVudENlbGxSZWYudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5mb2N1cygpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q2VsbEtscyA9ICh5ZWFyKSA9PiB7XG4gICAgICBjb25zdCBrbHMgPSB7fTtcbiAgICAgIGNvbnN0IHRvZGF5ID0gZGF5anMoKS5sb2NhbGUobGFuZy52YWx1ZSk7XG4gICAgICBrbHMuZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZERhdGUgPyBkYXRlc0luWWVhcih5ZWFyLCBsYW5nLnZhbHVlKS5ldmVyeShwcm9wcy5kaXNhYmxlZERhdGUpIDogZmFsc2U7XG4gICAgICBrbHMuY3VycmVudCA9IGNhc3RBcnJheShwcm9wcy5wYXJzZWRWYWx1ZSkuZmluZEluZGV4KChkKSA9PiBkLnllYXIoKSA9PT0geWVhcikgPj0gMDtcbiAgICAgIGtscy50b2RheSA9IHRvZGF5LnllYXIoKSA9PT0geWVhcjtcbiAgICAgIHJldHVybiBrbHM7XG4gICAgfTtcbiAgICBjb25zdCBpc1NlbGVjdGVkQ2VsbCA9ICh5ZWFyKSA9PiB7XG4gICAgICByZXR1cm4geWVhciA9PT0gc3RhcnRZZWFyLnZhbHVlICYmIHByb3BzLmRhdGUueWVhcigpIDwgc3RhcnRZZWFyLnZhbHVlICYmIHByb3BzLmRhdGUueWVhcigpID4gc3RhcnRZZWFyLnZhbHVlICsgOSB8fCBjYXN0QXJyYXkocHJvcHMuZGF0ZSkuZmluZEluZGV4KChkYXRlKSA9PiBkYXRlLnllYXIoKSA9PT0geWVhcikgPj0gMDtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVllYXJUYWJsZUNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBjbGlja1RhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGNsaWNrVGFyZ2V0LmNsb3Nlc3QoXCJ0ZFwiKTtcbiAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnRleHRDb250ZW50KSB7XG4gICAgICAgIGlmIChoYXNDbGFzcyh0YXJnZXQsIFwiZGlzYWJsZWRcIikpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB5ZWFyID0gdGFyZ2V0LnRleHRDb250ZW50IHx8IHRhcmdldC5pbm5lclRleHQ7XG4gICAgICAgIGVtaXQoXCJwaWNrXCIsIE51bWJlcih5ZWFyKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5kYXRlLCBhc3luYyAoKSA9PiB7XG4gICAgICB2YXIgX2EsIF9iO1xuICAgICAgaWYgKChfYSA9IHRib2R5UmVmLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgKF9iID0gY3VycmVudENlbGxSZWYudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGV4cG9zZSh7XG4gICAgICBmb2N1c1xuICAgIH0pO1xuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInRhYmxlXCIsIHtcbiAgICAgICAgcm9sZTogXCJncmlkXCIsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB1bnJlZih0KShcImVsLmRhdGVwaWNrZXIueWVhclRhYmxlUHJvbXB0XCIpLFxuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmIoKSksXG4gICAgICAgIG9uQ2xpY2s6IGhhbmRsZVllYXJUYWJsZUNsaWNrXG4gICAgICB9LCBbXG4gICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInRib2R5XCIsIHtcbiAgICAgICAgICByZWZfa2V5OiBcInRib2R5UmVmXCIsXG4gICAgICAgICAgcmVmOiB0Ym9keVJlZlxuICAgICAgICB9LCBbXG4gICAgICAgICAgKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIG51bGwsIHJlbmRlckxpc3QoMywgKF8sIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50Vk5vZGUoXCJ0clwiLCB7IGtleTogaSB9LCBbXG4gICAgICAgICAgICAgIChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCBudWxsLCByZW5kZXJMaXN0KDQsIChfXywgaikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCB7XG4gICAgICAgICAgICAgICAgICBrZXk6IGkgKyBcIl9cIiArIGpcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICBpICogNCArIGogPCAxMCA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwidGRcIiwge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHJlZl9mb3I6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogKGVsKSA9PiBpc1NlbGVjdGVkQ2VsbCh1bnJlZihzdGFydFllYXIpICsgaSAqIDQgKyBqKSAmJiAoY3VycmVudENlbGxSZWYudmFsdWUgPSBlbCksXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbXCJhdmFpbGFibGVcIiwgZ2V0Q2VsbEtscyh1bnJlZihzdGFydFllYXIpICsgaSAqIDQgKyBqKV0pLFxuICAgICAgICAgICAgICAgICAgICBcImFyaWEtc2VsZWN0ZWRcIjogYCR7aXNTZWxlY3RlZENlbGwodW5yZWYoc3RhcnRZZWFyKSArIGkgKiA0ICsgail9YCxcbiAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg6IGlzU2VsZWN0ZWRDZWxsKHVucmVmKHN0YXJ0WWVhcikgKyBpICogNCArIGopID8gMCA6IC0xLFxuICAgICAgICAgICAgICAgICAgICBvbktleWRvd246IFtcbiAgICAgICAgICAgICAgICAgICAgICB3aXRoS2V5cyh3aXRoTW9kaWZpZXJzKGhhbmRsZVllYXJUYWJsZUNsaWNrLCBbXCJwcmV2ZW50XCIsIFwic3RvcFwiXSksIFtcInNwYWNlXCJdKSxcbiAgICAgICAgICAgICAgICAgICAgICB3aXRoS2V5cyh3aXRoTW9kaWZpZXJzKGhhbmRsZVllYXJUYWJsZUNsaWNrLCBbXCJwcmV2ZW50XCIsIFwic3RvcFwiXSksIFtcImVudGVyXCJdKVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwgX2hvaXN0ZWRfMywgdG9EaXNwbGF5U3RyaW5nKHVucmVmKHN0YXJ0WWVhcikgKyBpICogNCArIGopLCAxKVxuICAgICAgICAgICAgICAgICAgXSwgNDIsIF9ob2lzdGVkXzIpKSA6IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwidGRcIiwgX2hvaXN0ZWRfNCkpXG4gICAgICAgICAgICAgICAgXSwgNjQpO1xuICAgICAgICAgICAgICB9KSwgNjQpKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgfSksIDY0KSlcbiAgICAgICAgXSwgNTEyKVxuICAgICAgXSwgMTAsIF9ob2lzdGVkXzEpO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIFllYXJUYWJsZSA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9iYXNpYy15ZWFyLXRhYmxlLnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBZZWFyVGFibGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzaWMteWVhci10YWJsZS5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIHVzZUF0dHJzLCB1c2VTbG90cywgaW5qZWN0LCB0b1JlZiwgcmVmLCBjb21wdXRlZCwgbmV4dFRpY2ssIHdhdGNoLCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIHVucmVmLCBjcmVhdGVFbGVtZW50Vk5vZGUsIHJlbmRlclNsb3QsIEZyYWdtZW50LCByZW5kZXJMaXN0LCB0b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlVk5vZGUsIHdpdGhEaXJlY3RpdmVzLCB3aXRoQ3R4LCB2U2hvdywgd2l0aEtleXMsIGNyZWF0ZUJsb2NrLCBjcmVhdGVUZXh0Vk5vZGUgfSBmcm9tICd2dWUnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCB7IEVsQnV0dG9uIH0gZnJvbSAnLi4vLi4vLi4vYnV0dG9uL2luZGV4Lm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2RpcmVjdGl2ZXMvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IEVsSW5wdXQgfSBmcm9tICcuLi8uLi8uLi9pbnB1dC9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi90aW1lLXBpY2tlci9pbmRleC5tanMnO1xuaW1wb3J0IHsgRWxJY29uIH0gZnJvbSAnLi4vLi4vLi4vaWNvbi9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9jb25zdGFudHMvaW5kZXgubWpzJztcbmltcG9ydCB7IERBcnJvd0xlZnQsIEFycm93TGVmdCwgQXJyb3dSaWdodCwgREFycm93UmlnaHQgfSBmcm9tICdAZWxlbWVudC1wbHVzL2ljb25zLXZ1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uL3Rvb2x0aXAvaW5kZXgubWpzJztcbmltcG9ydCB7IHBhbmVsRGF0ZVBpY2tQcm9wcyB9IGZyb20gJy4uL3Byb3BzL3BhbmVsLWRhdGUtcGljay5tanMnO1xuaW1wb3J0IERhdGVUYWJsZSBmcm9tICcuL2Jhc2ljLWRhdGUtdGFibGUubWpzJztcbmltcG9ydCBNb250aFRhYmxlIGZyb20gJy4vYmFzaWMtbW9udGgtdGFibGUubWpzJztcbmltcG9ydCBZZWFyVGFibGUgZnJvbSAnLi9iYXNpYy15ZWFyLXRhYmxlLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBUT09MVElQX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuLi8uLi8uLi90b29sdGlwL3NyYy9jb25zdGFudHMubWpzJztcbmltcG9ydCB7IGlzQXJyYXksIGlzRnVuY3Rpb24gfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5pbXBvcnQgeyBleHRyYWN0VGltZUZvcm1hdCwgZXh0cmFjdERhdGVGb3JtYXQgfSBmcm9tICcuLi8uLi8uLi90aW1lLXBpY2tlci9zcmMvdXRpbHMubWpzJztcbmltcG9ydCB7IEVWRU5UX0NPREUgfSBmcm9tICcuLi8uLi8uLi8uLi9jb25zdGFudHMvYXJpYS5tanMnO1xuaW1wb3J0IFRpbWVQaWNrUGFuZWwgZnJvbSAnLi4vLi4vLi4vdGltZS1waWNrZXIvc3JjL3RpbWUtcGlja2VyLWNvbS9wYW5lbC10aW1lLXBpY2subWpzJztcbmltcG9ydCBDbGlja091dHNpZGUgZnJvbSAnLi4vLi4vLi4vLi4vZGlyZWN0aXZlcy9jbGljay1vdXRzaWRlL2luZGV4Lm1qcyc7XG5cbmNvbnN0IF9ob2lzdGVkXzEgPSBbXCJvbkNsaWNrXCJdO1xuY29uc3QgX2hvaXN0ZWRfMiA9IFtcImFyaWEtbGFiZWxcIl07XG5jb25zdCBfaG9pc3RlZF8zID0gW1wiYXJpYS1sYWJlbFwiXTtcbmNvbnN0IF9ob2lzdGVkXzQgPSBbXCJhcmlhLWxhYmVsXCJdO1xuY29uc3QgX2hvaXN0ZWRfNSA9IFtcImFyaWEtbGFiZWxcIl07XG5jb25zdCBfc2ZjX21haW4gPSAvKiBAX19QVVJFX18gKi8gZGVmaW5lQ29tcG9uZW50KHtcbiAgX19uYW1lOiBcInBhbmVsLWRhdGUtcGlja1wiLFxuICBwcm9wczogcGFuZWxEYXRlUGlja1Byb3BzLFxuICBlbWl0czogW1wicGlja1wiLCBcInNldC1waWNrZXItb3B0aW9uXCIsIFwicGFuZWwtY2hhbmdlXCJdLFxuICBzZXR1cChfX3Byb3BzLCB7IGVtaXQ6IGNvbnRleHRFbWl0IH0pIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgdGltZVdpdGhpblJhbmdlID0gKF8sIF9fLCBfX18pID0+IHRydWU7XG4gICAgY29uc3QgcHBOcyA9IHVzZU5hbWVzcGFjZShcInBpY2tlci1wYW5lbFwiKTtcbiAgICBjb25zdCBkcE5zID0gdXNlTmFtZXNwYWNlKFwiZGF0ZS1waWNrZXJcIik7XG4gICAgY29uc3QgYXR0cnMgPSB1c2VBdHRycygpO1xuICAgIGNvbnN0IHNsb3RzID0gdXNlU2xvdHMoKTtcbiAgICBjb25zdCB7IHQsIGxhbmcgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHBpY2tlckJhc2UgPSBpbmplY3QoXCJFUF9QSUNLRVJfQkFTRVwiKTtcbiAgICBjb25zdCBwb3BwZXIgPSBpbmplY3QoVE9PTFRJUF9JTkpFQ1RJT05fS0VZKTtcbiAgICBjb25zdCB7IHNob3J0Y3V0cywgZGlzYWJsZWREYXRlLCBjZWxsQ2xhc3NOYW1lLCBkZWZhdWx0VGltZSwgYXJyb3dDb250cm9sIH0gPSBwaWNrZXJCYXNlLnByb3BzO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IHRvUmVmKHBpY2tlckJhc2UucHJvcHMsIFwiZGVmYXVsdFZhbHVlXCIpO1xuICAgIGNvbnN0IGN1cnJlbnRWaWV3UmVmID0gcmVmKCk7XG4gICAgY29uc3QgaW5uZXJEYXRlID0gcmVmKGRheWpzKCkubG9jYWxlKGxhbmcudmFsdWUpKTtcbiAgICBjb25zdCBpc0NoYW5nZVRvTm93ID0gcmVmKGZhbHNlKTtcbiAgICBjb25zdCBkZWZhdWx0VGltZUQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gZGF5anMoZGVmYXVsdFRpbWUpLmxvY2FsZShsYW5nLnZhbHVlKTtcbiAgICB9KTtcbiAgICBjb25zdCBtb250aCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBpbm5lckRhdGUudmFsdWUubW9udGgoKTtcbiAgICB9KTtcbiAgICBjb25zdCB5ZWFyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGlubmVyRGF0ZS52YWx1ZS55ZWFyKCk7XG4gICAgfSk7XG4gICAgY29uc3Qgc2VsZWN0YWJsZVJhbmdlID0gcmVmKFtdKTtcbiAgICBjb25zdCB1c2VySW5wdXREYXRlID0gcmVmKG51bGwpO1xuICAgIGNvbnN0IHVzZXJJbnB1dFRpbWUgPSByZWYobnVsbCk7XG4gICAgY29uc3QgY2hlY2tEYXRlV2l0aGluUmFuZ2UgPSAoZGF0ZSkgPT4ge1xuICAgICAgcmV0dXJuIHNlbGVjdGFibGVSYW5nZS52YWx1ZS5sZW5ndGggPiAwID8gdGltZVdpdGhpblJhbmdlKGRhdGUsIHNlbGVjdGFibGVSYW5nZS52YWx1ZSwgcHJvcHMuZm9ybWF0IHx8IFwiSEg6bW06c3NcIikgOiB0cnVlO1xuICAgIH07XG4gICAgY29uc3QgZm9ybWF0RW1pdCA9IChlbWl0RGF5anMpID0+IHtcbiAgICAgIGlmIChkZWZhdWx0VGltZSAmJiAhdmlzaWJsZVRpbWUudmFsdWUgJiYgIWlzQ2hhbmdlVG9Ob3cudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRUaW1lRC52YWx1ZS55ZWFyKGVtaXREYXlqcy55ZWFyKCkpLm1vbnRoKGVtaXREYXlqcy5tb250aCgpKS5kYXRlKGVtaXREYXlqcy5kYXRlKCkpO1xuICAgICAgfVxuICAgICAgaWYgKHNob3dUaW1lLnZhbHVlKVxuICAgICAgICByZXR1cm4gZW1pdERheWpzLm1pbGxpc2Vjb25kKDApO1xuICAgICAgcmV0dXJuIGVtaXREYXlqcy5zdGFydE9mKFwiZGF5XCIpO1xuICAgIH07XG4gICAgY29uc3QgZW1pdCA9ICh2YWx1ZSwgLi4uYXJncykgPT4ge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICBjb250ZXh0RW1pdChcInBpY2tcIiwgdmFsdWUsIC4uLmFyZ3MpO1xuICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBjb25zdCBkYXRlcyA9IHZhbHVlLm1hcChmb3JtYXRFbWl0KTtcbiAgICAgICAgY29udGV4dEVtaXQoXCJwaWNrXCIsIGRhdGVzLCAuLi5hcmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHRFbWl0KFwicGlja1wiLCBmb3JtYXRFbWl0KHZhbHVlKSwgLi4uYXJncyk7XG4gICAgICB9XG4gICAgICB1c2VySW5wdXREYXRlLnZhbHVlID0gbnVsbDtcbiAgICAgIHVzZXJJbnB1dFRpbWUudmFsdWUgPSBudWxsO1xuICAgICAgaXNDaGFuZ2VUb05vdy52YWx1ZSA9IGZhbHNlO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlRGF0ZVBpY2sgPSAodmFsdWUsIGtlZXBPcGVuKSA9PiB7XG4gICAgICBpZiAoc2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gXCJkYXRlXCIpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgbGV0IG5ld0RhdGUgPSBwcm9wcy5wYXJzZWRWYWx1ZSA/IHByb3BzLnBhcnNlZFZhbHVlLnllYXIodmFsdWUueWVhcigpKS5tb250aCh2YWx1ZS5tb250aCgpKS5kYXRlKHZhbHVlLmRhdGUoKSkgOiB2YWx1ZTtcbiAgICAgICAgaWYgKCFjaGVja0RhdGVXaXRoaW5SYW5nZShuZXdEYXRlKSkge1xuICAgICAgICAgIG5ld0RhdGUgPSBzZWxlY3RhYmxlUmFuZ2UudmFsdWVbMF1bMF0ueWVhcih2YWx1ZS55ZWFyKCkpLm1vbnRoKHZhbHVlLm1vbnRoKCkpLmRhdGUodmFsdWUuZGF0ZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBpbm5lckRhdGUudmFsdWUgPSBuZXdEYXRlO1xuICAgICAgICBlbWl0KG5ld0RhdGUsIHNob3dUaW1lLnZhbHVlIHx8IGtlZXBPcGVuKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gXCJ3ZWVrXCIpIHtcbiAgICAgICAgZW1pdCh2YWx1ZS5kYXRlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gXCJkYXRlc1wiKSB7XG4gICAgICAgIGVtaXQodmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbW92ZUJ5TW9udGggPSAoZm9yd2FyZCkgPT4ge1xuICAgICAgY29uc3QgYWN0aW9uID0gZm9yd2FyZCA/IFwiYWRkXCIgOiBcInN1YnRyYWN0XCI7XG4gICAgICBpbm5lckRhdGUudmFsdWUgPSBpbm5lckRhdGUudmFsdWVbYWN0aW9uXSgxLCBcIm1vbnRoXCIpO1xuICAgICAgaGFuZGxlUGFuZWxDaGFuZ2UoXCJtb250aFwiKTtcbiAgICB9O1xuICAgIGNvbnN0IG1vdmVCeVllYXIgPSAoZm9yd2FyZCkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudERhdGUgPSBpbm5lckRhdGUudmFsdWU7XG4gICAgICBjb25zdCBhY3Rpb24gPSBmb3J3YXJkID8gXCJhZGRcIiA6IFwic3VidHJhY3RcIjtcbiAgICAgIGlubmVyRGF0ZS52YWx1ZSA9IGN1cnJlbnRWaWV3LnZhbHVlID09PSBcInllYXJcIiA/IGN1cnJlbnREYXRlW2FjdGlvbl0oMTAsIFwieWVhclwiKSA6IGN1cnJlbnREYXRlW2FjdGlvbl0oMSwgXCJ5ZWFyXCIpO1xuICAgICAgaGFuZGxlUGFuZWxDaGFuZ2UoXCJ5ZWFyXCIpO1xuICAgIH07XG4gICAgY29uc3QgY3VycmVudFZpZXcgPSByZWYoXCJkYXRlXCIpO1xuICAgIGNvbnN0IHllYXJMYWJlbCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHllYXJUcmFuc2xhdGlvbiA9IHQoXCJlbC5kYXRlcGlja2VyLnllYXJcIik7XG4gICAgICBpZiAoY3VycmVudFZpZXcudmFsdWUgPT09IFwieWVhclwiKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0WWVhciA9IE1hdGguZmxvb3IoeWVhci52YWx1ZSAvIDEwKSAqIDEwO1xuICAgICAgICBpZiAoeWVhclRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGAke3N0YXJ0WWVhcn0gJHt5ZWFyVHJhbnNsYXRpb259IC0gJHtzdGFydFllYXIgKyA5fSAke3llYXJUcmFuc2xhdGlvbn1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtzdGFydFllYXJ9IC0gJHtzdGFydFllYXIgKyA5fWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYCR7eWVhci52YWx1ZX0gJHt5ZWFyVHJhbnNsYXRpb259YDtcbiAgICB9KTtcbiAgICBjb25zdCBoYW5kbGVTaG9ydGN1dENsaWNrID0gKHNob3J0Y3V0KSA9PiB7XG4gICAgICBjb25zdCBzaG9ydGN1dFZhbHVlID0gaXNGdW5jdGlvbihzaG9ydGN1dC52YWx1ZSkgPyBzaG9ydGN1dC52YWx1ZSgpIDogc2hvcnRjdXQudmFsdWU7XG4gICAgICBpZiAoc2hvcnRjdXRWYWx1ZSkge1xuICAgICAgICBlbWl0KGRheWpzKHNob3J0Y3V0VmFsdWUpLmxvY2FsZShsYW5nLnZhbHVlKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzaG9ydGN1dC5vbkNsaWNrKSB7XG4gICAgICAgIHNob3J0Y3V0Lm9uQ2xpY2soe1xuICAgICAgICAgIGF0dHJzLFxuICAgICAgICAgIHNsb3RzLFxuICAgICAgICAgIGVtaXQ6IGNvbnRleHRFbWl0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2VsZWN0aW9uTW9kZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHsgdHlwZSB9ID0gcHJvcHM7XG4gICAgICBpZiAoW1wid2Vla1wiLCBcIm1vbnRoXCIsIFwieWVhclwiLCBcImRhdGVzXCJdLmluY2x1ZGVzKHR5cGUpKVxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIHJldHVybiBcImRhdGVcIjtcbiAgICB9KTtcbiAgICBjb25zdCBrZXlib2FyZE1vZGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gc2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gXCJkYXRlXCIgPyBjdXJyZW50Vmlldy52YWx1ZSA6IHNlbGVjdGlvbk1vZGUudmFsdWU7XG4gICAgfSk7XG4gICAgY29uc3QgaGFzU2hvcnRjdXRzID0gY29tcHV0ZWQoKCkgPT4gISFzaG9ydGN1dHMubGVuZ3RoKTtcbiAgICBjb25zdCBoYW5kbGVNb250aFBpY2sgPSBhc3luYyAobW9udGgyKSA9PiB7XG4gICAgICBpbm5lckRhdGUudmFsdWUgPSBpbm5lckRhdGUudmFsdWUuc3RhcnRPZihcIm1vbnRoXCIpLm1vbnRoKG1vbnRoMik7XG4gICAgICBpZiAoc2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gXCJtb250aFwiKSB7XG4gICAgICAgIGVtaXQoaW5uZXJEYXRlLnZhbHVlLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50Vmlldy52YWx1ZSA9IFwiZGF0ZVwiO1xuICAgICAgICBpZiAoW1wibW9udGhcIiwgXCJ5ZWFyXCIsIFwiZGF0ZVwiLCBcIndlZWtcIl0uaW5jbHVkZXMoc2VsZWN0aW9uTW9kZS52YWx1ZSkpIHtcbiAgICAgICAgICBlbWl0KGlubmVyRGF0ZS52YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgICBoYW5kbGVGb2N1c1BpY2tlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBoYW5kbGVQYW5lbENoYW5nZShcIm1vbnRoXCIpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlWWVhclBpY2sgPSBhc3luYyAoeWVhcjIpID0+IHtcbiAgICAgIGlmIChzZWxlY3Rpb25Nb2RlLnZhbHVlID09PSBcInllYXJcIikge1xuICAgICAgICBpbm5lckRhdGUudmFsdWUgPSBpbm5lckRhdGUudmFsdWUuc3RhcnRPZihcInllYXJcIikueWVhcih5ZWFyMik7XG4gICAgICAgIGVtaXQoaW5uZXJEYXRlLnZhbHVlLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbm5lckRhdGUudmFsdWUgPSBpbm5lckRhdGUudmFsdWUueWVhcih5ZWFyMik7XG4gICAgICAgIGN1cnJlbnRWaWV3LnZhbHVlID0gXCJtb250aFwiO1xuICAgICAgICBpZiAoW1wibW9udGhcIiwgXCJ5ZWFyXCIsIFwiZGF0ZVwiLCBcIndlZWtcIl0uaW5jbHVkZXMoc2VsZWN0aW9uTW9kZS52YWx1ZSkpIHtcbiAgICAgICAgICBlbWl0KGlubmVyRGF0ZS52YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgICBoYW5kbGVGb2N1c1BpY2tlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBoYW5kbGVQYW5lbENoYW5nZShcInllYXJcIik7XG4gICAgfTtcbiAgICBjb25zdCBzaG93UGlja2VyID0gYXN5bmMgKHZpZXcpID0+IHtcbiAgICAgIGN1cnJlbnRWaWV3LnZhbHVlID0gdmlldztcbiAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICBoYW5kbGVGb2N1c1BpY2tlcigpO1xuICAgIH07XG4gICAgY29uc3Qgc2hvd1RpbWUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy50eXBlID09PSBcImRhdGV0aW1lXCIgfHwgcHJvcHMudHlwZSA9PT0gXCJkYXRldGltZXJhbmdlXCIpO1xuICAgIGNvbnN0IGZvb3RlclZpc2libGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gc2hvd1RpbWUudmFsdWUgfHwgc2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gXCJkYXRlc1wiO1xuICAgIH0pO1xuICAgIGNvbnN0IG9uQ29uZmlybSA9ICgpID0+IHtcbiAgICAgIGlmIChzZWxlY3Rpb25Nb2RlLnZhbHVlID09PSBcImRhdGVzXCIpIHtcbiAgICAgICAgZW1pdChwcm9wcy5wYXJzZWRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcmVzdWx0ID0gcHJvcHMucGFyc2VkVmFsdWU7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdFRpbWVEMiA9IGRheWpzKGRlZmF1bHRUaW1lKS5sb2NhbGUobGFuZy52YWx1ZSk7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlRCA9IGdldERlZmF1bHRWYWx1ZSgpO1xuICAgICAgICAgIHJlc3VsdCA9IGRlZmF1bHRUaW1lRDIueWVhcihkZWZhdWx0VmFsdWVELnllYXIoKSkubW9udGgoZGVmYXVsdFZhbHVlRC5tb250aCgpKS5kYXRlKGRlZmF1bHRWYWx1ZUQuZGF0ZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBpbm5lckRhdGUudmFsdWUgPSByZXN1bHQ7XG4gICAgICAgIGVtaXQocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGNoYW5nZVRvTm93ID0gKCkgPT4ge1xuICAgICAgY29uc3Qgbm93ID0gZGF5anMoKS5sb2NhbGUobGFuZy52YWx1ZSk7XG4gICAgICBjb25zdCBub3dEYXRlID0gbm93LnRvRGF0ZSgpO1xuICAgICAgaXNDaGFuZ2VUb05vdy52YWx1ZSA9IHRydWU7XG4gICAgICBpZiAoKCFkaXNhYmxlZERhdGUgfHwgIWRpc2FibGVkRGF0ZShub3dEYXRlKSkgJiYgY2hlY2tEYXRlV2l0aGluUmFuZ2Uobm93RGF0ZSkpIHtcbiAgICAgICAgaW5uZXJEYXRlLnZhbHVlID0gZGF5anMoKS5sb2NhbGUobGFuZy52YWx1ZSk7XG4gICAgICAgIGVtaXQoaW5uZXJEYXRlLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHRpbWVGb3JtYXQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gZXh0cmFjdFRpbWVGb3JtYXQocHJvcHMuZm9ybWF0KTtcbiAgICB9KTtcbiAgICBjb25zdCBkYXRlRm9ybWF0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGV4dHJhY3REYXRlRm9ybWF0KHByb3BzLmZvcm1hdCk7XG4gICAgfSk7XG4gICAgY29uc3QgdmlzaWJsZVRpbWUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAodXNlcklucHV0VGltZS52YWx1ZSlcbiAgICAgICAgcmV0dXJuIHVzZXJJbnB1dFRpbWUudmFsdWU7XG4gICAgICBpZiAoIXByb3BzLnBhcnNlZFZhbHVlICYmICFkZWZhdWx0VmFsdWUudmFsdWUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHJldHVybiAocHJvcHMucGFyc2VkVmFsdWUgfHwgaW5uZXJEYXRlLnZhbHVlKS5mb3JtYXQodGltZUZvcm1hdC52YWx1ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgdmlzaWJsZURhdGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAodXNlcklucHV0RGF0ZS52YWx1ZSlcbiAgICAgICAgcmV0dXJuIHVzZXJJbnB1dERhdGUudmFsdWU7XG4gICAgICBpZiAoIXByb3BzLnBhcnNlZFZhbHVlICYmICFkZWZhdWx0VmFsdWUudmFsdWUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHJldHVybiAocHJvcHMucGFyc2VkVmFsdWUgfHwgaW5uZXJEYXRlLnZhbHVlKS5mb3JtYXQoZGF0ZUZvcm1hdC52YWx1ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgdGltZVBpY2tlclZpc2libGUgPSByZWYoZmFsc2UpO1xuICAgIGNvbnN0IG9uVGltZVBpY2tlcklucHV0Rm9jdXMgPSAoKSA9PiB7XG4gICAgICB0aW1lUGlja2VyVmlzaWJsZS52YWx1ZSA9IHRydWU7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVUaW1lUGlja0Nsb3NlID0gKCkgPT4ge1xuICAgICAgdGltZVBpY2tlclZpc2libGUudmFsdWUgPSBmYWxzZTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFVuaXRzID0gKGRhdGUpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhvdXI6IGRhdGUuaG91cigpLFxuICAgICAgICBtaW51dGU6IGRhdGUubWludXRlKCksXG4gICAgICAgIHNlY29uZDogZGF0ZS5zZWNvbmQoKSxcbiAgICAgICAgeWVhcjogZGF0ZS55ZWFyKCksXG4gICAgICAgIG1vbnRoOiBkYXRlLm1vbnRoKCksXG4gICAgICAgIGRhdGU6IGRhdGUuZGF0ZSgpXG4gICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlVGltZVBpY2sgPSAodmFsdWUsIHZpc2libGUsIGZpcnN0KSA9PiB7XG4gICAgICBjb25zdCB7IGhvdXIsIG1pbnV0ZSwgc2Vjb25kIH0gPSBnZXRVbml0cyh2YWx1ZSk7XG4gICAgICBjb25zdCBuZXdEYXRlID0gcHJvcHMucGFyc2VkVmFsdWUgPyBwcm9wcy5wYXJzZWRWYWx1ZS5ob3VyKGhvdXIpLm1pbnV0ZShtaW51dGUpLnNlY29uZChzZWNvbmQpIDogdmFsdWU7XG4gICAgICBpbm5lckRhdGUudmFsdWUgPSBuZXdEYXRlO1xuICAgICAgZW1pdChpbm5lckRhdGUudmFsdWUsIHRydWUpO1xuICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICB0aW1lUGlja2VyVmlzaWJsZS52YWx1ZSA9IHZpc2libGU7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVWaXNpYmxlVGltZUNoYW5nZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgY29uc3QgbmV3RGF0ZSA9IGRheWpzKHZhbHVlLCB0aW1lRm9ybWF0LnZhbHVlKS5sb2NhbGUobGFuZy52YWx1ZSk7XG4gICAgICBpZiAobmV3RGF0ZS5pc1ZhbGlkKCkgJiYgY2hlY2tEYXRlV2l0aGluUmFuZ2UobmV3RGF0ZSkpIHtcbiAgICAgICAgY29uc3QgeyB5ZWFyOiB5ZWFyMiwgbW9udGg6IG1vbnRoMiwgZGF0ZSB9ID0gZ2V0VW5pdHMoaW5uZXJEYXRlLnZhbHVlKTtcbiAgICAgICAgaW5uZXJEYXRlLnZhbHVlID0gbmV3RGF0ZS55ZWFyKHllYXIyKS5tb250aChtb250aDIpLmRhdGUoZGF0ZSk7XG4gICAgICAgIHVzZXJJbnB1dFRpbWUudmFsdWUgPSBudWxsO1xuICAgICAgICB0aW1lUGlja2VyVmlzaWJsZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgICBlbWl0KGlubmVyRGF0ZS52YWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVWaXNpYmxlRGF0ZUNoYW5nZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgY29uc3QgbmV3RGF0ZSA9IGRheWpzKHZhbHVlLCBkYXRlRm9ybWF0LnZhbHVlKS5sb2NhbGUobGFuZy52YWx1ZSk7XG4gICAgICBpZiAobmV3RGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgaWYgKGRpc2FibGVkRGF0ZSAmJiBkaXNhYmxlZERhdGUobmV3RGF0ZS50b0RhdGUoKSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBob3VyLCBtaW51dGUsIHNlY29uZCB9ID0gZ2V0VW5pdHMoaW5uZXJEYXRlLnZhbHVlKTtcbiAgICAgICAgaW5uZXJEYXRlLnZhbHVlID0gbmV3RGF0ZS5ob3VyKGhvdXIpLm1pbnV0ZShtaW51dGUpLnNlY29uZChzZWNvbmQpO1xuICAgICAgICB1c2VySW5wdXREYXRlLnZhbHVlID0gbnVsbDtcbiAgICAgICAgZW1pdChpbm5lckRhdGUudmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaXNWYWxpZFZhbHVlID0gKGRhdGUpID0+IHtcbiAgICAgIHJldHVybiBkYXlqcy5pc0RheWpzKGRhdGUpICYmIGRhdGUuaXNWYWxpZCgpICYmIChkaXNhYmxlZERhdGUgPyAhZGlzYWJsZWREYXRlKGRhdGUudG9EYXRlKCkpIDogdHJ1ZSk7XG4gICAgfTtcbiAgICBjb25zdCBmb3JtYXRUb1N0cmluZyA9ICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHNlbGVjdGlvbk1vZGUudmFsdWUgPT09IFwiZGF0ZXNcIikge1xuICAgICAgICByZXR1cm4gdmFsdWUubWFwKChfKSA9PiBfLmZvcm1hdChwcm9wcy5mb3JtYXQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZS5mb3JtYXQocHJvcHMuZm9ybWF0KTtcbiAgICB9O1xuICAgIGNvbnN0IHBhcnNlVXNlcklucHV0ID0gKHZhbHVlKSA9PiB7XG4gICAgICByZXR1cm4gZGF5anModmFsdWUsIHByb3BzLmZvcm1hdCkubG9jYWxlKGxhbmcudmFsdWUpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0RGVmYXVsdFZhbHVlID0gKCkgPT4ge1xuICAgICAgY29uc3QgcGFyc2VEYXRlID0gZGF5anMoZGVmYXVsdFZhbHVlLnZhbHVlKS5sb2NhbGUobGFuZy52YWx1ZSk7XG4gICAgICBpZiAoIWRlZmF1bHRWYWx1ZS52YWx1ZSkge1xuICAgICAgICBjb25zdCBkZWZhdWx0VGltZURWYWx1ZSA9IGRlZmF1bHRUaW1lRC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIGRheWpzKCkuaG91cihkZWZhdWx0VGltZURWYWx1ZS5ob3VyKCkpLm1pbnV0ZShkZWZhdWx0VGltZURWYWx1ZS5taW51dGUoKSkuc2Vjb25kKGRlZmF1bHRUaW1lRFZhbHVlLnNlY29uZCgpKS5sb2NhbGUobGFuZy52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VEYXRlO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlRm9jdXNQaWNrZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAoW1wid2Vla1wiLCBcIm1vbnRoXCIsIFwieWVhclwiLCBcImRhdGVcIl0uaW5jbHVkZXMoc2VsZWN0aW9uTW9kZS52YWx1ZSkpIHtcbiAgICAgICAgKF9hID0gY3VycmVudFZpZXdSZWYudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5mb2N1cygpO1xuICAgICAgICBpZiAoc2VsZWN0aW9uTW9kZS52YWx1ZSA9PT0gXCJ3ZWVrXCIpIHtcbiAgICAgICAgICBoYW5kbGVLZXlDb250cm9sKEVWRU5UX0NPREUuZG93bik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUtleWRvd25UYWJsZSA9IChldmVudCkgPT4ge1xuICAgICAgY29uc3QgeyBjb2RlIH0gPSBldmVudDtcbiAgICAgIGNvbnN0IHZhbGlkQ29kZSA9IFtcbiAgICAgICAgRVZFTlRfQ09ERS51cCxcbiAgICAgICAgRVZFTlRfQ09ERS5kb3duLFxuICAgICAgICBFVkVOVF9DT0RFLmxlZnQsXG4gICAgICAgIEVWRU5UX0NPREUucmlnaHQsXG4gICAgICAgIEVWRU5UX0NPREUuaG9tZSxcbiAgICAgICAgRVZFTlRfQ09ERS5lbmQsXG4gICAgICAgIEVWRU5UX0NPREUucGFnZVVwLFxuICAgICAgICBFVkVOVF9DT0RFLnBhZ2VEb3duXG4gICAgICBdO1xuICAgICAgaWYgKHZhbGlkQ29kZS5pbmNsdWRlcyhjb2RlKSkge1xuICAgICAgICBoYW5kbGVLZXlDb250cm9sKGNvZGUpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChbRVZFTlRfQ09ERS5lbnRlciwgRVZFTlRfQ09ERS5zcGFjZV0uaW5jbHVkZXMoY29kZSkgJiYgdXNlcklucHV0RGF0ZS52YWx1ZSA9PT0gbnVsbCAmJiB1c2VySW5wdXRUaW1lLnZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGVtaXQoaW5uZXJEYXRlLnZhbHVlLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVLZXlDb250cm9sID0gKGNvZGUpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIGNvbnN0IHsgdXAsIGRvd24sIGxlZnQsIHJpZ2h0LCBob21lLCBlbmQsIHBhZ2VVcCwgcGFnZURvd24gfSA9IEVWRU5UX0NPREU7XG4gICAgICBjb25zdCBtYXBwaW5nID0ge1xuICAgICAgICB5ZWFyOiB7XG4gICAgICAgICAgW3VwXTogLTQsXG4gICAgICAgICAgW2Rvd25dOiA0LFxuICAgICAgICAgIFtsZWZ0XTogLTEsXG4gICAgICAgICAgW3JpZ2h0XTogMSxcbiAgICAgICAgICBvZmZzZXQ6IChkYXRlLCBzdGVwKSA9PiBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoOiB7XG4gICAgICAgICAgW3VwXTogLTQsXG4gICAgICAgICAgW2Rvd25dOiA0LFxuICAgICAgICAgIFtsZWZ0XTogLTEsXG4gICAgICAgICAgW3JpZ2h0XTogMSxcbiAgICAgICAgICBvZmZzZXQ6IChkYXRlLCBzdGVwKSA9PiBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICBbdXBdOiAtMSxcbiAgICAgICAgICBbZG93bl06IDEsXG4gICAgICAgICAgW2xlZnRdOiAtMSxcbiAgICAgICAgICBbcmlnaHRdOiAxLFxuICAgICAgICAgIG9mZnNldDogKGRhdGUsIHN0ZXApID0+IGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KVxuICAgICAgICB9LFxuICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgW3VwXTogLTcsXG4gICAgICAgICAgW2Rvd25dOiA3LFxuICAgICAgICAgIFtsZWZ0XTogLTEsXG4gICAgICAgICAgW3JpZ2h0XTogMSxcbiAgICAgICAgICBbaG9tZV06IChkYXRlKSA9PiAtZGF0ZS5nZXREYXkoKSxcbiAgICAgICAgICBbZW5kXTogKGRhdGUpID0+IC1kYXRlLmdldERheSgpICsgNixcbiAgICAgICAgICBbcGFnZVVwXTogKGRhdGUpID0+IC1uZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMCkuZ2V0RGF0ZSgpLFxuICAgICAgICAgIFtwYWdlRG93bl06IChkYXRlKSA9PiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSArIDEsIDApLmdldERhdGUoKSxcbiAgICAgICAgICBvZmZzZXQ6IChkYXRlLCBzdGVwKSA9PiBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgbmV3RGF0ZSA9IGlubmVyRGF0ZS52YWx1ZS50b0RhdGUoKTtcbiAgICAgIHdoaWxlIChNYXRoLmFicyhpbm5lckRhdGUudmFsdWUuZGlmZihuZXdEYXRlLCBcInllYXJcIiwgdHJ1ZSkpIDwgMSkge1xuICAgICAgICBjb25zdCBtYXAgPSBtYXBwaW5nW2tleWJvYXJkTW9kZS52YWx1ZV07XG4gICAgICAgIGlmICghbWFwKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbWFwLm9mZnNldChuZXdEYXRlLCBpc0Z1bmN0aW9uKG1hcFtjb2RlXSkgPyBtYXBbY29kZV0obmV3RGF0ZSkgOiAoX2EgPSBtYXBbY29kZV0pICE9IG51bGwgPyBfYSA6IDApO1xuICAgICAgICBpZiAoZGlzYWJsZWREYXRlICYmIGRpc2FibGVkRGF0ZShuZXdEYXRlKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGRheWpzKG5ld0RhdGUpLmxvY2FsZShsYW5nLnZhbHVlKTtcbiAgICAgICAgaW5uZXJEYXRlLnZhbHVlID0gcmVzdWx0O1xuICAgICAgICBjb250ZXh0RW1pdChcInBpY2tcIiwgcmVzdWx0LCB0cnVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVQYW5lbENoYW5nZSA9IChtb2RlKSA9PiB7XG4gICAgICBjb250ZXh0RW1pdChcInBhbmVsLWNoYW5nZVwiLCBpbm5lckRhdGUudmFsdWUudG9EYXRlKCksIG1vZGUsIGN1cnJlbnRWaWV3LnZhbHVlKTtcbiAgICB9O1xuICAgIHdhdGNoKCgpID0+IHNlbGVjdGlvbk1vZGUudmFsdWUsICh2YWwpID0+IHtcbiAgICAgIGlmIChbXCJtb250aFwiLCBcInllYXJcIl0uaW5jbHVkZXModmFsKSkge1xuICAgICAgICBjdXJyZW50Vmlldy52YWx1ZSA9IHZhbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3VycmVudFZpZXcudmFsdWUgPSBcImRhdGVcIjtcbiAgICB9LCB7IGltbWVkaWF0ZTogdHJ1ZSB9KTtcbiAgICB3YXRjaCgoKSA9PiBjdXJyZW50Vmlldy52YWx1ZSwgKCkgPT4ge1xuICAgICAgcG9wcGVyID09IG51bGwgPyB2b2lkIDAgOiBwb3BwZXIudXBkYXRlUG9wcGVyKCk7XG4gICAgfSk7XG4gICAgd2F0Y2goKCkgPT4gZGVmYXVsdFZhbHVlLnZhbHVlLCAodmFsKSA9PiB7XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIGlubmVyRGF0ZS52YWx1ZSA9IGdldERlZmF1bHRWYWx1ZSgpO1xuICAgICAgfVxuICAgIH0sIHsgaW1tZWRpYXRlOiB0cnVlIH0pO1xuICAgIHdhdGNoKCgpID0+IHByb3BzLnBhcnNlZFZhbHVlLCAodmFsKSA9PiB7XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb25Nb2RlLnZhbHVlID09PSBcImRhdGVzXCIpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaW5uZXJEYXRlLnZhbHVlID0gdmFsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5uZXJEYXRlLnZhbHVlID0gZ2V0RGVmYXVsdFZhbHVlKCk7XG4gICAgICB9XG4gICAgfSwgeyBpbW1lZGlhdGU6IHRydWUgfSk7XG4gICAgY29udGV4dEVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLCBbXCJpc1ZhbGlkVmFsdWVcIiwgaXNWYWxpZFZhbHVlXSk7XG4gICAgY29udGV4dEVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLCBbXCJmb3JtYXRUb1N0cmluZ1wiLCBmb3JtYXRUb1N0cmluZ10pO1xuICAgIGNvbnRleHRFbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIiwgW1wicGFyc2VVc2VySW5wdXRcIiwgcGFyc2VVc2VySW5wdXRdKTtcbiAgICBjb250ZXh0RW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsIFtcImhhbmRsZUZvY3VzUGlja2VyXCIsIGhhbmRsZUZvY3VzUGlja2VyXSk7XG4gICAgcmV0dXJuIChfY3R4LCBfY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcbiAgICAgICAgICB1bnJlZihwcE5zKS5iKCksXG4gICAgICAgICAgdW5yZWYoZHBOcykuYigpLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaGFzLXNpZGViYXJcIjogX2N0eC4kc2xvdHMuc2lkZWJhciB8fCB1bnJlZihoYXNTaG9ydGN1dHMpLFxuICAgICAgICAgICAgXCJoYXMtdGltZVwiOiB1bnJlZihzaG93VGltZSlcbiAgICAgICAgICB9XG4gICAgICAgIF0pXG4gICAgICB9LCBbXG4gICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKHBwTnMpLmUoXCJib2R5LXdyYXBwZXJcIikpXG4gICAgICAgIH0sIFtcbiAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcInNpZGViYXJcIiwge1xuICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKHBwTnMpLmUoXCJzaWRlYmFyXCIpKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHVucmVmKGhhc1Nob3J0Y3V0cykgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYocHBOcykuZShcInNpZGViYXJcIikpXG4gICAgICAgICAgfSwgW1xuICAgICAgICAgICAgKG9wZW5CbG9jayh0cnVlKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCBudWxsLCByZW5kZXJMaXN0KHVucmVmKHNob3J0Y3V0cyksIChzaG9ydGN1dCwga2V5KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYocHBOcykuZShcInNob3J0Y3V0XCIpKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoJGV2ZW50KSA9PiBoYW5kbGVTaG9ydGN1dENsaWNrKHNob3J0Y3V0KVxuICAgICAgICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcoc2hvcnRjdXQudGV4dCksIDExLCBfaG9pc3RlZF8xKTtcbiAgICAgICAgICAgIH0pLCAxMjgpKVxuICAgICAgICAgIF0sIDIpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihwcE5zKS5lKFwiYm9keVwiKSlcbiAgICAgICAgICB9LCBbXG4gICAgICAgICAgICB1bnJlZihzaG93VGltZSkgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKGRwTnMpLmUoXCJ0aW1lLWhlYWRlclwiKSlcbiAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKGRwTnMpLmUoXCJlZGl0b3Itd3JhcFwiKSlcbiAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEVsSW5wdXQpLCB7XG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdW5yZWYodCkoXCJlbC5kYXRlcGlja2VyLnNlbGVjdERhdGVcIiksXG4gICAgICAgICAgICAgICAgICBcIm1vZGVsLXZhbHVlXCI6IHVucmVmKHZpc2libGVEYXRlKSxcbiAgICAgICAgICAgICAgICAgIHNpemU6IFwic21hbGxcIixcbiAgICAgICAgICAgICAgICAgIFwidmFsaWRhdGUtZXZlbnRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBvbklucHV0OiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICh2YWwpID0+IHVzZXJJbnB1dERhdGUudmFsdWUgPSB2YWwpLFxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZVZpc2libGVEYXRlQ2hhbmdlXG4gICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wicGxhY2Vob2xkZXJcIiwgXCJtb2RlbC12YWx1ZVwiXSlcbiAgICAgICAgICAgICAgXSwgMiksXG4gICAgICAgICAgICAgIHdpdGhEaXJlY3RpdmVzKChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKGRwTnMpLmUoXCJlZGl0b3Itd3JhcFwiKSlcbiAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEVsSW5wdXQpLCB7XG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdW5yZWYodCkoXCJlbC5kYXRlcGlja2VyLnNlbGVjdFRpbWVcIiksXG4gICAgICAgICAgICAgICAgICBcIm1vZGVsLXZhbHVlXCI6IHVucmVmKHZpc2libGVUaW1lKSxcbiAgICAgICAgICAgICAgICAgIHNpemU6IFwic21hbGxcIixcbiAgICAgICAgICAgICAgICAgIFwidmFsaWRhdGUtZXZlbnRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBvbkZvY3VzOiBvblRpbWVQaWNrZXJJbnB1dEZvY3VzLFxuICAgICAgICAgICAgICAgICAgb25JbnB1dDogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAodmFsKSA9PiB1c2VySW5wdXRUaW1lLnZhbHVlID0gdmFsKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVWaXNpYmxlVGltZUNoYW5nZVxuICAgICAgICAgICAgICAgIH0sIG51bGwsIDgsIFtcInBsYWNlaG9sZGVyXCIsIFwibW9kZWwtdmFsdWVcIl0pLFxuICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKFRpbWVQaWNrUGFuZWwpLCB7XG4gICAgICAgICAgICAgICAgICB2aXNpYmxlOiB0aW1lUGlja2VyVmlzaWJsZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIGZvcm1hdDogdW5yZWYodGltZUZvcm1hdCksXG4gICAgICAgICAgICAgICAgICBcInRpbWUtYXJyb3ctY29udHJvbFwiOiB1bnJlZihhcnJvd0NvbnRyb2wpLFxuICAgICAgICAgICAgICAgICAgXCJwYXJzZWQtdmFsdWVcIjogaW5uZXJEYXRlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgb25QaWNrOiBoYW5kbGVUaW1lUGlja1xuICAgICAgICAgICAgICAgIH0sIG51bGwsIDgsIFtcInZpc2libGVcIiwgXCJmb3JtYXRcIiwgXCJ0aW1lLWFycm93LWNvbnRyb2xcIiwgXCJwYXJzZWQtdmFsdWVcIl0pXG4gICAgICAgICAgICAgIF0sIDIpKSwgW1xuICAgICAgICAgICAgICAgIFt1bnJlZihDbGlja091dHNpZGUpLCBoYW5kbGVUaW1lUGlja0Nsb3NlXVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSwgMikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgIHdpdGhEaXJlY3RpdmVzKGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbXG4gICAgICAgICAgICAgICAgdW5yZWYoZHBOcykuZShcImhlYWRlclwiKSxcbiAgICAgICAgICAgICAgICAoY3VycmVudFZpZXcudmFsdWUgPT09IFwieWVhclwiIHx8IGN1cnJlbnRWaWV3LnZhbHVlID09PSBcIm1vbnRoXCIpICYmIHVucmVmKGRwTnMpLmUoXCJoZWFkZXItLWJvcmRlcmVkXCIpXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcE5zKS5lKFwicHJldi1idG5cIikpXG4gICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB1bnJlZih0KShgZWwuZGF0ZXBpY2tlci5wcmV2WWVhcmApLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcImQtYXJyb3ctbGVmdFwiLCB1bnJlZihwcE5zKS5lKFwiaWNvbi1idG5cIildKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gKCRldmVudCkgPT4gbW92ZUJ5WWVhcihmYWxzZSkpXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJY29uKSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihEQXJyb3dMZWZ0KSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSwgMTAsIF9ob2lzdGVkXzIpLFxuICAgICAgICAgICAgICAgIHdpdGhEaXJlY3RpdmVzKGNyZWF0ZUVsZW1lbnRWTm9kZShcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHVucmVmKHQpKGBlbC5kYXRlcGlja2VyLnByZXZNb250aGApLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihwcE5zKS5lKFwiaWNvbi1idG5cIiksIFwiYXJyb3ctbGVmdFwiXSksXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbM10gfHwgKF9jYWNoZVszXSA9ICgkZXZlbnQpID0+IG1vdmVCeU1vbnRoKGZhbHNlKSlcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbEljb24pLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEFycm93TGVmdCkpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0sIDEwLCBfaG9pc3RlZF8zKSwgW1xuICAgICAgICAgICAgICAgICAgW3ZTaG93LCBjdXJyZW50Vmlldy52YWx1ZSA9PT0gXCJkYXRlXCJdXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXSwgMiksXG4gICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKGRwTnMpLmUoXCJoZWFkZXItbGFiZWxcIikpLFxuICAgICAgICAgICAgICAgIFwiYXJpYS1saXZlXCI6IFwicG9saXRlXCIsXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg6IFwiMFwiLFxuICAgICAgICAgICAgICAgIG9uS2V5ZG93bjogX2NhY2hlWzRdIHx8IChfY2FjaGVbNF0gPSB3aXRoS2V5cygoJGV2ZW50KSA9PiBzaG93UGlja2VyKFwieWVhclwiKSwgW1wiZW50ZXJcIl0pKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9ICgkZXZlbnQpID0+IHNob3dQaWNrZXIoXCJ5ZWFyXCIpKVxuICAgICAgICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcodW5yZWYoeWVhckxhYmVsKSksIDM1KSxcbiAgICAgICAgICAgICAgd2l0aERpcmVjdGl2ZXMoY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgcm9sZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICBcImFyaWEtbGl2ZVwiOiBcInBvbGl0ZVwiLFxuICAgICAgICAgICAgICAgIHRhYmluZGV4OiBcIjBcIixcbiAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1xuICAgICAgICAgICAgICAgICAgdW5yZWYoZHBOcykuZShcImhlYWRlci1sYWJlbFwiKSxcbiAgICAgICAgICAgICAgICAgIHsgYWN0aXZlOiBjdXJyZW50Vmlldy52YWx1ZSA9PT0gXCJtb250aFwiIH1cbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBvbktleWRvd246IF9jYWNoZVs2XSB8fCAoX2NhY2hlWzZdID0gd2l0aEtleXMoKCRldmVudCkgPT4gc2hvd1BpY2tlcihcIm1vbnRoXCIpLCBbXCJlbnRlclwiXSkpLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVs3XSB8fCAoX2NhY2hlWzddID0gKCRldmVudCkgPT4gc2hvd1BpY2tlcihcIm1vbnRoXCIpKVxuICAgICAgICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcodW5yZWYodCkoYGVsLmRhdGVwaWNrZXIubW9udGgke3VucmVmKG1vbnRoKSArIDF9YCkpLCAzNSksIFtcbiAgICAgICAgICAgICAgICBbdlNob3csIGN1cnJlbnRWaWV3LnZhbHVlID09PSBcImRhdGVcIl1cbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcE5zKS5lKFwibmV4dC1idG5cIikpXG4gICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICB3aXRoRGlyZWN0aXZlcyhjcmVhdGVFbGVtZW50Vk5vZGUoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB1bnJlZih0KShgZWwuZGF0ZXBpY2tlci5uZXh0TW9udGhgKSxcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbdW5yZWYocHBOcykuZShcImljb24tYnRuXCIpLCBcImFycm93LXJpZ2h0XCJdKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVs4XSB8fCAoX2NhY2hlWzhdID0gKCRldmVudCkgPT4gbW92ZUJ5TW9udGgodHJ1ZSkpXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJY29uKSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihBcnJvd1JpZ2h0KSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSwgMTAsIF9ob2lzdGVkXzQpLCBbXG4gICAgICAgICAgICAgICAgICBbdlNob3csIGN1cnJlbnRWaWV3LnZhbHVlID09PSBcImRhdGVcIl1cbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB1bnJlZih0KShgZWwuZGF0ZXBpY2tlci5uZXh0WWVhcmApLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihwcE5zKS5lKFwiaWNvbi1idG5cIiksIFwiZC1hcnJvdy1yaWdodFwiXSksXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbOV0gfHwgKF9jYWNoZVs5XSA9ICgkZXZlbnQpID0+IG1vdmVCeVllYXIodHJ1ZSkpXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJY29uKSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihEQXJyb3dSaWdodCkpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0sIDEwLCBfaG9pc3RlZF81KVxuICAgICAgICAgICAgICBdLCAyKVxuICAgICAgICAgICAgXSwgMiksIFtcbiAgICAgICAgICAgICAgW3ZTaG93LCBjdXJyZW50Vmlldy52YWx1ZSAhPT0gXCJ0aW1lXCJdXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihwcE5zKS5lKFwiY29udGVudFwiKSksXG4gICAgICAgICAgICAgIG9uS2V5ZG93bjogaGFuZGxlS2V5ZG93blRhYmxlXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgIGN1cnJlbnRWaWV3LnZhbHVlID09PSBcImRhdGVcIiA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soRGF0ZVRhYmxlLCB7XG4gICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgIHJlZl9rZXk6IFwiY3VycmVudFZpZXdSZWZcIixcbiAgICAgICAgICAgICAgICByZWY6IGN1cnJlbnRWaWV3UmVmLFxuICAgICAgICAgICAgICAgIFwic2VsZWN0aW9uLW1vZGVcIjogdW5yZWYoc2VsZWN0aW9uTW9kZSksXG4gICAgICAgICAgICAgICAgZGF0ZTogaW5uZXJEYXRlLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwicGFyc2VkLXZhbHVlXCI6IF9jdHgucGFyc2VkVmFsdWUsXG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlZC1kYXRlXCI6IHVucmVmKGRpc2FibGVkRGF0ZSksXG4gICAgICAgICAgICAgICAgXCJjZWxsLWNsYXNzLW5hbWVcIjogdW5yZWYoY2VsbENsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgb25QaWNrOiBoYW5kbGVEYXRlUGlja1xuICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJzZWxlY3Rpb24tbW9kZVwiLCBcImRhdGVcIiwgXCJwYXJzZWQtdmFsdWVcIiwgXCJkaXNhYmxlZC1kYXRlXCIsIFwiY2VsbC1jbGFzcy1uYW1lXCJdKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICAgICAgICBjdXJyZW50Vmlldy52YWx1ZSA9PT0gXCJ5ZWFyXCIgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKFllYXJUYWJsZSwge1xuICAgICAgICAgICAgICAgIGtleTogMSxcbiAgICAgICAgICAgICAgICByZWZfa2V5OiBcImN1cnJlbnRWaWV3UmVmXCIsXG4gICAgICAgICAgICAgICAgcmVmOiBjdXJyZW50Vmlld1JlZixcbiAgICAgICAgICAgICAgICBkYXRlOiBpbm5lckRhdGUudmFsdWUsXG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlZC1kYXRlXCI6IHVucmVmKGRpc2FibGVkRGF0ZSksXG4gICAgICAgICAgICAgICAgXCJwYXJzZWQtdmFsdWVcIjogX2N0eC5wYXJzZWRWYWx1ZSxcbiAgICAgICAgICAgICAgICBvblBpY2s6IGhhbmRsZVllYXJQaWNrXG4gICAgICAgICAgICAgIH0sIG51bGwsIDgsIFtcImRhdGVcIiwgXCJkaXNhYmxlZC1kYXRlXCIsIFwicGFyc2VkLXZhbHVlXCJdKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICAgICAgICBjdXJyZW50Vmlldy52YWx1ZSA9PT0gXCJtb250aFwiID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhNb250aFRhYmxlLCB7XG4gICAgICAgICAgICAgICAga2V5OiAyLFxuICAgICAgICAgICAgICAgIHJlZl9rZXk6IFwiY3VycmVudFZpZXdSZWZcIixcbiAgICAgICAgICAgICAgICByZWY6IGN1cnJlbnRWaWV3UmVmLFxuICAgICAgICAgICAgICAgIGRhdGU6IGlubmVyRGF0ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICBcInBhcnNlZC12YWx1ZVwiOiBfY3R4LnBhcnNlZFZhbHVlLFxuICAgICAgICAgICAgICAgIFwiZGlzYWJsZWQtZGF0ZVwiOiB1bnJlZihkaXNhYmxlZERhdGUpLFxuICAgICAgICAgICAgICAgIG9uUGljazogaGFuZGxlTW9udGhQaWNrXG4gICAgICAgICAgICAgIH0sIG51bGwsIDgsIFtcImRhdGVcIiwgXCJwYXJzZWQtdmFsdWVcIiwgXCJkaXNhYmxlZC1kYXRlXCJdKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgICAgICAgICBdLCAzNClcbiAgICAgICAgICBdLCAyKVxuICAgICAgICBdLCAyKSxcbiAgICAgICAgd2l0aERpcmVjdGl2ZXMoY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYocHBOcykuZShcImZvb3RlclwiKSlcbiAgICAgICAgfSwgW1xuICAgICAgICAgIHdpdGhEaXJlY3RpdmVzKGNyZWF0ZVZOb2RlKHVucmVmKEVsQnV0dG9uKSwge1xuICAgICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICAgIHNpemU6IFwic21hbGxcIixcbiAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihwcE5zKS5lKFwibGluay1idG5cIikpLFxuICAgICAgICAgICAgb25DbGljazogY2hhbmdlVG9Ob3dcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgY3JlYXRlVGV4dFZOb2RlKHRvRGlzcGxheVN0cmluZyh1bnJlZih0KShcImVsLmRhdGVwaWNrZXIubm93XCIpKSwgMSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMVxuICAgICAgICAgIH0sIDgsIFtcImNsYXNzXCJdKSwgW1xuICAgICAgICAgICAgW3ZTaG93LCB1bnJlZihzZWxlY3Rpb25Nb2RlKSAhPT0gXCJkYXRlc1wiXVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEVsQnV0dG9uKSwge1xuICAgICAgICAgICAgcGxhaW46IFwiXCIsXG4gICAgICAgICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYocHBOcykuZShcImxpbmstYnRuXCIpKSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IG9uQ29uZmlybVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBjcmVhdGVUZXh0Vk5vZGUodG9EaXNwbGF5U3RyaW5nKHVucmVmKHQpKFwiZWwuZGF0ZXBpY2tlci5jb25maXJtXCIpKSwgMSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMVxuICAgICAgICAgIH0sIDgsIFtcImNsYXNzXCJdKVxuICAgICAgICBdLCAyKSwgW1xuICAgICAgICAgIFt2U2hvdywgdW5yZWYoZm9vdGVyVmlzaWJsZSkgJiYgY3VycmVudFZpZXcudmFsdWUgPT09IFwiZGF0ZVwiXVxuICAgICAgICBdKVxuICAgICAgXSwgMik7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgRGF0ZVBpY2tQYW5lbCA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9wYW5lbC1kYXRlLXBpY2sudnVlXCJdXSk7XG5cbmV4cG9ydCB7IERhdGVQaWNrUGFuZWwgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFuZWwtZGF0ZS1waWNrLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCB7IHBhbmVsU2hhcmVkUHJvcHMsIHBhbmVsUmFuZ2VTaGFyZWRQcm9wcyB9IGZyb20gJy4vc2hhcmVkLm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcblxuY29uc3QgcGFuZWxEYXRlUmFuZ2VQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICAuLi5wYW5lbFNoYXJlZFByb3BzLFxuICAuLi5wYW5lbFJhbmdlU2hhcmVkUHJvcHNcbn0pO1xuXG5leHBvcnQgeyBwYW5lbERhdGVSYW5nZVByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYW5lbC1kYXRlLXJhbmdlLm1qcy5tYXBcbiIsImltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSwgdXNlQXR0cnMsIHVzZVNsb3RzIH0gZnJvbSAndnVlJztcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCB1c2VTaG9ydGN1dCA9IChsYW5nKSA9PiB7XG4gIGNvbnN0IHsgZW1pdCB9ID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGNvbnN0IGF0dHJzID0gdXNlQXR0cnMoKTtcbiAgY29uc3Qgc2xvdHMgPSB1c2VTbG90cygpO1xuICBjb25zdCBoYW5kbGVTaG9ydGN1dENsaWNrID0gKHNob3J0Y3V0KSA9PiB7XG4gICAgY29uc3Qgc2hvcnRjdXRWYWx1ZXMgPSBpc0Z1bmN0aW9uKHNob3J0Y3V0LnZhbHVlKSA/IHNob3J0Y3V0LnZhbHVlKCkgOiBzaG9ydGN1dC52YWx1ZTtcbiAgICBpZiAoc2hvcnRjdXRWYWx1ZXMpIHtcbiAgICAgIGVtaXQoXCJwaWNrXCIsIFtcbiAgICAgICAgZGF5anMoc2hvcnRjdXRWYWx1ZXNbMF0pLmxvY2FsZShsYW5nLnZhbHVlKSxcbiAgICAgICAgZGF5anMoc2hvcnRjdXRWYWx1ZXNbMV0pLmxvY2FsZShsYW5nLnZhbHVlKVxuICAgICAgXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzaG9ydGN1dC5vbkNsaWNrKSB7XG4gICAgICBzaG9ydGN1dC5vbkNsaWNrKHtcbiAgICAgICAgYXR0cnMsXG4gICAgICAgIHNsb3RzLFxuICAgICAgICBlbWl0XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoYW5kbGVTaG9ydGN1dENsaWNrO1xufTtcblxuZXhwb3J0IHsgdXNlU2hvcnRjdXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1zaG9ydGN1dC5tanMubWFwXG4iLCJpbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UsIGluamVjdCwgcmVmLCB1bnJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNWYWxpZFJhbmdlLCBnZXREZWZhdWx0VmFsdWUgfSBmcm9tICcuLi91dGlscy5tanMnO1xuaW1wb3J0IHsgUk9PVF9QSUNLRVJfSU5KRUNUSU9OX0tFWSB9IGZyb20gJy4uL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgdXNlU2hvcnRjdXQgfSBmcm9tICcuL3VzZS1zaG9ydGN1dC5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlLWxvY2FsZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3QgdXNlUmFuZ2VQaWNrZXIgPSAocHJvcHMsIHtcbiAgZGVmYXVsdFZhbHVlLFxuICBsZWZ0RGF0ZSxcbiAgcmlnaHREYXRlLFxuICB1bml0LFxuICBvblBhcnNlZFZhbHVlQ2hhbmdlZFxufSkgPT4ge1xuICBjb25zdCB7IGVtaXQgfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBjb25zdCB7IHBpY2tlck5zIH0gPSBpbmplY3QoUk9PVF9QSUNLRVJfSU5KRUNUSU9OX0tFWSk7XG4gIGNvbnN0IGRycE5zID0gdXNlTmFtZXNwYWNlKFwiZGF0ZS1yYW5nZS1waWNrZXJcIik7XG4gIGNvbnN0IHsgdCwgbGFuZyB9ID0gdXNlTG9jYWxlKCk7XG4gIGNvbnN0IGhhbmRsZVNob3J0Y3V0Q2xpY2sgPSB1c2VTaG9ydGN1dChsYW5nKTtcbiAgY29uc3QgbWluRGF0ZSA9IHJlZigpO1xuICBjb25zdCBtYXhEYXRlID0gcmVmKCk7XG4gIGNvbnN0IHJhbmdlU3RhdGUgPSByZWYoe1xuICAgIGVuZERhdGU6IG51bGwsXG4gICAgc2VsZWN0aW5nOiBmYWxzZVxuICB9KTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlUmFuZ2UgPSAodmFsKSA9PiB7XG4gICAgcmFuZ2VTdGF0ZS52YWx1ZSA9IHZhbDtcbiAgfTtcbiAgY29uc3QgaGFuZGxlUmFuZ2VDb25maXJtID0gKHZpc2libGUgPSBmYWxzZSkgPT4ge1xuICAgIGNvbnN0IF9taW5EYXRlID0gdW5yZWYobWluRGF0ZSk7XG4gICAgY29uc3QgX21heERhdGUgPSB1bnJlZihtYXhEYXRlKTtcbiAgICBpZiAoaXNWYWxpZFJhbmdlKFtfbWluRGF0ZSwgX21heERhdGVdKSkge1xuICAgICAgZW1pdChcInBpY2tcIiwgW19taW5EYXRlLCBfbWF4RGF0ZV0sIHZpc2libGUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25TZWxlY3QgPSAoc2VsZWN0aW5nKSA9PiB7XG4gICAgcmFuZ2VTdGF0ZS52YWx1ZS5zZWxlY3RpbmcgPSBzZWxlY3Rpbmc7XG4gICAgaWYgKCFzZWxlY3RpbmcpIHtcbiAgICAgIHJhbmdlU3RhdGUudmFsdWUuZW5kRGF0ZSA9IG51bGw7XG4gICAgfVxuICB9O1xuICBjb25zdCByZXN0b3JlRGVmYXVsdCA9ICgpID0+IHtcbiAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSBnZXREZWZhdWx0VmFsdWUodW5yZWYoZGVmYXVsdFZhbHVlKSwge1xuICAgICAgbGFuZzogdW5yZWYobGFuZyksXG4gICAgICB1bml0LFxuICAgICAgdW5saW5rUGFuZWxzOiBwcm9wcy51bmxpbmtQYW5lbHNcbiAgICB9KTtcbiAgICBtaW5EYXRlLnZhbHVlID0gdm9pZCAwO1xuICAgIG1heERhdGUudmFsdWUgPSB2b2lkIDA7XG4gICAgbGVmdERhdGUudmFsdWUgPSBzdGFydDtcbiAgICByaWdodERhdGUudmFsdWUgPSBlbmQ7XG4gIH07XG4gIHdhdGNoKGRlZmF1bHRWYWx1ZSwgKHZhbCkgPT4ge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHJlc3RvcmVEZWZhdWx0KCk7XG4gICAgfVxuICB9LCB7IGltbWVkaWF0ZTogdHJ1ZSB9KTtcbiAgd2F0Y2goKCkgPT4gcHJvcHMucGFyc2VkVmFsdWUsIChwYXJzZWRWYWx1ZSkgPT4ge1xuICAgIGlmIChpc0FycmF5KHBhcnNlZFZhbHVlKSAmJiBwYXJzZWRWYWx1ZS5sZW5ndGggPT09IDIpIHtcbiAgICAgIGNvbnN0IFtzdGFydCwgZW5kXSA9IHBhcnNlZFZhbHVlO1xuICAgICAgbWluRGF0ZS52YWx1ZSA9IHN0YXJ0O1xuICAgICAgbGVmdERhdGUudmFsdWUgPSBzdGFydDtcbiAgICAgIG1heERhdGUudmFsdWUgPSBlbmQ7XG4gICAgICBvblBhcnNlZFZhbHVlQ2hhbmdlZCh1bnJlZihtaW5EYXRlKSwgdW5yZWYobWF4RGF0ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0b3JlRGVmYXVsdCgpO1xuICAgIH1cbiAgfSwgeyBpbW1lZGlhdGU6IHRydWUgfSk7XG4gIHJldHVybiB7XG4gICAgbWluRGF0ZSxcbiAgICBtYXhEYXRlLFxuICAgIHJhbmdlU3RhdGUsXG4gICAgbGFuZyxcbiAgICBwcE5zOiBwaWNrZXJOcyxcbiAgICBkcnBOcyxcbiAgICBoYW5kbGVDaGFuZ2VSYW5nZSxcbiAgICBoYW5kbGVSYW5nZUNvbmZpcm0sXG4gICAgaGFuZGxlU2hvcnRjdXRDbGljayxcbiAgICBvblNlbGVjdCxcbiAgICB0XG4gIH07XG59O1xuXG5leHBvcnQgeyB1c2VSYW5nZVBpY2tlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLXJhbmdlLXBpY2tlci5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGluamVjdCwgdG9SZWYsIHJlZiwgY29tcHV0ZWQsIHVucmVmLCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIGNyZWF0ZUVsZW1lbnRWTm9kZSwgcmVuZGVyU2xvdCwgRnJhZ21lbnQsIHJlbmRlckxpc3QsIHRvRGlzcGxheVN0cmluZywgY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVWTm9kZSwgd2l0aERpcmVjdGl2ZXMsIHdpdGhDdHgsIGNyZWF0ZUJsb2NrLCBjcmVhdGVUZXh0Vk5vZGUgfSBmcm9tICd2dWUnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vZGlyZWN0aXZlcy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi91dGlscy9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9ob29rcy9pbmRleC5tanMnO1xuaW1wb3J0IHsgRWxCdXR0b24gfSBmcm9tICcuLi8uLi8uLi9idXR0b24vaW5kZXgubWpzJztcbmltcG9ydCB7IEVsSW5wdXQgfSBmcm9tICcuLi8uLi8uLi9pbnB1dC9pbmRleC5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi90aW1lLXBpY2tlci9pbmRleC5tanMnO1xuaW1wb3J0IHsgRWxJY29uIH0gZnJvbSAnLi4vLi4vLi4vaWNvbi9pbmRleC5tanMnO1xuaW1wb3J0IHsgQXJyb3dSaWdodCwgREFycm93TGVmdCwgQXJyb3dMZWZ0LCBEQXJyb3dSaWdodCB9IGZyb20gJ0BlbGVtZW50LXBsdXMvaWNvbnMtdnVlJztcbmltcG9ydCB7IHBhbmVsRGF0ZVJhbmdlUHJvcHMgfSBmcm9tICcuLi9wcm9wcy9wYW5lbC1kYXRlLXJhbmdlLm1qcyc7XG5pbXBvcnQgeyB1c2VSYW5nZVBpY2tlciB9IGZyb20gJy4uL2NvbXBvc2FibGVzL3VzZS1yYW5nZS1waWNrZXIubWpzJztcbmltcG9ydCB7IGlzVmFsaWRSYW5nZSwgZ2V0RGVmYXVsdFZhbHVlIH0gZnJvbSAnLi4vdXRpbHMubWpzJztcbmltcG9ydCBEYXRlVGFibGUgZnJvbSAnLi9iYXNpYy1kYXRlLXRhYmxlLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBleHRyYWN0VGltZUZvcm1hdCwgZXh0cmFjdERhdGVGb3JtYXQgfSBmcm9tICcuLi8uLi8uLi90aW1lLXBpY2tlci9zcmMvdXRpbHMubWpzJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5pbXBvcnQgVGltZVBpY2tQYW5lbCBmcm9tICcuLi8uLi8uLi90aW1lLXBpY2tlci9zcmMvdGltZS1waWNrZXItY29tL3BhbmVsLXRpbWUtcGljay5tanMnO1xuaW1wb3J0IENsaWNrT3V0c2lkZSBmcm9tICcuLi8uLi8uLi8uLi9kaXJlY3RpdmVzL2NsaWNrLW91dHNpZGUvaW5kZXgubWpzJztcblxuY29uc3QgX2hvaXN0ZWRfMSA9IFtcIm9uQ2xpY2tcIl07XG5jb25zdCBfaG9pc3RlZF8yID0gW1wiZGlzYWJsZWRcIl07XG5jb25zdCBfaG9pc3RlZF8zID0gW1wiZGlzYWJsZWRcIl07XG5jb25zdCBfaG9pc3RlZF80ID0gW1wiZGlzYWJsZWRcIl07XG5jb25zdCBfaG9pc3RlZF81ID0gW1wiZGlzYWJsZWRcIl07XG5jb25zdCB1bml0ID0gXCJtb250aFwiO1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIF9fbmFtZTogXCJwYW5lbC1kYXRlLXJhbmdlXCIsXG4gIHByb3BzOiBwYW5lbERhdGVSYW5nZVByb3BzLFxuICBlbWl0czogW1xuICAgIFwicGlja1wiLFxuICAgIFwic2V0LXBpY2tlci1vcHRpb25cIixcbiAgICBcImNhbGVuZGFyLWNoYW5nZVwiLFxuICAgIFwicGFuZWwtY2hhbmdlXCJcbiAgXSxcbiAgc2V0dXAoX19wcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgcGlja2VyQmFzZSA9IGluamVjdChcIkVQX1BJQ0tFUl9CQVNFXCIpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpc2FibGVkRGF0ZSxcbiAgICAgIGNlbGxDbGFzc05hbWUsXG4gICAgICBmb3JtYXQsXG4gICAgICBkZWZhdWx0VGltZSxcbiAgICAgIGFycm93Q29udHJvbCxcbiAgICAgIGNsZWFyYWJsZVxuICAgIH0gPSBwaWNrZXJCYXNlLnByb3BzO1xuICAgIGNvbnN0IHNob3J0Y3V0cyA9IHRvUmVmKHBpY2tlckJhc2UucHJvcHMsIFwic2hvcnRjdXRzXCIpO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IHRvUmVmKHBpY2tlckJhc2UucHJvcHMsIFwiZGVmYXVsdFZhbHVlXCIpO1xuICAgIGNvbnN0IHsgbGFuZyB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3QgbGVmdERhdGUgPSByZWYoZGF5anMoKS5sb2NhbGUobGFuZy52YWx1ZSkpO1xuICAgIGNvbnN0IHJpZ2h0RGF0ZSA9IHJlZihkYXlqcygpLmxvY2FsZShsYW5nLnZhbHVlKS5hZGQoMSwgdW5pdCkpO1xuICAgIGNvbnN0IHtcbiAgICAgIG1pbkRhdGUsXG4gICAgICBtYXhEYXRlLFxuICAgICAgcmFuZ2VTdGF0ZSxcbiAgICAgIHBwTnMsXG4gICAgICBkcnBOcyxcbiAgICAgIGhhbmRsZUNoYW5nZVJhbmdlLFxuICAgICAgaGFuZGxlUmFuZ2VDb25maXJtLFxuICAgICAgaGFuZGxlU2hvcnRjdXRDbGljayxcbiAgICAgIG9uU2VsZWN0LFxuICAgICAgdFxuICAgIH0gPSB1c2VSYW5nZVBpY2tlcihwcm9wcywge1xuICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgbGVmdERhdGUsXG4gICAgICByaWdodERhdGUsXG4gICAgICB1bml0LFxuICAgICAgb25QYXJzZWRWYWx1ZUNoYW5nZWRcbiAgICB9KTtcbiAgICBjb25zdCBkYXRlVXNlcklucHV0ID0gcmVmKHtcbiAgICAgIG1pbjogbnVsbCxcbiAgICAgIG1heDogbnVsbFxuICAgIH0pO1xuICAgIGNvbnN0IHRpbWVVc2VySW5wdXQgPSByZWYoe1xuICAgICAgbWluOiBudWxsLFxuICAgICAgbWF4OiBudWxsXG4gICAgfSk7XG4gICAgY29uc3QgbGVmdExhYmVsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGAke2xlZnREYXRlLnZhbHVlLnllYXIoKX0gJHt0KFwiZWwuZGF0ZXBpY2tlci55ZWFyXCIpfSAke3QoYGVsLmRhdGVwaWNrZXIubW9udGgke2xlZnREYXRlLnZhbHVlLm1vbnRoKCkgKyAxfWApfWA7XG4gICAgfSk7XG4gICAgY29uc3QgcmlnaHRMYWJlbCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBgJHtyaWdodERhdGUudmFsdWUueWVhcigpfSAke3QoXCJlbC5kYXRlcGlja2VyLnllYXJcIil9ICR7dChgZWwuZGF0ZXBpY2tlci5tb250aCR7cmlnaHREYXRlLnZhbHVlLm1vbnRoKCkgKyAxfWApfWA7XG4gICAgfSk7XG4gICAgY29uc3QgbGVmdFllYXIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gbGVmdERhdGUudmFsdWUueWVhcigpO1xuICAgIH0pO1xuICAgIGNvbnN0IGxlZnRNb250aCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBsZWZ0RGF0ZS52YWx1ZS5tb250aCgpO1xuICAgIH0pO1xuICAgIGNvbnN0IHJpZ2h0WWVhciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiByaWdodERhdGUudmFsdWUueWVhcigpO1xuICAgIH0pO1xuICAgIGNvbnN0IHJpZ2h0TW9udGggPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcmlnaHREYXRlLnZhbHVlLm1vbnRoKCk7XG4gICAgfSk7XG4gICAgY29uc3QgaGFzU2hvcnRjdXRzID0gY29tcHV0ZWQoKCkgPT4gISFzaG9ydGN1dHMudmFsdWUubGVuZ3RoKTtcbiAgICBjb25zdCBtaW5WaXNpYmxlRGF0ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChkYXRlVXNlcklucHV0LnZhbHVlLm1pbiAhPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGRhdGVVc2VySW5wdXQudmFsdWUubWluO1xuICAgICAgaWYgKG1pbkRhdGUudmFsdWUpXG4gICAgICAgIHJldHVybiBtaW5EYXRlLnZhbHVlLmZvcm1hdChkYXRlRm9ybWF0LnZhbHVlKTtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH0pO1xuICAgIGNvbnN0IG1heFZpc2libGVEYXRlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKGRhdGVVc2VySW5wdXQudmFsdWUubWF4ICE9PSBudWxsKVxuICAgICAgICByZXR1cm4gZGF0ZVVzZXJJbnB1dC52YWx1ZS5tYXg7XG4gICAgICBpZiAobWF4RGF0ZS52YWx1ZSB8fCBtaW5EYXRlLnZhbHVlKVxuICAgICAgICByZXR1cm4gKG1heERhdGUudmFsdWUgfHwgbWluRGF0ZS52YWx1ZSkuZm9ybWF0KGRhdGVGb3JtYXQudmFsdWUpO1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfSk7XG4gICAgY29uc3QgbWluVmlzaWJsZVRpbWUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAodGltZVVzZXJJbnB1dC52YWx1ZS5taW4gIT09IG51bGwpXG4gICAgICAgIHJldHVybiB0aW1lVXNlcklucHV0LnZhbHVlLm1pbjtcbiAgICAgIGlmIChtaW5EYXRlLnZhbHVlKVxuICAgICAgICByZXR1cm4gbWluRGF0ZS52YWx1ZS5mb3JtYXQodGltZUZvcm1hdC52YWx1ZSk7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9KTtcbiAgICBjb25zdCBtYXhWaXNpYmxlVGltZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmICh0aW1lVXNlcklucHV0LnZhbHVlLm1heCAhPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHRpbWVVc2VySW5wdXQudmFsdWUubWF4O1xuICAgICAgaWYgKG1heERhdGUudmFsdWUgfHwgbWluRGF0ZS52YWx1ZSlcbiAgICAgICAgcmV0dXJuIChtYXhEYXRlLnZhbHVlIHx8IG1pbkRhdGUudmFsdWUpLmZvcm1hdCh0aW1lRm9ybWF0LnZhbHVlKTtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH0pO1xuICAgIGNvbnN0IHRpbWVGb3JtYXQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gZXh0cmFjdFRpbWVGb3JtYXQoZm9ybWF0KTtcbiAgICB9KTtcbiAgICBjb25zdCBkYXRlRm9ybWF0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGV4dHJhY3REYXRlRm9ybWF0KGZvcm1hdCk7XG4gICAgfSk7XG4gICAgY29uc3QgbGVmdFByZXZZZWFyID0gKCkgPT4ge1xuICAgICAgbGVmdERhdGUudmFsdWUgPSBsZWZ0RGF0ZS52YWx1ZS5zdWJ0cmFjdCgxLCBcInllYXJcIik7XG4gICAgICBpZiAoIXByb3BzLnVubGlua1BhbmVscykge1xuICAgICAgICByaWdodERhdGUudmFsdWUgPSBsZWZ0RGF0ZS52YWx1ZS5hZGQoMSwgXCJtb250aFwiKTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZVBhbmVsQ2hhbmdlKFwieWVhclwiKTtcbiAgICB9O1xuICAgIGNvbnN0IGxlZnRQcmV2TW9udGggPSAoKSA9PiB7XG4gICAgICBsZWZ0RGF0ZS52YWx1ZSA9IGxlZnREYXRlLnZhbHVlLnN1YnRyYWN0KDEsIFwibW9udGhcIik7XG4gICAgICBpZiAoIXByb3BzLnVubGlua1BhbmVscykge1xuICAgICAgICByaWdodERhdGUudmFsdWUgPSBsZWZ0RGF0ZS52YWx1ZS5hZGQoMSwgXCJtb250aFwiKTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZVBhbmVsQ2hhbmdlKFwibW9udGhcIik7XG4gICAgfTtcbiAgICBjb25zdCByaWdodE5leHRZZWFyID0gKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy51bmxpbmtQYW5lbHMpIHtcbiAgICAgICAgbGVmdERhdGUudmFsdWUgPSBsZWZ0RGF0ZS52YWx1ZS5hZGQoMSwgXCJ5ZWFyXCIpO1xuICAgICAgICByaWdodERhdGUudmFsdWUgPSBsZWZ0RGF0ZS52YWx1ZS5hZGQoMSwgXCJtb250aFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJpZ2h0RGF0ZS52YWx1ZSA9IHJpZ2h0RGF0ZS52YWx1ZS5hZGQoMSwgXCJ5ZWFyXCIpO1xuICAgICAgfVxuICAgICAgaGFuZGxlUGFuZWxDaGFuZ2UoXCJ5ZWFyXCIpO1xuICAgIH07XG4gICAgY29uc3QgcmlnaHROZXh0TW9udGggPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLnVubGlua1BhbmVscykge1xuICAgICAgICBsZWZ0RGF0ZS52YWx1ZSA9IGxlZnREYXRlLnZhbHVlLmFkZCgxLCBcIm1vbnRoXCIpO1xuICAgICAgICByaWdodERhdGUudmFsdWUgPSBsZWZ0RGF0ZS52YWx1ZS5hZGQoMSwgXCJtb250aFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJpZ2h0RGF0ZS52YWx1ZSA9IHJpZ2h0RGF0ZS52YWx1ZS5hZGQoMSwgXCJtb250aFwiKTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZVBhbmVsQ2hhbmdlKFwibW9udGhcIik7XG4gICAgfTtcbiAgICBjb25zdCBsZWZ0TmV4dFllYXIgPSAoKSA9PiB7XG4gICAgICBsZWZ0RGF0ZS52YWx1ZSA9IGxlZnREYXRlLnZhbHVlLmFkZCgxLCBcInllYXJcIik7XG4gICAgICBoYW5kbGVQYW5lbENoYW5nZShcInllYXJcIik7XG4gICAgfTtcbiAgICBjb25zdCBsZWZ0TmV4dE1vbnRoID0gKCkgPT4ge1xuICAgICAgbGVmdERhdGUudmFsdWUgPSBsZWZ0RGF0ZS52YWx1ZS5hZGQoMSwgXCJtb250aFwiKTtcbiAgICAgIGhhbmRsZVBhbmVsQ2hhbmdlKFwibW9udGhcIik7XG4gICAgfTtcbiAgICBjb25zdCByaWdodFByZXZZZWFyID0gKCkgPT4ge1xuICAgICAgcmlnaHREYXRlLnZhbHVlID0gcmlnaHREYXRlLnZhbHVlLnN1YnRyYWN0KDEsIFwieWVhclwiKTtcbiAgICAgIGhhbmRsZVBhbmVsQ2hhbmdlKFwieWVhclwiKTtcbiAgICB9O1xuICAgIGNvbnN0IHJpZ2h0UHJldk1vbnRoID0gKCkgPT4ge1xuICAgICAgcmlnaHREYXRlLnZhbHVlID0gcmlnaHREYXRlLnZhbHVlLnN1YnRyYWN0KDEsIFwibW9udGhcIik7XG4gICAgICBoYW5kbGVQYW5lbENoYW5nZShcIm1vbnRoXCIpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlUGFuZWxDaGFuZ2UgPSAobW9kZSkgPT4ge1xuICAgICAgZW1pdChcInBhbmVsLWNoYW5nZVwiLCBbbGVmdERhdGUudmFsdWUudG9EYXRlKCksIHJpZ2h0RGF0ZS52YWx1ZS50b0RhdGUoKV0sIG1vZGUpO1xuICAgIH07XG4gICAgY29uc3QgZW5hYmxlTW9udGhBcnJvdyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IG5leHRNb250aCA9IChsZWZ0TW9udGgudmFsdWUgKyAxKSAlIDEyO1xuICAgICAgY29uc3QgeWVhck9mZnNldCA9IGxlZnRNb250aC52YWx1ZSArIDEgPj0gMTIgPyAxIDogMDtcbiAgICAgIHJldHVybiBwcm9wcy51bmxpbmtQYW5lbHMgJiYgbmV3IERhdGUobGVmdFllYXIudmFsdWUgKyB5ZWFyT2Zmc2V0LCBuZXh0TW9udGgpIDwgbmV3IERhdGUocmlnaHRZZWFyLnZhbHVlLCByaWdodE1vbnRoLnZhbHVlKTtcbiAgICB9KTtcbiAgICBjb25zdCBlbmFibGVZZWFyQXJyb3cgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudW5saW5rUGFuZWxzICYmIHJpZ2h0WWVhci52YWx1ZSAqIDEyICsgcmlnaHRNb250aC52YWx1ZSAtIChsZWZ0WWVhci52YWx1ZSAqIDEyICsgbGVmdE1vbnRoLnZhbHVlICsgMSkgPj0gMTI7XG4gICAgfSk7XG4gICAgY29uc3QgYnRuRGlzYWJsZWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gIShtaW5EYXRlLnZhbHVlICYmIG1heERhdGUudmFsdWUgJiYgIXJhbmdlU3RhdGUudmFsdWUuc2VsZWN0aW5nICYmIGlzVmFsaWRSYW5nZShbbWluRGF0ZS52YWx1ZSwgbWF4RGF0ZS52YWx1ZV0pKTtcbiAgICB9KTtcbiAgICBjb25zdCBzaG93VGltZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnR5cGUgPT09IFwiZGF0ZXRpbWVcIiB8fCBwcm9wcy50eXBlID09PSBcImRhdGV0aW1lcmFuZ2VcIik7XG4gICAgY29uc3QgZm9ybWF0RW1pdCA9IChlbWl0RGF5anMsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoIWVtaXREYXlqcylcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKGRlZmF1bHRUaW1lKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRUaW1lRCA9IGRheWpzKGRlZmF1bHRUaW1lW2luZGV4XSB8fCBkZWZhdWx0VGltZSkubG9jYWxlKGxhbmcudmFsdWUpO1xuICAgICAgICByZXR1cm4gZGVmYXVsdFRpbWVELnllYXIoZW1pdERheWpzLnllYXIoKSkubW9udGgoZW1pdERheWpzLm1vbnRoKCkpLmRhdGUoZW1pdERheWpzLmRhdGUoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1pdERheWpzO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlUmFuZ2VQaWNrID0gKHZhbCwgY2xvc2UgPSB0cnVlKSA9PiB7XG4gICAgICBjb25zdCBtaW5fID0gdmFsLm1pbkRhdGU7XG4gICAgICBjb25zdCBtYXhfID0gdmFsLm1heERhdGU7XG4gICAgICBjb25zdCBtaW5EYXRlXyA9IGZvcm1hdEVtaXQobWluXywgMCk7XG4gICAgICBjb25zdCBtYXhEYXRlXyA9IGZvcm1hdEVtaXQobWF4XywgMSk7XG4gICAgICBpZiAobWF4RGF0ZS52YWx1ZSA9PT0gbWF4RGF0ZV8gJiYgbWluRGF0ZS52YWx1ZSA9PT0gbWluRGF0ZV8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZW1pdChcImNhbGVuZGFyLWNoYW5nZVwiLCBbbWluXy50b0RhdGUoKSwgbWF4XyAmJiBtYXhfLnRvRGF0ZSgpXSk7XG4gICAgICBtYXhEYXRlLnZhbHVlID0gbWF4RGF0ZV87XG4gICAgICBtaW5EYXRlLnZhbHVlID0gbWluRGF0ZV87XG4gICAgICBpZiAoIWNsb3NlIHx8IHNob3dUaW1lLnZhbHVlKVxuICAgICAgICByZXR1cm47XG4gICAgICBoYW5kbGVSYW5nZUNvbmZpcm0oKTtcbiAgICB9O1xuICAgIGNvbnN0IG1pblRpbWVQaWNrZXJWaXNpYmxlID0gcmVmKGZhbHNlKTtcbiAgICBjb25zdCBtYXhUaW1lUGlja2VyVmlzaWJsZSA9IHJlZihmYWxzZSk7XG4gICAgY29uc3QgaGFuZGxlTWluVGltZUNsb3NlID0gKCkgPT4ge1xuICAgICAgbWluVGltZVBpY2tlclZpc2libGUudmFsdWUgPSBmYWxzZTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZU1heFRpbWVDbG9zZSA9ICgpID0+IHtcbiAgICAgIG1heFRpbWVQaWNrZXJWaXNpYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVEYXRlSW5wdXQgPSAodmFsdWUsIHR5cGUpID0+IHtcbiAgICAgIGRhdGVVc2VySW5wdXQudmFsdWVbdHlwZV0gPSB2YWx1ZTtcbiAgICAgIGNvbnN0IHBhcnNlZFZhbHVlRCA9IGRheWpzKHZhbHVlLCBkYXRlRm9ybWF0LnZhbHVlKS5sb2NhbGUobGFuZy52YWx1ZSk7XG4gICAgICBpZiAocGFyc2VkVmFsdWVELmlzVmFsaWQoKSkge1xuICAgICAgICBpZiAoZGlzYWJsZWREYXRlICYmIGRpc2FibGVkRGF0ZShwYXJzZWRWYWx1ZUQudG9EYXRlKCkpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgbGVmdERhdGUudmFsdWUgPSBwYXJzZWRWYWx1ZUQ7XG4gICAgICAgICAgbWluRGF0ZS52YWx1ZSA9IChtaW5EYXRlLnZhbHVlIHx8IGxlZnREYXRlLnZhbHVlKS55ZWFyKHBhcnNlZFZhbHVlRC55ZWFyKCkpLm1vbnRoKHBhcnNlZFZhbHVlRC5tb250aCgpKS5kYXRlKHBhcnNlZFZhbHVlRC5kYXRlKCkpO1xuICAgICAgICAgIGlmICghcHJvcHMudW5saW5rUGFuZWxzKSB7XG4gICAgICAgICAgICByaWdodERhdGUudmFsdWUgPSBwYXJzZWRWYWx1ZUQuYWRkKDEsIFwibW9udGhcIik7XG4gICAgICAgICAgICBtYXhEYXRlLnZhbHVlID0gbWluRGF0ZS52YWx1ZS5hZGQoMSwgXCJtb250aFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmlnaHREYXRlLnZhbHVlID0gcGFyc2VkVmFsdWVEO1xuICAgICAgICAgIG1heERhdGUudmFsdWUgPSAobWF4RGF0ZS52YWx1ZSB8fCByaWdodERhdGUudmFsdWUpLnllYXIocGFyc2VkVmFsdWVELnllYXIoKSkubW9udGgocGFyc2VkVmFsdWVELm1vbnRoKCkpLmRhdGUocGFyc2VkVmFsdWVELmRhdGUoKSk7XG4gICAgICAgICAgaWYgKCFwcm9wcy51bmxpbmtQYW5lbHMpIHtcbiAgICAgICAgICAgIGxlZnREYXRlLnZhbHVlID0gcGFyc2VkVmFsdWVELnN1YnRyYWN0KDEsIFwibW9udGhcIik7XG4gICAgICAgICAgICBtaW5EYXRlLnZhbHVlID0gbWF4RGF0ZS52YWx1ZS5zdWJ0cmFjdCgxLCBcIm1vbnRoXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlRGF0ZUNoYW5nZSA9IChfLCB0eXBlKSA9PiB7XG4gICAgICBkYXRlVXNlcklucHV0LnZhbHVlW3R5cGVdID0gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVRpbWVJbnB1dCA9ICh2YWx1ZSwgdHlwZSkgPT4ge1xuICAgICAgdGltZVVzZXJJbnB1dC52YWx1ZVt0eXBlXSA9IHZhbHVlO1xuICAgICAgY29uc3QgcGFyc2VkVmFsdWVEID0gZGF5anModmFsdWUsIHRpbWVGb3JtYXQudmFsdWUpLmxvY2FsZShsYW5nLnZhbHVlKTtcbiAgICAgIGlmIChwYXJzZWRWYWx1ZUQuaXNWYWxpZCgpKSB7XG4gICAgICAgIGlmICh0eXBlID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgbWluVGltZVBpY2tlclZpc2libGUudmFsdWUgPSB0cnVlO1xuICAgICAgICAgIG1pbkRhdGUudmFsdWUgPSAobWluRGF0ZS52YWx1ZSB8fCBsZWZ0RGF0ZS52YWx1ZSkuaG91cihwYXJzZWRWYWx1ZUQuaG91cigpKS5taW51dGUocGFyc2VkVmFsdWVELm1pbnV0ZSgpKS5zZWNvbmQocGFyc2VkVmFsdWVELnNlY29uZCgpKTtcbiAgICAgICAgICBpZiAoIW1heERhdGUudmFsdWUgfHwgbWF4RGF0ZS52YWx1ZS5pc0JlZm9yZShtaW5EYXRlLnZhbHVlKSkge1xuICAgICAgICAgICAgbWF4RGF0ZS52YWx1ZSA9IG1pbkRhdGUudmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1heFRpbWVQaWNrZXJWaXNpYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICBtYXhEYXRlLnZhbHVlID0gKG1heERhdGUudmFsdWUgfHwgcmlnaHREYXRlLnZhbHVlKS5ob3VyKHBhcnNlZFZhbHVlRC5ob3VyKCkpLm1pbnV0ZShwYXJzZWRWYWx1ZUQubWludXRlKCkpLnNlY29uZChwYXJzZWRWYWx1ZUQuc2Vjb25kKCkpO1xuICAgICAgICAgIHJpZ2h0RGF0ZS52YWx1ZSA9IG1heERhdGUudmFsdWU7XG4gICAgICAgICAgaWYgKG1heERhdGUudmFsdWUgJiYgbWF4RGF0ZS52YWx1ZS5pc0JlZm9yZShtaW5EYXRlLnZhbHVlKSkge1xuICAgICAgICAgICAgbWluRGF0ZS52YWx1ZSA9IG1heERhdGUudmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVUaW1lQ2hhbmdlID0gKHZhbHVlLCB0eXBlKSA9PiB7XG4gICAgICB0aW1lVXNlcklucHV0LnZhbHVlW3R5cGVdID0gbnVsbDtcbiAgICAgIGlmICh0eXBlID09PSBcIm1pblwiKSB7XG4gICAgICAgIGxlZnREYXRlLnZhbHVlID0gbWluRGF0ZS52YWx1ZTtcbiAgICAgICAgbWluVGltZVBpY2tlclZpc2libGUudmFsdWUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJpZ2h0RGF0ZS52YWx1ZSA9IG1heERhdGUudmFsdWU7XG4gICAgICAgIG1heFRpbWVQaWNrZXJWaXNpYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVNaW5UaW1lUGljayA9ICh2YWx1ZSwgdmlzaWJsZSwgZmlyc3QpID0+IHtcbiAgICAgIGlmICh0aW1lVXNlcklucHV0LnZhbHVlLm1pbilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGxlZnREYXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIG1pbkRhdGUudmFsdWUgPSAobWluRGF0ZS52YWx1ZSB8fCBsZWZ0RGF0ZS52YWx1ZSkuaG91cih2YWx1ZS5ob3VyKCkpLm1pbnV0ZSh2YWx1ZS5taW51dGUoKSkuc2Vjb25kKHZhbHVlLnNlY29uZCgpKTtcbiAgICAgIH1cbiAgICAgIGlmICghZmlyc3QpIHtcbiAgICAgICAgbWluVGltZVBpY2tlclZpc2libGUudmFsdWUgPSB2aXNpYmxlO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXhEYXRlLnZhbHVlIHx8IG1heERhdGUudmFsdWUuaXNCZWZvcmUobWluRGF0ZS52YWx1ZSkpIHtcbiAgICAgICAgbWF4RGF0ZS52YWx1ZSA9IG1pbkRhdGUudmFsdWU7XG4gICAgICAgIHJpZ2h0RGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlTWF4VGltZVBpY2sgPSAodmFsdWUsIHZpc2libGUsIGZpcnN0KSA9PiB7XG4gICAgICBpZiAodGltZVVzZXJJbnB1dC52YWx1ZS5tYXgpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICByaWdodERhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgbWF4RGF0ZS52YWx1ZSA9IChtYXhEYXRlLnZhbHVlIHx8IHJpZ2h0RGF0ZS52YWx1ZSkuaG91cih2YWx1ZS5ob3VyKCkpLm1pbnV0ZSh2YWx1ZS5taW51dGUoKSkuc2Vjb25kKHZhbHVlLnNlY29uZCgpKTtcbiAgICAgIH1cbiAgICAgIGlmICghZmlyc3QpIHtcbiAgICAgICAgbWF4VGltZVBpY2tlclZpc2libGUudmFsdWUgPSB2aXNpYmxlO1xuICAgICAgfVxuICAgICAgaWYgKG1heERhdGUudmFsdWUgJiYgbWF4RGF0ZS52YWx1ZS5pc0JlZm9yZShtaW5EYXRlLnZhbHVlKSkge1xuICAgICAgICBtaW5EYXRlLnZhbHVlID0gbWF4RGF0ZS52YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUNsZWFyID0gKCkgPT4ge1xuICAgICAgbGVmdERhdGUudmFsdWUgPSBnZXREZWZhdWx0VmFsdWUodW5yZWYoZGVmYXVsdFZhbHVlKSwge1xuICAgICAgICBsYW5nOiB1bnJlZihsYW5nKSxcbiAgICAgICAgdW5pdDogXCJtb250aFwiLFxuICAgICAgICB1bmxpbmtQYW5lbHM6IHByb3BzLnVubGlua1BhbmVsc1xuICAgICAgfSlbMF07XG4gICAgICByaWdodERhdGUudmFsdWUgPSBsZWZ0RGF0ZS52YWx1ZS5hZGQoMSwgXCJtb250aFwiKTtcbiAgICAgIGVtaXQoXCJwaWNrXCIsIG51bGwpO1xuICAgIH07XG4gICAgY29uc3QgZm9ybWF0VG9TdHJpbmcgPSAodmFsdWUpID0+IHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCgoXykgPT4gXy5mb3JtYXQoZm9ybWF0KSkgOiB2YWx1ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICB9O1xuICAgIGNvbnN0IHBhcnNlVXNlcklucHV0ID0gKHZhbHVlKSA9PiB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAoKF8pID0+IGRheWpzKF8sIGZvcm1hdCkubG9jYWxlKGxhbmcudmFsdWUpKSA6IGRheWpzKHZhbHVlLCBmb3JtYXQpLmxvY2FsZShsYW5nLnZhbHVlKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG9uUGFyc2VkVmFsdWVDaGFuZ2VkKG1pbkRhdGUyLCBtYXhEYXRlMikge1xuICAgICAgaWYgKHByb3BzLnVubGlua1BhbmVscyAmJiBtYXhEYXRlMikge1xuICAgICAgICBjb25zdCBtaW5EYXRlWWVhciA9IChtaW5EYXRlMiA9PSBudWxsID8gdm9pZCAwIDogbWluRGF0ZTIueWVhcigpKSB8fCAwO1xuICAgICAgICBjb25zdCBtaW5EYXRlTW9udGggPSAobWluRGF0ZTIgPT0gbnVsbCA/IHZvaWQgMCA6IG1pbkRhdGUyLm1vbnRoKCkpIHx8IDA7XG4gICAgICAgIGNvbnN0IG1heERhdGVZZWFyID0gbWF4RGF0ZTIueWVhcigpO1xuICAgICAgICBjb25zdCBtYXhEYXRlTW9udGggPSBtYXhEYXRlMi5tb250aCgpO1xuICAgICAgICByaWdodERhdGUudmFsdWUgPSBtaW5EYXRlWWVhciA9PT0gbWF4RGF0ZVllYXIgJiYgbWluRGF0ZU1vbnRoID09PSBtYXhEYXRlTW9udGggPyBtYXhEYXRlMi5hZGQoMSwgdW5pdCkgOiBtYXhEYXRlMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJpZ2h0RGF0ZS52YWx1ZSA9IGxlZnREYXRlLnZhbHVlLmFkZCgxLCB1bml0KTtcbiAgICAgICAgaWYgKG1heERhdGUyKSB7XG4gICAgICAgICAgcmlnaHREYXRlLnZhbHVlID0gcmlnaHREYXRlLnZhbHVlLmhvdXIobWF4RGF0ZTIuaG91cigpKS5taW51dGUobWF4RGF0ZTIubWludXRlKCkpLnNlY29uZChtYXhEYXRlMi5zZWNvbmQoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsIFtcImlzVmFsaWRWYWx1ZVwiLCBpc1ZhbGlkUmFuZ2VdKTtcbiAgICBlbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIiwgW1wicGFyc2VVc2VySW5wdXRcIiwgcGFyc2VVc2VySW5wdXRdKTtcbiAgICBlbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIiwgW1wiZm9ybWF0VG9TdHJpbmdcIiwgZm9ybWF0VG9TdHJpbmddKTtcbiAgICBlbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIiwgW1wiaGFuZGxlQ2xlYXJcIiwgaGFuZGxlQ2xlYXJdKTtcbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwge1xuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1xuICAgICAgICAgIHVucmVmKHBwTnMpLmIoKSxcbiAgICAgICAgICB1bnJlZihkcnBOcykuYigpLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaGFzLXNpZGViYXJcIjogX2N0eC4kc2xvdHMuc2lkZWJhciB8fCB1bnJlZihoYXNTaG9ydGN1dHMpLFxuICAgICAgICAgICAgXCJoYXMtdGltZVwiOiB1bnJlZihzaG93VGltZSlcbiAgICAgICAgICB9XG4gICAgICAgIF0pXG4gICAgICB9LCBbXG4gICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKHBwTnMpLmUoXCJib2R5LXdyYXBwZXJcIikpXG4gICAgICAgIH0sIFtcbiAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcInNpZGViYXJcIiwge1xuICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKHBwTnMpLmUoXCJzaWRlYmFyXCIpKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHVucmVmKGhhc1Nob3J0Y3V0cykgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYocHBOcykuZShcInNpZGViYXJcIikpXG4gICAgICAgICAgfSwgW1xuICAgICAgICAgICAgKG9wZW5CbG9jayh0cnVlKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCBudWxsLCByZW5kZXJMaXN0KHVucmVmKHNob3J0Y3V0cyksIChzaG9ydGN1dCwga2V5KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYocHBOcykuZShcInNob3J0Y3V0XCIpKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoJGV2ZW50KSA9PiB1bnJlZihoYW5kbGVTaG9ydGN1dENsaWNrKShzaG9ydGN1dClcbiAgICAgICAgICAgICAgfSwgdG9EaXNwbGF5U3RyaW5nKHNob3J0Y3V0LnRleHQpLCAxMSwgX2hvaXN0ZWRfMSk7XG4gICAgICAgICAgICB9KSwgMTI4KSlcbiAgICAgICAgICBdLCAyKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYocHBOcykuZShcImJvZHlcIikpXG4gICAgICAgICAgfSwgW1xuICAgICAgICAgICAgdW5yZWYoc2hvd1RpbWUpID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwge1xuICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcnBOcykuZShcInRpbWUtaGVhZGVyXCIpKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYoZHJwTnMpLmUoXCJlZGl0b3JzLXdyYXBcIikpXG4gICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcnBOcykuZShcInRpbWUtcGlja2VyLXdyYXBcIikpXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJbnB1dCksIHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdW5yZWYocmFuZ2VTdGF0ZSkuc2VsZWN0aW5nLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdW5yZWYodCkoXCJlbC5kYXRlcGlja2VyLnN0YXJ0RGF0ZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKGRycE5zKS5lKFwiZWRpdG9yXCIpKSxcbiAgICAgICAgICAgICAgICAgICAgXCJtb2RlbC12YWx1ZVwiOiB1bnJlZihtaW5WaXNpYmxlRGF0ZSksXG4gICAgICAgICAgICAgICAgICAgIFwidmFsaWRhdGUtZXZlbnRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG9uSW5wdXQ6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKHZhbCkgPT4gaGFuZGxlRGF0ZUlucHV0KHZhbCwgXCJtaW5cIikpLFxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAodmFsKSA9PiBoYW5kbGVEYXRlQ2hhbmdlKHZhbCwgXCJtaW5cIikpXG4gICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJkaXNhYmxlZFwiLCBcInBsYWNlaG9sZGVyXCIsIFwiY2xhc3NcIiwgXCJtb2RlbC12YWx1ZVwiXSlcbiAgICAgICAgICAgICAgICBdLCAyKSxcbiAgICAgICAgICAgICAgICB3aXRoRGlyZWN0aXZlcygob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKGRycE5zKS5lKFwidGltZS1waWNrZXItd3JhcFwiKSlcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbElucHV0KSwge1xuICAgICAgICAgICAgICAgICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcnBOcykuZShcImVkaXRvclwiKSksXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB1bnJlZihyYW5nZVN0YXRlKS5zZWxlY3RpbmcsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB1bnJlZih0KShcImVsLmRhdGVwaWNrZXIuc3RhcnRUaW1lXCIpLFxuICAgICAgICAgICAgICAgICAgICBcIm1vZGVsLXZhbHVlXCI6IHVucmVmKG1pblZpc2libGVUaW1lKSxcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWxpZGF0ZS1ldmVudFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgb25Gb2N1czogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSAoJGV2ZW50KSA9PiBtaW5UaW1lUGlja2VyVmlzaWJsZS52YWx1ZSA9IHRydWUpLFxuICAgICAgICAgICAgICAgICAgICBvbklucHV0OiBfY2FjaGVbM10gfHwgKF9jYWNoZVszXSA9ICh2YWwpID0+IGhhbmRsZVRpbWVJbnB1dCh2YWwsIFwibWluXCIpKSxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IF9jYWNoZVs0XSB8fCAoX2NhY2hlWzRdID0gKHZhbCkgPT4gaGFuZGxlVGltZUNoYW5nZSh2YWwsIFwibWluXCIpKVxuICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wiY2xhc3NcIiwgXCJkaXNhYmxlZFwiLCBcInBsYWNlaG9sZGVyXCIsIFwibW9kZWwtdmFsdWVcIl0pLFxuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoVGltZVBpY2tQYW5lbCksIHtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogbWluVGltZVBpY2tlclZpc2libGUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogdW5yZWYodGltZUZvcm1hdCksXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0ZXRpbWUtcm9sZVwiOiBcInN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwidGltZS1hcnJvdy1jb250cm9sXCI6IHVucmVmKGFycm93Q29udHJvbCksXG4gICAgICAgICAgICAgICAgICAgIFwicGFyc2VkLXZhbHVlXCI6IGxlZnREYXRlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBvblBpY2s6IGhhbmRsZU1pblRpbWVQaWNrXG4gICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJ2aXNpYmxlXCIsIFwiZm9ybWF0XCIsIFwidGltZS1hcnJvdy1jb250cm9sXCIsIFwicGFyc2VkLXZhbHVlXCJdKVxuICAgICAgICAgICAgICAgIF0sIDIpKSwgW1xuICAgICAgICAgICAgICAgICAgW3VucmVmKENsaWNrT3V0c2lkZSksIGhhbmRsZU1pblRpbWVDbG9zZV1cbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdLCAyKSxcbiAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCBudWxsLCBbXG4gICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJY29uKSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEFycm93UmlnaHQpKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbdW5yZWYoZHJwTnMpLmUoXCJlZGl0b3JzLXdyYXBcIiksIFwiaXMtcmlnaHRcIl0pXG4gICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcnBOcykuZShcInRpbWUtcGlja2VyLXdyYXBcIikpXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJbnB1dCksIHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYoZHJwTnMpLmUoXCJlZGl0b3JcIikpLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdW5yZWYocmFuZ2VTdGF0ZSkuc2VsZWN0aW5nLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdW5yZWYodCkoXCJlbC5kYXRlcGlja2VyLmVuZERhdGVcIiksXG4gICAgICAgICAgICAgICAgICAgIFwibW9kZWwtdmFsdWVcIjogdW5yZWYobWF4VmlzaWJsZURhdGUpLFxuICAgICAgICAgICAgICAgICAgICByZWFkb25seTogIXVucmVmKG1pbkRhdGUpLFxuICAgICAgICAgICAgICAgICAgICBcInZhbGlkYXRlLWV2ZW50XCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBvbklucHV0OiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9ICh2YWwpID0+IGhhbmRsZURhdGVJbnB1dCh2YWwsIFwibWF4XCIpKSxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IF9jYWNoZVs2XSB8fCAoX2NhY2hlWzZdID0gKHZhbCkgPT4gaGFuZGxlRGF0ZUNoYW5nZSh2YWwsIFwibWF4XCIpKVxuICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wiY2xhc3NcIiwgXCJkaXNhYmxlZFwiLCBcInBsYWNlaG9sZGVyXCIsIFwibW9kZWwtdmFsdWVcIiwgXCJyZWFkb25seVwiXSlcbiAgICAgICAgICAgICAgICBdLCAyKSxcbiAgICAgICAgICAgICAgICB3aXRoRGlyZWN0aXZlcygob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKGRycE5zKS5lKFwidGltZS1waWNrZXItd3JhcFwiKSlcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbElucHV0KSwge1xuICAgICAgICAgICAgICAgICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcnBOcykuZShcImVkaXRvclwiKSksXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB1bnJlZihyYW5nZVN0YXRlKS5zZWxlY3RpbmcsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB1bnJlZih0KShcImVsLmRhdGVwaWNrZXIuZW5kVGltZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCJtb2RlbC12YWx1ZVwiOiB1bnJlZihtYXhWaXNpYmxlVGltZSksXG4gICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5OiAhdW5yZWYobWluRGF0ZSksXG4gICAgICAgICAgICAgICAgICAgIFwidmFsaWRhdGUtZXZlbnRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG9uRm9jdXM6IF9jYWNoZVs3XSB8fCAoX2NhY2hlWzddID0gKCRldmVudCkgPT4gdW5yZWYobWluRGF0ZSkgJiYgKG1heFRpbWVQaWNrZXJWaXNpYmxlLnZhbHVlID0gdHJ1ZSkpLFxuICAgICAgICAgICAgICAgICAgICBvbklucHV0OiBfY2FjaGVbOF0gfHwgKF9jYWNoZVs4XSA9ICh2YWwpID0+IGhhbmRsZVRpbWVJbnB1dCh2YWwsIFwibWF4XCIpKSxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IF9jYWNoZVs5XSB8fCAoX2NhY2hlWzldID0gKHZhbCkgPT4gaGFuZGxlVGltZUNoYW5nZSh2YWwsIFwibWF4XCIpKVxuICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wiY2xhc3NcIiwgXCJkaXNhYmxlZFwiLCBcInBsYWNlaG9sZGVyXCIsIFwibW9kZWwtdmFsdWVcIiwgXCJyZWFkb25seVwiXSksXG4gICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihUaW1lUGlja1BhbmVsKSwge1xuICAgICAgICAgICAgICAgICAgICBcImRhdGV0aW1lLXJvbGVcIjogXCJlbmRcIixcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogbWF4VGltZVBpY2tlclZpc2libGUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogdW5yZWYodGltZUZvcm1hdCksXG4gICAgICAgICAgICAgICAgICAgIFwidGltZS1hcnJvdy1jb250cm9sXCI6IHVucmVmKGFycm93Q29udHJvbCksXG4gICAgICAgICAgICAgICAgICAgIFwicGFyc2VkLXZhbHVlXCI6IHJpZ2h0RGF0ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgb25QaWNrOiBoYW5kbGVNYXhUaW1lUGlja1xuICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1widmlzaWJsZVwiLCBcImZvcm1hdFwiLCBcInRpbWUtYXJyb3ctY29udHJvbFwiLCBcInBhcnNlZC12YWx1ZVwiXSlcbiAgICAgICAgICAgICAgICBdLCAyKSksIFtcbiAgICAgICAgICAgICAgICAgIFt1bnJlZihDbGlja091dHNpZGUpLCBoYW5kbGVNYXhUaW1lQ2xvc2VdXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXSwgMilcbiAgICAgICAgICAgIF0sIDIpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1t1bnJlZihwcE5zKS5lKFwiY29udGVudFwiKSwgdW5yZWYoZHJwTnMpLmUoXCJjb250ZW50XCIpXSwgXCJpcy1sZWZ0XCJdKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcnBOcykuZShcImhlYWRlclwiKSlcbiAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihwcE5zKS5lKFwiaWNvbi1idG5cIiksIFwiZC1hcnJvdy1sZWZ0XCJdKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGxlZnRQcmV2WWVhclxuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEVsSWNvbiksIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoREFycm93TGVmdCkpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0sIDIpLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihwcE5zKS5lKFwiaWNvbi1idG5cIiksIFwiYXJyb3ctbGVmdFwiXSksXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiBsZWZ0UHJldk1vbnRoXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJY29uKSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihBcnJvd0xlZnQpKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLCAyKSxcbiAgICAgICAgICAgICAgICBfY3R4LnVubGlua1BhbmVscyA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIXVucmVmKGVuYWJsZVllYXJBcnJvdyksXG4gICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1t1bnJlZihwcE5zKS5lKFwiaWNvbi1idG5cIiksIHsgXCJpcy1kaXNhYmxlZFwiOiAhdW5yZWYoZW5hYmxlWWVhckFycm93KSB9XSwgXCJkLWFycm93LXJpZ2h0XCJdKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGxlZnROZXh0WWVhclxuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEVsSWNvbiksIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoREFycm93UmlnaHQpKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLCAxMCwgX2hvaXN0ZWRfMikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICBfY3R4LnVubGlua1BhbmVscyA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgICAgICAgIGtleTogMSxcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIXVucmVmKGVuYWJsZU1vbnRoQXJyb3cpLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtbXG4gICAgICAgICAgICAgICAgICAgIHVucmVmKHBwTnMpLmUoXCJpY29uLWJ0blwiKSxcbiAgICAgICAgICAgICAgICAgICAgeyBcImlzLWRpc2FibGVkXCI6ICF1bnJlZihlbmFibGVNb250aEFycm93KSB9XG4gICAgICAgICAgICAgICAgICBdLCBcImFycm93LXJpZ2h0XCJdKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGxlZnROZXh0TW9udGhcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbEljb24pLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEFycm93UmlnaHQpKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLCAxMCwgX2hvaXN0ZWRfMykpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgbnVsbCwgdG9EaXNwbGF5U3RyaW5nKHVucmVmKGxlZnRMYWJlbCkpLCAxKVxuICAgICAgICAgICAgICBdLCAyKSxcbiAgICAgICAgICAgICAgY3JlYXRlVk5vZGUoRGF0ZVRhYmxlLCB7XG4gICAgICAgICAgICAgICAgXCJzZWxlY3Rpb24tbW9kZVwiOiBcInJhbmdlXCIsXG4gICAgICAgICAgICAgICAgZGF0ZTogbGVmdERhdGUudmFsdWUsXG4gICAgICAgICAgICAgICAgXCJtaW4tZGF0ZVwiOiB1bnJlZihtaW5EYXRlKSxcbiAgICAgICAgICAgICAgICBcIm1heC1kYXRlXCI6IHVucmVmKG1heERhdGUpLFxuICAgICAgICAgICAgICAgIFwicmFuZ2Utc3RhdGVcIjogdW5yZWYocmFuZ2VTdGF0ZSksXG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlZC1kYXRlXCI6IHVucmVmKGRpc2FibGVkRGF0ZSksXG4gICAgICAgICAgICAgICAgXCJjZWxsLWNsYXNzLW5hbWVcIjogdW5yZWYoY2VsbENsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgb25DaGFuZ2VyYW5nZTogdW5yZWYoaGFuZGxlQ2hhbmdlUmFuZ2UpLFxuICAgICAgICAgICAgICAgIG9uUGljazogaGFuZGxlUmFuZ2VQaWNrLFxuICAgICAgICAgICAgICAgIG9uU2VsZWN0OiB1bnJlZihvblNlbGVjdClcbiAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wiZGF0ZVwiLCBcIm1pbi1kYXRlXCIsIFwibWF4LWRhdGVcIiwgXCJyYW5nZS1zdGF0ZVwiLCBcImRpc2FibGVkLWRhdGVcIiwgXCJjZWxsLWNsYXNzLW5hbWVcIiwgXCJvbkNoYW5nZXJhbmdlXCIsIFwib25TZWxlY3RcIl0pXG4gICAgICAgICAgICBdLCAyKSxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbW3VucmVmKHBwTnMpLmUoXCJjb250ZW50XCIpLCB1bnJlZihkcnBOcykuZShcImNvbnRlbnRcIildLCBcImlzLXJpZ2h0XCJdKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcnBOcykuZShcImhlYWRlclwiKSlcbiAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIF9jdHgudW5saW5rUGFuZWxzID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiAhdW5yZWYoZW5hYmxlWWVhckFycm93KSxcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbW3VucmVmKHBwTnMpLmUoXCJpY29uLWJ0blwiKSwgeyBcImlzLWRpc2FibGVkXCI6ICF1bnJlZihlbmFibGVZZWFyQXJyb3cpIH1dLCBcImQtYXJyb3ctbGVmdFwiXSksXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiByaWdodFByZXZZZWFyXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJY29uKSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihEQXJyb3dMZWZ0KSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSwgMTAsIF9ob2lzdGVkXzQpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgX2N0eC51bmxpbmtQYW5lbHMgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICBrZXk6IDEsXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICF1bnJlZihlbmFibGVNb250aEFycm93KSxcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbW1xuICAgICAgICAgICAgICAgICAgICB1bnJlZihwcE5zKS5lKFwiaWNvbi1idG5cIiksXG4gICAgICAgICAgICAgICAgICAgIHsgXCJpcy1kaXNhYmxlZFwiOiAhdW5yZWYoZW5hYmxlTW9udGhBcnJvdykgfVxuICAgICAgICAgICAgICAgICAgXSwgXCJhcnJvdy1sZWZ0XCJdKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHJpZ2h0UHJldk1vbnRoXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJY29uKSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihBcnJvd0xlZnQpKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLCAxMCwgX2hvaXN0ZWRfNSkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbdW5yZWYocHBOcykuZShcImljb24tYnRuXCIpLCBcImQtYXJyb3ctcmlnaHRcIl0pLFxuICAgICAgICAgICAgICAgICAgb25DbGljazogcmlnaHROZXh0WWVhclxuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEVsSWNvbiksIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoREFycm93UmlnaHQpKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLCAyKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbdW5yZWYocHBOcykuZShcImljb24tYnRuXCIpLCBcImFycm93LXJpZ2h0XCJdKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHJpZ2h0TmV4dE1vbnRoXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJY29uKSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihBcnJvd1JpZ2h0KSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSwgMiksXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIG51bGwsIHRvRGlzcGxheVN0cmluZyh1bnJlZihyaWdodExhYmVsKSksIDEpXG4gICAgICAgICAgICAgIF0sIDIpLFxuICAgICAgICAgICAgICBjcmVhdGVWTm9kZShEYXRlVGFibGUsIHtcbiAgICAgICAgICAgICAgICBcInNlbGVjdGlvbi1tb2RlXCI6IFwicmFuZ2VcIixcbiAgICAgICAgICAgICAgICBkYXRlOiByaWdodERhdGUudmFsdWUsXG4gICAgICAgICAgICAgICAgXCJtaW4tZGF0ZVwiOiB1bnJlZihtaW5EYXRlKSxcbiAgICAgICAgICAgICAgICBcIm1heC1kYXRlXCI6IHVucmVmKG1heERhdGUpLFxuICAgICAgICAgICAgICAgIFwicmFuZ2Utc3RhdGVcIjogdW5yZWYocmFuZ2VTdGF0ZSksXG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlZC1kYXRlXCI6IHVucmVmKGRpc2FibGVkRGF0ZSksXG4gICAgICAgICAgICAgICAgXCJjZWxsLWNsYXNzLW5hbWVcIjogdW5yZWYoY2VsbENsYXNzTmFtZSksXG4gICAgICAgICAgICAgICAgb25DaGFuZ2VyYW5nZTogdW5yZWYoaGFuZGxlQ2hhbmdlUmFuZ2UpLFxuICAgICAgICAgICAgICAgIG9uUGljazogaGFuZGxlUmFuZ2VQaWNrLFxuICAgICAgICAgICAgICAgIG9uU2VsZWN0OiB1bnJlZihvblNlbGVjdClcbiAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wiZGF0ZVwiLCBcIm1pbi1kYXRlXCIsIFwibWF4LWRhdGVcIiwgXCJyYW5nZS1zdGF0ZVwiLCBcImRpc2FibGVkLWRhdGVcIiwgXCJjZWxsLWNsYXNzLW5hbWVcIiwgXCJvbkNoYW5nZXJhbmdlXCIsIFwib25TZWxlY3RcIl0pXG4gICAgICAgICAgICBdLCAyKVxuICAgICAgICAgIF0sIDIpXG4gICAgICAgIF0sIDIpLFxuICAgICAgICB1bnJlZihzaG93VGltZSkgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAga2V5OiAwLFxuICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihwcE5zKS5lKFwiZm9vdGVyXCIpKVxuICAgICAgICB9LCBbXG4gICAgICAgICAgdW5yZWYoY2xlYXJhYmxlKSA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2sodW5yZWYoRWxCdXR0b24pLCB7XG4gICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKHBwTnMpLmUoXCJsaW5rLWJ0blwiKSksXG4gICAgICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGVhclxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBjcmVhdGVUZXh0Vk5vZGUodG9EaXNwbGF5U3RyaW5nKHVucmVmKHQpKFwiZWwuZGF0ZXBpY2tlci5jbGVhclwiKSksIDEpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF86IDFcbiAgICAgICAgICB9LCA4LCBbXCJjbGFzc1wiXSkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbEJ1dHRvbiksIHtcbiAgICAgICAgICAgIHBsYWluOiBcIlwiLFxuICAgICAgICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKHBwTnMpLmUoXCJsaW5rLWJ0blwiKSksXG4gICAgICAgICAgICBkaXNhYmxlZDogdW5yZWYoYnRuRGlzYWJsZWQpLFxuICAgICAgICAgICAgb25DbGljazogX2NhY2hlWzEwXSB8fCAoX2NhY2hlWzEwXSA9ICgkZXZlbnQpID0+IHVucmVmKGhhbmRsZVJhbmdlQ29uZmlybSkoZmFsc2UpKVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICBjcmVhdGVUZXh0Vk5vZGUodG9EaXNwbGF5U3RyaW5nKHVucmVmKHQpKFwiZWwuZGF0ZXBpY2tlci5jb25maXJtXCIpKSwgMSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXzogMVxuICAgICAgICAgIH0sIDgsIFtcImNsYXNzXCIsIFwiZGlzYWJsZWRcIl0pXG4gICAgICAgIF0sIDIpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgIF0sIDIpO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIERhdGVSYW5nZVBpY2tQYW5lbCA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9wYW5lbC1kYXRlLXJhbmdlLnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBEYXRlUmFuZ2VQaWNrUGFuZWwgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFuZWwtZGF0ZS1yYW5nZS5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBwYW5lbFJhbmdlU2hhcmVkUHJvcHMgfSBmcm9tICcuL3NoYXJlZC5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcyB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lLm1qcyc7XG5cbmNvbnN0IHBhbmVsTW9udGhSYW5nZVByb3BzID0gYnVpbGRQcm9wcyh7XG4gIC4uLnBhbmVsUmFuZ2VTaGFyZWRQcm9wc1xufSk7XG5jb25zdCBwYW5lbE1vbnRoUmFuZ2VFbWl0cyA9IFtcInBpY2tcIiwgXCJzZXQtcGlja2VyLW9wdGlvblwiXTtcblxuZXhwb3J0IHsgcGFuZWxNb250aFJhbmdlRW1pdHMsIHBhbmVsTW9udGhSYW5nZVByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYW5lbC1tb250aC1yYW5nZS5tanMubWFwXG4iLCJpbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2hvb2tzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2UtbG9jYWxlL2luZGV4Lm1qcyc7XG5cbmNvbnN0IHVzZU1vbnRoUmFuZ2VIZWFkZXIgPSAoe1xuICB1bmxpbmtQYW5lbHMsXG4gIGxlZnREYXRlLFxuICByaWdodERhdGVcbn0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VMb2NhbGUoKTtcbiAgY29uc3QgbGVmdFByZXZZZWFyID0gKCkgPT4ge1xuICAgIGxlZnREYXRlLnZhbHVlID0gbGVmdERhdGUudmFsdWUuc3VidHJhY3QoMSwgXCJ5ZWFyXCIpO1xuICAgIGlmICghdW5saW5rUGFuZWxzLnZhbHVlKSB7XG4gICAgICByaWdodERhdGUudmFsdWUgPSByaWdodERhdGUudmFsdWUuc3VidHJhY3QoMSwgXCJ5ZWFyXCIpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcmlnaHROZXh0WWVhciA9ICgpID0+IHtcbiAgICBpZiAoIXVubGlua1BhbmVscy52YWx1ZSkge1xuICAgICAgbGVmdERhdGUudmFsdWUgPSBsZWZ0RGF0ZS52YWx1ZS5hZGQoMSwgXCJ5ZWFyXCIpO1xuICAgIH1cbiAgICByaWdodERhdGUudmFsdWUgPSByaWdodERhdGUudmFsdWUuYWRkKDEsIFwieWVhclwiKTtcbiAgfTtcbiAgY29uc3QgbGVmdE5leHRZZWFyID0gKCkgPT4ge1xuICAgIGxlZnREYXRlLnZhbHVlID0gbGVmdERhdGUudmFsdWUuYWRkKDEsIFwieWVhclwiKTtcbiAgfTtcbiAgY29uc3QgcmlnaHRQcmV2WWVhciA9ICgpID0+IHtcbiAgICByaWdodERhdGUudmFsdWUgPSByaWdodERhdGUudmFsdWUuc3VidHJhY3QoMSwgXCJ5ZWFyXCIpO1xuICB9O1xuICBjb25zdCBsZWZ0TGFiZWwgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIGAke2xlZnREYXRlLnZhbHVlLnllYXIoKX0gJHt0KFwiZWwuZGF0ZXBpY2tlci55ZWFyXCIpfWA7XG4gIH0pO1xuICBjb25zdCByaWdodExhYmVsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBgJHtyaWdodERhdGUudmFsdWUueWVhcigpfSAke3QoXCJlbC5kYXRlcGlja2VyLnllYXJcIil9YDtcbiAgfSk7XG4gIGNvbnN0IGxlZnRZZWFyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBsZWZ0RGF0ZS52YWx1ZS55ZWFyKCk7XG4gIH0pO1xuICBjb25zdCByaWdodFllYXIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHJpZ2h0RGF0ZS52YWx1ZS55ZWFyKCkgPT09IGxlZnREYXRlLnZhbHVlLnllYXIoKSA/IGxlZnREYXRlLnZhbHVlLnllYXIoKSArIDEgOiByaWdodERhdGUudmFsdWUueWVhcigpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0UHJldlllYXIsXG4gICAgcmlnaHROZXh0WWVhcixcbiAgICBsZWZ0TmV4dFllYXIsXG4gICAgcmlnaHRQcmV2WWVhcixcbiAgICBsZWZ0TGFiZWwsXG4gICAgcmlnaHRMYWJlbCxcbiAgICBsZWZ0WWVhcixcbiAgICByaWdodFllYXJcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHVzZU1vbnRoUmFuZ2VIZWFkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1tb250aC1yYW5nZS1oZWFkZXIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBpbmplY3QsIHRvUmVmLCByZWYsIGNvbXB1dGVkLCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIHVucmVmLCBjcmVhdGVFbGVtZW50Vk5vZGUsIHJlbmRlclNsb3QsIEZyYWdtZW50LCByZW5kZXJMaXN0LCB0b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlVk5vZGUsIHdpdGhDdHggfSBmcm9tICd2dWUnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCB7IEVsSWNvbiB9IGZyb20gJy4uLy4uLy4uL2ljb24vaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IERBcnJvd0xlZnQsIERBcnJvd1JpZ2h0IH0gZnJvbSAnQGVsZW1lbnQtcGx1cy9pY29ucy12dWUnO1xuaW1wb3J0IHsgcGFuZWxNb250aFJhbmdlUHJvcHMsIHBhbmVsTW9udGhSYW5nZUVtaXRzIH0gZnJvbSAnLi4vcHJvcHMvcGFuZWwtbW9udGgtcmFuZ2UubWpzJztcbmltcG9ydCB7IHVzZU1vbnRoUmFuZ2VIZWFkZXIgfSBmcm9tICcuLi9jb21wb3NhYmxlcy91c2UtbW9udGgtcmFuZ2UtaGVhZGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VSYW5nZVBpY2tlciB9IGZyb20gJy4uL2NvbXBvc2FibGVzL3VzZS1yYW5nZS1waWNrZXIubWpzJztcbmltcG9ydCBNb250aFRhYmxlIGZyb20gJy4vYmFzaWMtbW9udGgtdGFibGUubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZS1sb2NhbGUvaW5kZXgubWpzJztcblxuY29uc3QgX2hvaXN0ZWRfMSA9IFtcIm9uQ2xpY2tcIl07XG5jb25zdCBfaG9pc3RlZF8yID0gW1wiZGlzYWJsZWRcIl07XG5jb25zdCBfaG9pc3RlZF8zID0gW1wiZGlzYWJsZWRcIl07XG5jb25zdCB1bml0ID0gXCJ5ZWFyXCI7XG5jb25zdCBfX2RlZmF1bHRfXyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRGF0ZVBpY2tlck1vbnRoUmFuZ2VcIlxufSk7XG5jb25zdCBfc2ZjX21haW4gPSAvKiBAX19QVVJFX18gKi8gZGVmaW5lQ29tcG9uZW50KHtcbiAgLi4uX19kZWZhdWx0X18sXG4gIHByb3BzOiBwYW5lbE1vbnRoUmFuZ2VQcm9wcyxcbiAgZW1pdHM6IHBhbmVsTW9udGhSYW5nZUVtaXRzLFxuICBzZXR1cChfX3Byb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IHByb3BzID0gX19wcm9wcztcbiAgICBjb25zdCB7IGxhbmcgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHBpY2tlckJhc2UgPSBpbmplY3QoXCJFUF9QSUNLRVJfQkFTRVwiKTtcbiAgICBjb25zdCB7IHNob3J0Y3V0cywgZGlzYWJsZWREYXRlLCBmb3JtYXQgfSA9IHBpY2tlckJhc2UucHJvcHM7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gdG9SZWYocGlja2VyQmFzZS5wcm9wcywgXCJkZWZhdWx0VmFsdWVcIik7XG4gICAgY29uc3QgbGVmdERhdGUgPSByZWYoZGF5anMoKS5sb2NhbGUobGFuZy52YWx1ZSkpO1xuICAgIGNvbnN0IHJpZ2h0RGF0ZSA9IHJlZihkYXlqcygpLmxvY2FsZShsYW5nLnZhbHVlKS5hZGQoMSwgdW5pdCkpO1xuICAgIGNvbnN0IHtcbiAgICAgIG1pbkRhdGUsXG4gICAgICBtYXhEYXRlLFxuICAgICAgcmFuZ2VTdGF0ZSxcbiAgICAgIHBwTnMsXG4gICAgICBkcnBOcyxcbiAgICAgIGhhbmRsZUNoYW5nZVJhbmdlLFxuICAgICAgaGFuZGxlUmFuZ2VDb25maXJtLFxuICAgICAgaGFuZGxlU2hvcnRjdXRDbGljayxcbiAgICAgIG9uU2VsZWN0XG4gICAgfSA9IHVzZVJhbmdlUGlja2VyKHByb3BzLCB7XG4gICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICBsZWZ0RGF0ZSxcbiAgICAgIHJpZ2h0RGF0ZSxcbiAgICAgIHVuaXQsXG4gICAgICBvblBhcnNlZFZhbHVlQ2hhbmdlZFxuICAgIH0pO1xuICAgIGNvbnN0IGhhc1Nob3J0Y3V0cyA9IGNvbXB1dGVkKCgpID0+ICEhc2hvcnRjdXRzLmxlbmd0aCk7XG4gICAgY29uc3Qge1xuICAgICAgbGVmdFByZXZZZWFyLFxuICAgICAgcmlnaHROZXh0WWVhcixcbiAgICAgIGxlZnROZXh0WWVhcixcbiAgICAgIHJpZ2h0UHJldlllYXIsXG4gICAgICBsZWZ0TGFiZWwsXG4gICAgICByaWdodExhYmVsLFxuICAgICAgbGVmdFllYXIsXG4gICAgICByaWdodFllYXJcbiAgICB9ID0gdXNlTW9udGhSYW5nZUhlYWRlcih7XG4gICAgICB1bmxpbmtQYW5lbHM6IHRvUmVmKHByb3BzLCBcInVubGlua1BhbmVsc1wiKSxcbiAgICAgIGxlZnREYXRlLFxuICAgICAgcmlnaHREYXRlXG4gICAgfSk7XG4gICAgY29uc3QgZW5hYmxlWWVhckFycm93ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnVubGlua1BhbmVscyAmJiByaWdodFllYXIudmFsdWUgPiBsZWZ0WWVhci52YWx1ZSArIDE7XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlUmFuZ2VQaWNrID0gKHZhbCwgY2xvc2UgPSB0cnVlKSA9PiB7XG4gICAgICBjb25zdCBtaW5EYXRlXyA9IHZhbC5taW5EYXRlO1xuICAgICAgY29uc3QgbWF4RGF0ZV8gPSB2YWwubWF4RGF0ZTtcbiAgICAgIGlmIChtYXhEYXRlLnZhbHVlID09PSBtYXhEYXRlXyAmJiBtaW5EYXRlLnZhbHVlID09PSBtaW5EYXRlXykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBtYXhEYXRlLnZhbHVlID0gbWF4RGF0ZV87XG4gICAgICBtaW5EYXRlLnZhbHVlID0gbWluRGF0ZV87XG4gICAgICBpZiAoIWNsb3NlKVxuICAgICAgICByZXR1cm47XG4gICAgICBoYW5kbGVSYW5nZUNvbmZpcm0oKTtcbiAgICB9O1xuICAgIGNvbnN0IGZvcm1hdFRvU3RyaW5nID0gKGRheXMpID0+IHtcbiAgICAgIHJldHVybiBkYXlzLm1hcCgoZGF5KSA9PiBkYXkuZm9ybWF0KGZvcm1hdCkpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gb25QYXJzZWRWYWx1ZUNoYW5nZWQobWluRGF0ZTIsIG1heERhdGUyKSB7XG4gICAgICBpZiAocHJvcHMudW5saW5rUGFuZWxzICYmIG1heERhdGUyKSB7XG4gICAgICAgIGNvbnN0IG1pbkRhdGVZZWFyID0gKG1pbkRhdGUyID09IG51bGwgPyB2b2lkIDAgOiBtaW5EYXRlMi55ZWFyKCkpIHx8IDA7XG4gICAgICAgIGNvbnN0IG1heERhdGVZZWFyID0gbWF4RGF0ZTIueWVhcigpO1xuICAgICAgICByaWdodERhdGUudmFsdWUgPSBtaW5EYXRlWWVhciA9PT0gbWF4RGF0ZVllYXIgPyBtYXhEYXRlMi5hZGQoMSwgdW5pdCkgOiBtYXhEYXRlMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJpZ2h0RGF0ZS52YWx1ZSA9IGxlZnREYXRlLnZhbHVlLmFkZCgxLCB1bml0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsIFtcImZvcm1hdFRvU3RyaW5nXCIsIGZvcm1hdFRvU3RyaW5nXSk7XG4gICAgcmV0dXJuIChfY3R4LCBfY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcbiAgICAgICAgICB1bnJlZihwcE5zKS5iKCksXG4gICAgICAgICAgdW5yZWYoZHJwTnMpLmIoKSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImhhcy1zaWRlYmFyXCI6IEJvb2xlYW4oX2N0eC4kc2xvdHMuc2lkZWJhcikgfHwgdW5yZWYoaGFzU2hvcnRjdXRzKVxuICAgICAgICAgIH1cbiAgICAgICAgXSlcbiAgICAgIH0sIFtcbiAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYocHBOcykuZShcImJvZHktd3JhcHBlclwiKSlcbiAgICAgICAgfSwgW1xuICAgICAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwic2lkZWJhclwiLCB7XG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYocHBOcykuZShcInNpZGViYXJcIikpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdW5yZWYoaGFzU2hvcnRjdXRzKSA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihwcE5zKS5lKFwic2lkZWJhclwiKSlcbiAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIG51bGwsIHJlbmRlckxpc3QodW5yZWYoc2hvcnRjdXRzKSwgKHNob3J0Y3V0LCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihwcE5zKS5lKFwic2hvcnRjdXRcIikpLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgkZXZlbnQpID0+IHVucmVmKGhhbmRsZVNob3J0Y3V0Q2xpY2spKHNob3J0Y3V0KVxuICAgICAgICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcoc2hvcnRjdXQudGV4dCksIDExLCBfaG9pc3RlZF8xKTtcbiAgICAgICAgICAgIH0pLCAxMjgpKVxuICAgICAgICAgIF0sIDIpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihwcE5zKS5lKFwiYm9keVwiKSlcbiAgICAgICAgICB9LCBbXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1t1bnJlZihwcE5zKS5lKFwiY29udGVudFwiKSwgdW5yZWYoZHJwTnMpLmUoXCJjb250ZW50XCIpXSwgXCJpcy1sZWZ0XCJdKVxuICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihkcnBOcykuZShcImhlYWRlclwiKSlcbiAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihwcE5zKS5lKFwiaWNvbi1idG5cIiksIFwiZC1hcnJvdy1sZWZ0XCJdKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKC4uLmFyZ3MpID0+IHVucmVmKGxlZnRQcmV2WWVhcikgJiYgdW5yZWYobGVmdFByZXZZZWFyKSguLi5hcmdzKSlcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbEljb24pLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKERBcnJvd0xlZnQpKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLCAyKSxcbiAgICAgICAgICAgICAgICBfY3R4LnVubGlua1BhbmVscyA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIXVucmVmKGVuYWJsZVllYXJBcnJvdyksXG4gICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1tcbiAgICAgICAgICAgICAgICAgICAgdW5yZWYocHBOcykuZShcImljb24tYnRuXCIpLFxuICAgICAgICAgICAgICAgICAgICB7IFt1bnJlZihwcE5zKS5pcyhcImRpc2FibGVkXCIpXTogIXVucmVmKGVuYWJsZVllYXJBcnJvdykgfVxuICAgICAgICAgICAgICAgICAgXSwgXCJkLWFycm93LXJpZ2h0XCJdKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gKC4uLmFyZ3MpID0+IHVucmVmKGxlZnROZXh0WWVhcikgJiYgdW5yZWYobGVmdE5leHRZZWFyKSguLi5hcmdzKSlcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbEljb24pLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKERBcnJvd1JpZ2h0KSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSwgMTAsIF9ob2lzdGVkXzIpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIG51bGwsIHRvRGlzcGxheVN0cmluZyh1bnJlZihsZWZ0TGFiZWwpKSwgMSlcbiAgICAgICAgICAgICAgXSwgMiksXG4gICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKE1vbnRoVGFibGUsIHtcbiAgICAgICAgICAgICAgICBcInNlbGVjdGlvbi1tb2RlXCI6IFwicmFuZ2VcIixcbiAgICAgICAgICAgICAgICBkYXRlOiBsZWZ0RGF0ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICBcIm1pbi1kYXRlXCI6IHVucmVmKG1pbkRhdGUpLFxuICAgICAgICAgICAgICAgIFwibWF4LWRhdGVcIjogdW5yZWYobWF4RGF0ZSksXG4gICAgICAgICAgICAgICAgXCJyYW5nZS1zdGF0ZVwiOiB1bnJlZihyYW5nZVN0YXRlKSxcbiAgICAgICAgICAgICAgICBcImRpc2FibGVkLWRhdGVcIjogdW5yZWYoZGlzYWJsZWREYXRlKSxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZXJhbmdlOiB1bnJlZihoYW5kbGVDaGFuZ2VSYW5nZSksXG4gICAgICAgICAgICAgICAgb25QaWNrOiBoYW5kbGVSYW5nZVBpY2ssXG4gICAgICAgICAgICAgICAgb25TZWxlY3Q6IHVucmVmKG9uU2VsZWN0KVxuICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJkYXRlXCIsIFwibWluLWRhdGVcIiwgXCJtYXgtZGF0ZVwiLCBcInJhbmdlLXN0YXRlXCIsIFwiZGlzYWJsZWQtZGF0ZVwiLCBcIm9uQ2hhbmdlcmFuZ2VcIiwgXCJvblNlbGVjdFwiXSlcbiAgICAgICAgICAgIF0sIDIpLFxuICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtbdW5yZWYocHBOcykuZShcImNvbnRlbnRcIiksIHVucmVmKGRycE5zKS5lKFwiY29udGVudFwiKV0sIFwiaXMtcmlnaHRcIl0pXG4gICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKGRycE5zKS5lKFwiaGVhZGVyXCIpKVxuICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgX2N0eC51bmxpbmtQYW5lbHMgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICF1bnJlZihlbmFibGVZZWFyQXJyb3cpLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtbdW5yZWYocHBOcykuZShcImljb24tYnRuXCIpLCB7IFwiaXMtZGlzYWJsZWRcIjogIXVucmVmKGVuYWJsZVllYXJBcnJvdykgfV0sIFwiZC1hcnJvdy1sZWZ0XCJdKSxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gKC4uLmFyZ3MpID0+IHVucmVmKHJpZ2h0UHJldlllYXIpICYmIHVucmVmKHJpZ2h0UHJldlllYXIpKC4uLmFyZ3MpKVxuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKEVsSWNvbiksIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoREFycm93TGVmdCkpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0sIDEwLCBfaG9pc3RlZF8zKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihwcE5zKS5lKFwiaWNvbi1idG5cIiksIFwiZC1hcnJvdy1yaWdodFwiXSksXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbM10gfHwgKF9jYWNoZVszXSA9ICguLi5hcmdzKSA9PiB1bnJlZihyaWdodE5leHRZZWFyKSAmJiB1bnJlZihyaWdodE5leHRZZWFyKSguLi5hcmdzKSlcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbEljb24pLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKERBcnJvd1JpZ2h0KSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSwgMiksXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIG51bGwsIHRvRGlzcGxheVN0cmluZyh1bnJlZihyaWdodExhYmVsKSksIDEpXG4gICAgICAgICAgICAgIF0sIDIpLFxuICAgICAgICAgICAgICBjcmVhdGVWTm9kZShNb250aFRhYmxlLCB7XG4gICAgICAgICAgICAgICAgXCJzZWxlY3Rpb24tbW9kZVwiOiBcInJhbmdlXCIsXG4gICAgICAgICAgICAgICAgZGF0ZTogcmlnaHREYXRlLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwibWluLWRhdGVcIjogdW5yZWYobWluRGF0ZSksXG4gICAgICAgICAgICAgICAgXCJtYXgtZGF0ZVwiOiB1bnJlZihtYXhEYXRlKSxcbiAgICAgICAgICAgICAgICBcInJhbmdlLXN0YXRlXCI6IHVucmVmKHJhbmdlU3RhdGUpLFxuICAgICAgICAgICAgICAgIFwiZGlzYWJsZWQtZGF0ZVwiOiB1bnJlZihkaXNhYmxlZERhdGUpLFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlcmFuZ2U6IHVucmVmKGhhbmRsZUNoYW5nZVJhbmdlKSxcbiAgICAgICAgICAgICAgICBvblBpY2s6IGhhbmRsZVJhbmdlUGljayxcbiAgICAgICAgICAgICAgICBvblNlbGVjdDogdW5yZWYob25TZWxlY3QpXG4gICAgICAgICAgICAgIH0sIG51bGwsIDgsIFtcImRhdGVcIiwgXCJtaW4tZGF0ZVwiLCBcIm1heC1kYXRlXCIsIFwicmFuZ2Utc3RhdGVcIiwgXCJkaXNhYmxlZC1kYXRlXCIsIFwib25DaGFuZ2VyYW5nZVwiLCBcIm9uU2VsZWN0XCJdKVxuICAgICAgICAgICAgXSwgMilcbiAgICAgICAgICBdLCAyKVxuICAgICAgICBdLCAyKVxuICAgICAgXSwgMik7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgTW9udGhSYW5nZVBpY2tQYW5lbCA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9wYW5lbC1tb250aC1yYW5nZS52dWVcIl1dKTtcblxuZXhwb3J0IHsgTW9udGhSYW5nZVBpY2tQYW5lbCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYW5lbC1tb250aC1yYW5nZS5tanMubWFwXG4iLCJpbXBvcnQgRGF0ZVBpY2tQYW5lbCBmcm9tICcuL2RhdGUtcGlja2VyLWNvbS9wYW5lbC1kYXRlLXBpY2subWpzJztcbmltcG9ydCBEYXRlUmFuZ2VQaWNrUGFuZWwgZnJvbSAnLi9kYXRlLXBpY2tlci1jb20vcGFuZWwtZGF0ZS1yYW5nZS5tanMnO1xuaW1wb3J0IE1vbnRoUmFuZ2VQaWNrUGFuZWwgZnJvbSAnLi9kYXRlLXBpY2tlci1jb20vcGFuZWwtbW9udGgtcmFuZ2UubWpzJztcblxuY29uc3QgZ2V0UGFuZWwgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJkYXRlcmFuZ2VcIjpcbiAgICBjYXNlIFwiZGF0ZXRpbWVyYW5nZVwiOiB7XG4gICAgICByZXR1cm4gRGF0ZVJhbmdlUGlja1BhbmVsO1xuICAgIH1cbiAgICBjYXNlIFwibW9udGhyYW5nZVwiOiB7XG4gICAgICByZXR1cm4gTW9udGhSYW5nZVBpY2tQYW5lbDtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIERhdGVQaWNrUGFuZWw7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgeyBnZXRQYW5lbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFuZWwtdXRpbHMubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBwcm92aWRlLCByZWFjdGl2ZSwgdG9SZWYsIHJlZiwgY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgfSBmcm9tICd2dWUnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCBjdXN0b21QYXJzZUZvcm1hdCBmcm9tICdkYXlqcy9wbHVnaW4vY3VzdG9tUGFyc2VGb3JtYXQuanMnO1xuaW1wb3J0IGFkdmFuY2VkRm9ybWF0IGZyb20gJ2RheWpzL3BsdWdpbi9hZHZhbmNlZEZvcm1hdC5qcyc7XG5pbXBvcnQgbG9jYWxlRGF0YSBmcm9tICdkYXlqcy9wbHVnaW4vbG9jYWxlRGF0YS5qcyc7XG5pbXBvcnQgd2Vla09mWWVhciBmcm9tICdkYXlqcy9wbHVnaW4vd2Vla09mWWVhci5qcyc7XG5pbXBvcnQgd2Vla1llYXIgZnJvbSAnZGF5anMvcGx1Z2luL3dlZWtZZWFyLmpzJztcbmltcG9ydCBkYXlPZlllYXIgZnJvbSAnZGF5anMvcGx1Z2luL2RheU9mWWVhci5qcyc7XG5pbXBvcnQgaXNTYW1lT3JBZnRlciBmcm9tICdkYXlqcy9wbHVnaW4vaXNTYW1lT3JBZnRlci5qcyc7XG5pbXBvcnQgaXNTYW1lT3JCZWZvcmUgZnJvbSAnZGF5anMvcGx1Z2luL2lzU2FtZU9yQmVmb3JlLmpzJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vdGltZS1waWNrZXIvaW5kZXgubWpzJztcbmltcG9ydCB7IFJPT1RfUElDS0VSX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgZGF0ZVBpY2tlclByb3BzIH0gZnJvbSAnLi9wcm9wcy9kYXRlLXBpY2tlci5tanMnO1xuaW1wb3J0IHsgZ2V0UGFuZWwgfSBmcm9tICcuL3BhbmVsLXV0aWxzLm1qcyc7XG5pbXBvcnQgeyB0aW1lUGlja2VyRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vLi4vdGltZS1waWNrZXIvc3JjL2NvbW1vbi9wcm9wcy5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleC5tanMnO1xuaW1wb3J0IHsgREVGQVVMVF9GT1JNQVRTX0RBVEVQSUNLRVIsIERFRkFVTFRfRk9STUFUU19EQVRFIH0gZnJvbSAnLi4vLi4vdGltZS1waWNrZXIvc3JjL2NvbnN0YW50cy5tanMnO1xuaW1wb3J0IENvbW1vblBpY2tlciBmcm9tICcuLi8uLi90aW1lLXBpY2tlci9zcmMvY29tbW9uL3BpY2tlci5tanMnO1xuXG5kYXlqcy5leHRlbmQobG9jYWxlRGF0YSk7XG5kYXlqcy5leHRlbmQoYWR2YW5jZWRGb3JtYXQpO1xuZGF5anMuZXh0ZW5kKGN1c3RvbVBhcnNlRm9ybWF0KTtcbmRheWpzLmV4dGVuZCh3ZWVrT2ZZZWFyKTtcbmRheWpzLmV4dGVuZCh3ZWVrWWVhcik7XG5kYXlqcy5leHRlbmQoZGF5T2ZZZWFyKTtcbmRheWpzLmV4dGVuZChpc1NhbWVPckFmdGVyKTtcbmRheWpzLmV4dGVuZChpc1NhbWVPckJlZm9yZSk7XG52YXIgRGF0ZVBpY2tlciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRWxEYXRlUGlja2VyXCIsXG4gIGluc3RhbGw6IG51bGwsXG4gIHByb3BzOiB7XG4gICAgLi4udGltZVBpY2tlckRlZmF1bHRQcm9wcyxcbiAgICAuLi5kYXRlUGlja2VyUHJvcHNcbiAgfSxcbiAgZW1pdHM6IFtcInVwZGF0ZTptb2RlbFZhbHVlXCJdLFxuICBzZXR1cChwcm9wcywge1xuICAgIGV4cG9zZSxcbiAgICBlbWl0LFxuICAgIHNsb3RzXG4gIH0pIHtcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcInBpY2tlci1wYW5lbFwiKTtcbiAgICBwcm92aWRlKFwiRWxQb3BwZXJPcHRpb25zXCIsIHJlYWN0aXZlKHRvUmVmKHByb3BzLCBcInBvcHBlck9wdGlvbnNcIikpKTtcbiAgICBwcm92aWRlKFJPT1RfUElDS0VSX0lOSkVDVElPTl9LRVksIHtcbiAgICAgIHNsb3RzLFxuICAgICAgcGlja2VyTnM6IG5zXG4gICAgfSk7XG4gICAgY29uc3QgY29tbW9uUGlja2VyID0gcmVmKCk7XG4gICAgY29uc3QgcmVmUHJvcHMgPSB7XG4gICAgICBmb2N1czogKGZvY3VzU3RhcnRJbnB1dCA9IHRydWUpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSBjb21tb25QaWNrZXIudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5mb2N1cyhmb2N1c1N0YXJ0SW5wdXQpO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZU9wZW46ICgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSBjb21tb25QaWNrZXIudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5oYW5kbGVPcGVuKCk7XG4gICAgICB9LFxuICAgICAgaGFuZGxlQ2xvc2U6ICgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSBjb21tb25QaWNrZXIudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5oYW5kbGVDbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgZXhwb3NlKHJlZlByb3BzKTtcbiAgICBjb25zdCBvbk1vZGVsVmFsdWVVcGRhdGVkID0gKHZhbCkgPT4ge1xuICAgICAgZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsIHZhbCk7XG4gICAgfTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgY29uc3QgZm9ybWF0ID0gKF9hID0gcHJvcHMuZm9ybWF0KSAhPSBudWxsID8gX2EgOiBERUZBVUxUX0ZPUk1BVFNfREFURVBJQ0tFUltwcm9wcy50eXBlXSB8fCBERUZBVUxUX0ZPUk1BVFNfREFURTtcbiAgICAgIGNvbnN0IENvbXBvbmVudCA9IGdldFBhbmVsKHByb3BzLnR5cGUpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKENvbW1vblBpY2tlciwgbWVyZ2VQcm9wcyhwcm9wcywge1xuICAgICAgICBcImZvcm1hdFwiOiBmb3JtYXQsXG4gICAgICAgIFwidHlwZVwiOiBwcm9wcy50eXBlLFxuICAgICAgICBcInJlZlwiOiBjb21tb25QaWNrZXIsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBvbk1vZGVsVmFsdWVVcGRhdGVkXG4gICAgICB9KSwge1xuICAgICAgICBkZWZhdWx0OiAoc2NvcGVkUHJvcHMpID0+IGNyZWF0ZVZOb2RlKENvbXBvbmVudCwgc2NvcGVkUHJvcHMsIG51bGwpLFxuICAgICAgICBcInJhbmdlLXNlcGFyYXRvclwiOiBzbG90c1tcInJhbmdlLXNlcGFyYXRvclwiXVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufSk7XG5cbmV4cG9ydCB7IERhdGVQaWNrZXIgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZS1waWNrZXIubWpzLm1hcFxuIiwiaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi9zcmMvZGF0ZS1waWNrZXIubWpzJztcbmV4cG9ydCB7IFJPT1RfUElDS0VSX0lOSkVDVElPTl9LRVkgfSBmcm9tICcuL3NyYy9jb25zdGFudHMubWpzJztcblxuY29uc3QgX0RhdGVQaWNrZXIgPSBEYXRlUGlja2VyO1xuX0RhdGVQaWNrZXIuaW5zdGFsbCA9IChhcHApID0+IHtcbiAgYXBwLmNvbXBvbmVudChfRGF0ZVBpY2tlci5uYW1lLCBfRGF0ZVBpY2tlcik7XG59O1xuY29uc3QgRWxEYXRlUGlja2VyID0gX0RhdGVQaWNrZXI7XG5cbmV4cG9ydCB7IEVsRGF0ZVBpY2tlciwgX0RhdGVQaWNrZXIgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZmxleCBqdXN0aWZ5LWVuZCBtYi0yXCI+XG4gICAgPGVsLXRhZyBjbGFzcz1cIm1yLTRcIj7liLbooajkurrvvJrlr7/lubM8L2VsLXRhZz5cbiAgICA8ZWwtdGFnIGNsYXNzPVwibXItNFwiPuetvuaUtuS6uu+8mueOieWQmzwvZWwtdGFnPlxuICAgIDxlbC10YWcgY2xhc3M9XCJtci00XCI+MjAyMy8wNi8xMzwvZWwtdGFnPlxuICA8L2Rpdj5cbiAgPHNlbGZUYWJsZVxuICAgIDpzb3J0YWJsZUluZGV4PVwic29ydGFibGVJbmRleFwiXG4gICAgOmNvbHVtbi1jb25maWc9XCJjb2x1bW5Db25maWdcIlxuICAgIDp0YWJsZURhdGE9XCJfdGFibGVEYXRhXCJcbiAgLz5cbiAgPGVsLWZvb3RlciBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktZW5kXCI+XG4gICAgPGVsLWJ1dHRvbiBAY2xpY2s9XCJlbWl0KCdjYW5jZWwnKVwiPuWPlua2iDwvZWwtYnV0dG9uPlxuICA8L2VsLWZvb3Rlcj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgc2VsZlRhYmxlIGZyb20gXCJAL2NvbXBvbmVudHMvc2VsZlRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgcmVhY3RpdmUsIGRlZmluZUVtaXRzLCBkZWZpbmVQcm9wcywgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBFbE1lc3NhZ2UgfSBmcm9tIFwiZWxlbWVudC1wbHVzXCI7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcHJpbnROdW1iZXI6IE51bWJlcixcbn0pO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImNhbmNlbFwiLCBcIm1pbnVzXCJdKTtcbmNvbnN0IGNvbHVtbkNvbmZpZyA9IHJlYWN0aXZlKFtcbiAgXCLkuqflk4HnvJblj7dcIixcbiAgXCLkuqflk4HlkI3np7BcIixcbiAgXCLlhaXku5PmlbDph49cIixcbiAgXCLlpIfms6hcIixcbl0pO1xuY29uc3QgdGFibGVEYXRhID0gbmV3IEFycmF5KDIwKS5maWxsKG51bGwpLm1hcCgoKSA9PiAoe1xuICAxOiBgQU0ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApfWAsXG4gIDI6IFwiUy1GXCIsXG4gIDM6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKSxcbiAgNDogXCItLVwiLFxufSkpO1xubGV0IF90YWJsZURhdGEgPSB0YWJsZURhdGEuc2xpY2UoMCk7XG5jb25zdCBzb3J0YWJsZUluZGV4ID0gcmVhY3RpdmUoWzBdKTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIiBzY29wZWQ+PC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBtYi0yXCI+XG4gICAgPGRpdj48ZWwtdGFnIGNsYXNzPVwibXItNFwiPuWItuihqOS6uu+8muWvv+W5szwvZWwtdGFnPlxuICAgIDxlbC10YWcgY2xhc3M9XCJtci00XCI+562+5pS25Lq677ya546J5ZCbPC9lbC10YWc+XG4gICAgPGVsLXRhZyBjbGFzcz1cIm1yLTRcIj4yMDIzLzA2LzEzPC9lbC10YWc+PC9kaXY+XG4gICAgPGVsLWJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiPuWOu+aJk+WNsDwvZWwtYnV0dG9uPlxuICA8L2Rpdj5cbiAgPHNlbGZUYWJsZVxuICAgIDpzb3J0YWJsZUluZGV4PVwic29ydGFibGVJbmRleFwiXG4gICAgOmNvbHVtbi1jb25maWc9XCJjb2x1bW5Db25maWdcIlxuICAgIDp0YWJsZURhdGE9XCJ0YWJsZURhdGFcIlxuICAvPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCBzZWxmVGFibGUgZnJvbSBcIkAvY29tcG9uZW50cy9zZWxmVGFibGUudnVlXCI7XG5pbXBvcnQgeyByZWFjdGl2ZSwgZGVmaW5lRW1pdHMsIGRlZmluZVByb3BzLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwcmludE51bWJlcjogTnVtYmVyLFxufSk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiY2FuY2VsXCIsIFwibWludXNcIl0pO1xuY29uc3QgdGFibGVEYXRhMiA9IHJlYWN0aXZlKFxuICBuZXcgQXJyYXkoMTApLmZpbGwobnVsbCkubWFwKCgpID0+IHtcbiAgICBjb25zdCBjb3VudCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcbiAgICBjb25zdCByZWNvcmQgPSBbNTAwLCAxMDAwLCAyMDAwXVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKV07XG4gICAgcmV0dXJuIHtcbiAgICAgIDE6IGBBTSR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCl9YCxcbiAgICAgIDI6IGBISEMke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCl9YCxcbiAgICAgIDM6IGNvdW50LCAvL+aAu+aVsFxuICAgICAgNDogcmVjb3JkLCAvLyDmr4/nrrHmlbBcbiAgICAgIDU6IGNvdW50ICUgcmVjb3JkLCAvL+S9meaVsFxuICAgIH07XG4gIH0pXG4pO1xuY29uc3QgY29sdW1uQ29uZmlnID0gcmVhY3RpdmUoW1wi5pel5pyfXCIsIFwi5omA5bGe5oiQ5ZOBXCIsIFwi5pWw6YePXCIsIFwi5bqT5L2NXCIsIFwi566x5Y+3XCJdKTtcbmNvbnN0IHRhYmxlRGF0YSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgY29uc3QgbGlzdHMgPSB0YWJsZURhdGEyLm1hcCgoaXRlbSkgPT4ge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgY29uc3QgbGVuID0gTWF0aC5mbG9vcihpdGVtWzNdIC8gaXRlbVs0XSk7XG4gICAgY29uc3QgeXUgPSBpdGVtWzNdICUgaXRlbVs0XTtcbiAgICBsZXQgeE51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcbiAgICBsZXQgY3UgPSB4TnVtYmVyO1xuICAgIGNvbnN0IGRhdGUgPSBcIjIwMjMvMDMvMTVcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgMTogZGF0ZSxcbiAgICAgICAgMjogaXRlbVsxXSxcbiAgICAgICAgMzogaXRlbVs0XSxcbiAgICAgICAgNDogY3UsXG4gICAgICAgIDU6IHhOdW1iZXIrKyxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoeXUgPiAwKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgMTogZGF0ZSxcbiAgICAgICAgMjogaXRlbVsxXSxcbiAgICAgICAgMzogeXUsXG4gICAgICAgIDQ6IGN1LFxuICAgICAgICA1OiB4TnVtYmVyKyssXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9KTtcbiAgcmV0dXJuIGxpc3RzLmZsYXQoSW5maW5pdHkpO1xufSk7XG5jb25zdCBzb3J0YWJsZUluZGV4ID0gcmVhY3RpdmUoWzFdKTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIiBzY29wZWQ+PC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGVsLXRhYnMgdi1tb2RlbD1cInN0ZXBcIj5cbiAgICA8ZWwtdGFiLXBhbmUgbGFiZWw9XCLlhaXku5PljZVcIiBuYW1lPVwiMVwiPlxuICAgICAgPGVsLWZvcm0gY2xhc3M9XCJ3LTIvNVwiPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi5YWl5LuT5Y2V57yW5Y+3XCI+XG4gICAgICAgICAgPGVsLWlucHV0IC8+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi5pel5pyfXCI+XG4gICAgICAgICAgPGVsLWRhdGUtcGlja2VyIHYtbW9kZWw9XCJkYXRlXCIgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuWItuihqOS6ulwiPlxuICAgICAgICAgIDxlbC1pbnB1dCAvPlxuICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuetvuaUtuS6ulwiPlxuICAgICAgICAgIDxlbC1pbnB1dCAvPlxuICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWJ1dHRvbiBAY2xpY2s9XCJzdGVwID0gJzInXCI+56Gu5a6aPC9lbC1idXR0b24+XG4gICAgICA8L2VsLWZvcm0+XG4gICAgPC9lbC10YWItcGFuZT5cbiAgICA8ZWwtdGFiLXBhbmUgbGFiZWw9XCLmt7vliqDlhaXku5PorrDlvZVcIiBuYW1lPVwiMlwiPlxuICAgICAgPGVsLWhlYWRlciBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktZW5kXCI+XG4gICAgICAgIDxlbC1idXR0b24gdHlwZT1cInByaW1hcnlcIiBAY2xpY2s9XCJkaWFsb2dUYWJsZVZpc2libGUgPSB0cnVlXCJcbiAgICAgICAgICA+5re75Yqg6K6w5b2VPC9lbC1idXR0b25cbiAgICAgICAgPlxuICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9XCJwcmltYXJ5XCI+5L+d5a2Y5YWl5LuT5Y2VPC9lbC1idXR0b24+XG4gICAgICAgIDxlbC1idXR0b24gdHlwZT1cInN1Y2Nlc3NcIiBAY2xpY2s9XCJzdGVwID0gJzMnXCI+55Sf5oiQ5qCH562+PC9lbC1idXR0b24+XG4gICAgICA8L2VsLWhlYWRlcj5cbiAgICAgIDxzZWxmVGFibGVcbiAgICAgICAgOmNvbHVtbi1jb25maWc9XCJjb2x1bW5Db25maWdcIlxuICAgICAgICA6dGFibGVEYXRhPVwidGFibGVEYXRhXCJcbiAgICAgICAgOmJ1dHRvbnM9XCJbJ+WIoOmZpCcsICfkv67mlLknXVwiXG4gICAgICAgIEB0b29sc0hhbmRsZT1cInRvb2xzSGFuZGxlXCJcbiAgICAgIC8+XG4gICAgPC9lbC10YWItcGFuZT5cbiAgICA8IS0tIDxlbC10YWItcGFuZSBsYWJlbD1cIuWFpeS7k+WNleaLhuino1wiIG5hbWU9XCIzXCI+XG4gICAgICA8ZWwtaGVhZGVyIGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1lbmRcIj5cbiAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPVwic3VjY2Vzc1wiIEBjbGljaz1cInN0ZXAgPSAnNCdcIj7nlJ/miJDmoIfnrb48L2VsLWJ1dHRvbj5cbiAgICAgIDwvZWwtaGVhZGVyPlxuICAgICAgPHNlbGZUYWJsZVxuICAgICAgICA6Y29sdW1uLWNvbmZpZz1cImNvbHVtbkNvbmZpZzJcIlxuICAgICAgICA6dGFibGVEYXRhPVwidGFibGVEYXRhMlwiXG4gICAgICAgIDplZGl0YWJsZT1cIls1LCA2XVwiXG4gICAgICAvPlxuICAgIDwvZWwtdGFiLXBhbmU+IC0tPlxuICAgIDxlbC10YWItcGFuZSBsYWJlbD1cIuagh+etvlwiIG5hbWU9XCIzXCI+XG4gICAgICA8ZWwtdGFicyB0YWItcG9zaXRpb249XCJsZWZ0XCI+XG4gICAgICAgIDxlbC10YWItcGFuZSBsYWJlbD1cIuaVtOeuseagh+etvlwiPlxuICAgICAgICAgIDxwYWdlSGVhZGVyPlxuICAgICAgICAgICAgPHRlbXBsYXRlICNsZWZ0PlxuICAgICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgICB2LW1vZGVsPVwicHJvZHVjZVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJtci0yXCJcbiAgICAgICAgICAgICAgICBzdHlsZT1cIndpZHRoOiA1MCVcIlxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi6L6T5YWl5oiQ5ZOB5b2S5bGe5pCc57SiXCJcbiAgICAgICAgICAgICAgICBjbGVhcmFibGVcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSAjYXBwZW5kPlxuICAgICAgICAgICAgICAgICAgPGVsLWJ1dHRvbiA6aWNvbj1cIlNlYXJjaFwiIC8+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgPC9lbC1pbnB1dD5cbiAgICAgICAgICAgICAgPGVsLWlucHV0XG4gICAgICAgICAgICAgICAgdi1pZj1cInByb2R1Y2VcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwibXItMlwiXG4gICAgICAgICAgICAgICAgdi1tb2RlbD1cImt1V2VpXCJcbiAgICAgICAgICAgICAgICBzdHlsZT1cIndpZHRoOiAyMCVcIlxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5L+u5pS55bqT5L2NXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPGVsLWJ1dHRvbiB2LWlmPVwicHJvZHVjZVwiIHR5cGU9XCJwcmltYXJ5XCIgQGNsaWNrPVwic2V0S3VXZWlcIlxuICAgICAgICAgICAgICAgID7noa7lrpo8L2VsLWJ1dHRvblxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlICNyaWdodD5cbiAgICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIEBjbGljaz1cImVkaXRcIj57eyBlZGl0VGV4dCB9fTwvZWwtYnV0dG9uPlxuICAgICAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgQGNsaWNrPVwidG9QcmludFwiPuWOu+aJk+WNsDwvZWwtYnV0dG9uPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L3BhZ2VIZWFkZXI+XG4gICAgICAgICAgPHNlbGZUYWJsZVxuICAgICAgICAgICAgc2VsZWN0aW9uXG4gICAgICAgICAgICA6Y29sdW1uLWNvbmZpZz1cImNvbHVtbkNvbmZpZzNcIlxuICAgICAgICAgICAgOnRhYmxlRGF0YT1cIl90YWJsZURhdGEzXCJcbiAgICAgICAgICAgIDplZGl0YWJsZT1cImVkaXRhYmxlM1wiXG4gICAgICAgICAgICA6c29ydGFibGVJbmRleD1cInNvcnRhYmxlSW5kZXhcIlxuICAgICAgICAgICAgZGVmYXVsdC1leHBhbmQtYWxsXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9lbC10YWItcGFuZT5cbiAgICAgICAgPGVsLXRhYi1wYW5lIGxhYmVsPVwi5ou8566x5qCH562+XCI+XG4gICAgICAgICAgPHBhZ2VIZWFkZXI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgI2xlZnQ+XG4gICAgICAgICAgICAgIDxlbC1pbnB1dFxuICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJwcm9kdWNlXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cIm1yLTJcIlxuICAgICAgICAgICAgICAgIHN0eWxlPVwid2lkdGg6IDUwJVwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCLovpPlhaXmiJDlk4HlvZLlsZ7mkJzntKJcIlxuICAgICAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlICNhcHBlbmQ+XG4gICAgICAgICAgICAgICAgICA8ZWwtYnV0dG9uIDppY29uPVwiU2VhcmNoXCIgLz5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICA8L2VsLWlucHV0PlxuICAgICAgICAgICAgICA8ZWwtaW5wdXRcbiAgICAgICAgICAgICAgICB2LWlmPVwicHJvZHVjZVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJtci0yXCJcbiAgICAgICAgICAgICAgICB2LW1vZGVsPVwia3VXZWlcIlxuICAgICAgICAgICAgICAgIHN0eWxlPVwid2lkdGg6IDIwJVwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCLkv67mlLnlupPkvY1cIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8ZWwtYnV0dG9uIHYtaWY9XCJwcm9kdWNlXCIgdHlwZT1cInByaW1hcnlcIiBAY2xpY2s9XCJzZXRLdVdlaVwiXG4gICAgICAgICAgICAgICAgPuehruWumjwvZWwtYnV0dG9uXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8dGVtcGxhdGUgI3JpZ2h0PlxuICAgICAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9XCJzdWNjZXNzXCI+5a+85Ye6ZXhjZWw8L2VsLWJ1dHRvbj5cbiAgICAgICAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIEBjbGljaz1cInRvUHJpbnRcIj7miZPljbA8L2VsLWJ1dHRvbj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9wYWdlSGVhZGVyPlxuICAgICAgICAgIDxzZWxmVGFibGVcbiAgICAgICAgICAgIHNlbGVjdGlvblxuICAgICAgICAgICAgOmNvbHVtbi1jb25maWc9XCJjb2x1bW5Db25maWczXCJcbiAgICAgICAgICAgIDp0YWJsZURhdGE9XCJfdGFibGVEYXRhNFwiXG4gICAgICAgICAgICA6ZWRpdGFibGU9XCJbMywgNF1cIlxuICAgICAgICAgICAgOnNvcnRhYmxlSW5kZXg9XCJzb3J0YWJsZUluZGV4XCJcbiAgICAgICAgICAgIGRlZmF1bHQtZXhwYW5kLWFsbFxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZWwtdGFiLXBhbmU+XG4gICAgICA8L2VsLXRhYnM+XG4gICAgPC9lbC10YWItcGFuZT5cbiAgPC9lbC10YWJzPlxuICA8ZWwtZGlhbG9nIHYtbW9kZWw9XCJkaWFsb2dUYWJsZVZpc2libGVcIiB0aXRsZT1cIua3u+WKoOWFpeS7k+WNleiusOW9lVwiPlxuICAgIDxlbC1mb3JtIGNsYXNzPVwidy0yLzVcIj5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLkuqflk4HnvJblj7dcIj5cbiAgICAgICAgPGVsLWlucHV0IC8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLmiJDlk4HlvZLlsZ5cIj5cbiAgICAgICAgPGVsLWlucHV0IC8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLmr4/nrrHlh6DkuKpcIj5cbiAgICAgICAgPGVsLWlucHV0IC8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLlh6DnrrFcIj5cbiAgICAgICAgPGVsLWlucHV0IC8+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1mb3JtLWl0ZW0gdi1mb3I9XCIoXywgaW5kZXgpIGluIHNoYXJlQm94XCIgbGFiZWw9XCLmi7znrrFcIj5cbiAgICAgICAgPGVsLWlucHV0IC8+XG4gICAgICAgIDxlbC1idXR0b24gdHlwZT1cInRleHRcIiBAY2xpY2s9XCJzaGFyZUJveC0tXCI+5Yig6ZmkPC9lbC1idXR0b24+XG4gICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgIDxlbC1idXR0b24gQGNsaWNrPVwicGluZ1wiPuWinuWKoOaLvOeusTwvZWwtYnV0dG9uPlxuICAgICAgPGVsLWJ1dHRvbiBAY2xpY2s9XCJhZGRcIiB0eXBlPVwicHJpbWFyeVwiPuehruWumjwvZWwtYnV0dG9uPlxuICAgIDwvZWwtZm9ybT5cbiAgPC9lbC1kaWFsb2c+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCByZWFjdGl2ZSwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHNlbGZUYWJsZSBmcm9tIFwiQC9jb21wb25lbnRzL3NlbGZUYWJsZS52dWVcIjtcbmltcG9ydCB7IFNlYXJjaCB9IGZyb20gXCJAZWxlbWVudC1wbHVzL2ljb25zLXZ1ZVwiO1xuaW1wb3J0IHBhZ2VIZWFkZXIgZnJvbSBcIkAvY29tcG9uZW50cy9wYWdlSGVhZGVyLnZ1ZVwiO1xuXG5sZXQgc3RlcCA9IHJlZihcIjFcIik7XG5sZXQgZGF0ZSA9IHJlZihuZXcgRGF0ZSgpKTtcbmNvbnN0IGNvbHVtbkNvbmZpZyA9IHJlYWN0aXZlKFtcbiAgXCLkuqflk4HnvJblj7dcIixcbiAgXCLmiJDlk4HlvZLlsZ5cIixcbiAgXCLmr4/nrrHmlbDph49cIixcbiAgXCLnrrHmlbBcIixcbiAgXCLmi7znrrHorrDlvZVcIixcbl0pO1xuY29uc3QgdGFibGVEYXRhID0gcmVhY3RpdmUoW10pO1xuY29uc3QgZGlhbG9nVGFibGVWaXNpYmxlID0gcmVmKGZhbHNlKTtcbmNvbnN0IHNoYXJlQm94ID0gcmVmKDApO1xuY29uc3QgcGluZyA9ICgpID0+IHtcbiAgc2hhcmVCb3gudmFsdWUrKztcbn07XG5jb25zdCBhZGQgPSAoKSA9PiB7XG4gIGRpYWxvZ1RhYmxlVmlzaWJsZS52YWx1ZSA9IGZhbHNlO1xuICB0YWJsZURhdGEucHVzaCh7XG4gICAgMTogYEFNJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKX1gLFxuICAgIDI6IGBISEMke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCl9YCxcbiAgICAzOiBbMTAsIDEwMCwgMTAwMCwgMjAwMF1bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMyldLFxuICAgIDQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwICsgMSksXG4gICAgNTogW1s5NjAwLCAyMzAwXSwgWzExMDBdLCBbMjIwMF0sIFsxMDAwLCAxMTAwXV1bXG4gICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKVxuICAgIF0sXG4gIH0pO1xufTtcbmNvbnN0IHRvb2xzSGFuZGxlID0gKHR5cGUpID0+IHtcbiAgaWYgKHR5cGUgPT09IDApIHtcbiAgICB0YWJsZURhdGEuc3BsaWNlKDAsIDEpO1xuICB9XG4gIGlmICh0eXBlID09PSAxKSB7XG4gICAgZGlhbG9nVGFibGVWaXNpYmxlLnZhbHVlID0gdHJ1ZTtcbiAgfVxufTtcbi8vIGNvbnN0IGNvbHVtbkNvbmZpZzIgPSByZWFjdGl2ZShbXG4vLyAgIFwi5Lqn5ZOB57yW5Y+3XCIsXG4vLyAgIFwi5Lqn5ZOB5ZCN56ewXCIsXG4vLyAgIFwi5YWl5LuT5pWw6YePXCIsXG4vLyAgIFwi5LiqL+eusVwiLFxuLy8gICBcIuS9meaVsFwiLFxuLy8gICBcIuS9meaVsOaYr+WQpuaLvOeusVwiLFxuLy8gICBcIuaLvOeuseeuseWPt1wiLFxuLy8gXSk7XG5jb25zdCB0YWJsZURhdGEyID0gcmVhY3RpdmUoXG4gIG5ldyBBcnJheSgxMCkuZmlsbChudWxsKS5tYXAoKCkgPT4ge1xuICAgIGNvbnN0IGNvdW50ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuICAgIGNvbnN0IHJlY29yZCA9IFs1MDAsIDEwMDAsIDIwMDBdW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMpXTtcbiAgICByZXR1cm4ge1xuICAgICAgMTogYEFNJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKX1gLFxuICAgICAgMjogYEhIQyR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKX1gLFxuICAgICAgMzogY291bnQsIC8v5oC75pWwXG4gICAgICA0OiByZWNvcmQsIC8vIOavj+euseaVsFxuICAgICAgNTogY291bnQgJSByZWNvcmQsIC8v5L2Z5pWwXG4gICAgfTtcbiAgfSlcbik7XG5jb25zdCBjb2x1bW5Db25maWczID0gcmVhY3RpdmUoW1wi5pel5pyfXCIsIFwi5omA5bGe5oiQ5ZOBXCIsIFwi5pWw6YePXCIsIFwi5bqT5L2NXCIsIFwi566x5Y+3XCJdKTtcbmxldCB0YWJsZURhdGEzID0gY29tcHV0ZWQoKCkgPT4ge1xuICBjb25zdCBsaXN0cyA9IHRhYmxlRGF0YTIubWFwKChpdGVtKSA9PiB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICBjb25zdCBsZW4gPSBNYXRoLmZsb29yKGl0ZW1bM10gLyBpdGVtWzRdKTtcbiAgICBjb25zdCB5dSA9IGl0ZW1bM10gJSBpdGVtWzRdO1xuICAgIGxldCB4TnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuICAgIGxldCBjdSA9IHhOdW1iZXI7XG4gICAgY29uc3QgZGF0ZSA9IFwiMjAyMy8wMy8xNVwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAxOiBkYXRlLFxuICAgICAgICAyOiBpdGVtWzFdLFxuICAgICAgICAzOiBpdGVtWzRdLFxuICAgICAgICA0OiBjdSxcbiAgICAgICAgNTogeE51bWJlcisrLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh5dSA+IDApIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAxOiBkYXRlLFxuICAgICAgICAyOiBpdGVtWzFdLFxuICAgICAgICAzOiB5dSxcbiAgICAgICAgNDogY3UsXG4gICAgICAgIDU6ICcnLFxuICAgICAgICA2OiB5dSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH0pO1xuICByZXR1cm4gbGlzdHMuZmxhdChJbmZpbml0eSk7XG59KTtcbmxldCBwcm9kdWNlID0gcmVmKFwiXCIpO1xubGV0IGt1V2VpID0gcmVmKFwiXCIpO1xubGV0IF9rdVdlaSA9IHJlZihcIlwiKTtcbmxldCBlZGl0VGV4dCA9IHJlZihcIue8lui+keW6k+S9jVwiKTtcbmxldCBlZGl0YWJsZTMgPSByZWFjdGl2ZShbXSk7XG5jb25zdCBlZGl0ID0gKCkgPT4ge1xuICBpZiAoZWRpdGFibGUzLmxlbmd0aCA9PT0gMCkge1xuICAgIGVkaXRhYmxlMy5wdXNoKDMpO1xuICAgIGVkaXRUZXh0LnZhbHVlID0gXCLkv53lrZjnvJbovpFcIjtcbiAgfSBlbHNlIHtcbiAgICBlZGl0YWJsZTMuc3BsaWNlKDApO1xuICAgIGVkaXRUZXh0LnZhbHVlID0gXCLmibnph4/nvJbovpHlupPkvY1cIjtcbiAgfVxufTtcbmNvbnN0IHNldEt1V2VpID0gKCkgPT4ge1xuICBfa3VXZWkudmFsdWUgPSBrdVdlaS52YWx1ZTtcbn07XG5sZXQgX3RhYmxlRGF0YTMgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSB0YWJsZURhdGEzLnZhbHVlXG4gICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbVsyXS5pbmNsdWRlcyhwcm9kdWNlLnZhbHVlKSAgJiYgIWl0ZW1bNl0pXG4gICAgLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKF9rdVdlaS52YWx1ZSkge1xuICAgICAgICBpdGVtWzRdID0gX2t1V2VpLnZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG4gIHJldHVybiBkYXRhO1xufSk7XG5sZXQgX3RhYmxlRGF0YTQgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSB0YWJsZURhdGEzLnZhbHVlXG4gICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbVsyXS5pbmNsdWRlcyhwcm9kdWNlLnZhbHVlKSAmJiBpdGVtWzZdKVxuICAgIC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIGlmIChfa3VXZWkudmFsdWUpIHtcbiAgICAgICAgaXRlbVs0XSA9IF9rdVdlaS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xuICByZXR1cm4gZGF0YTtcbn0pO1xuY29uc3Qgc29ydGFibGVJbmRleCA9IHJlYWN0aXZlKFsxXSk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wic3VyZVwiXSk7XG5jb25zdCB0b1ByaW50ID0gKCkgPT4ge1xuICBlbWl0KFwic3VyZVwiKTtcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxwYWdlSGVhZGVyPlxuICAgIDx0ZW1wbGF0ZSAjbGVmdD5cbiAgICAgIDxlbC1pbnB1dFxuICAgICAgICB2LW1vZGVsPVwicHJvZHVjZVwiXG4gICAgICAgIGNsYXNzPVwibXItMlwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwi6L6T5YWl5Lqn5ZOB57yW5Y+35pCc57SiXCJcbiAgICAgICAgY2xlYXJhYmxlXG4gICAgICA+XG4gICAgICAgIDx0ZW1wbGF0ZSAjYXBwZW5kPlxuICAgICAgICAgIDxlbC1idXR0b24gOmljb249XCJTZWFyY2hcIiAvPlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC9lbC1pbnB1dD5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSAjcmlnaHQ+XG4gICAgICA8ZWwtYnV0dG9uIHR5cGU9XCJwcmltYXJ5XCI+5omT5Y2wPC9lbC1idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9wYWdlSGVhZGVyPlxuICA8c2VsZlRhYmxlXG4gICAgc2VsZWN0aW9uXG4gICAgOnNvcnRhYmxlSW5kZXg9XCJzb3J0YWJsZUluZGV4XCJcbiAgICA6Y29sdW1uLWNvbmZpZz1cImNvbHVtbkNvbmZpZ1wiXG4gICAgOnRhYmxlRGF0YT1cInRhYmxlRGF0YVwiXG4gICAgOmJ1dHRvbnM9XCJbJ+WIoOmZpCddXCJcbiAgICBAdG9vbHNIYW5kbGU9XCJ0b29sc0hhbmRsZVwiXG4gIC8+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHNlbGZUYWJsZSBmcm9tIFwiQC9jb21wb25lbnRzL3NlbGZUYWJsZS52dWVcIjtcbmltcG9ydCB7IHJlYWN0aXZlLCBkZWZpbmVFbWl0cywgZGVmaW5lUHJvcHMsIGNvbXB1dGVkLCByZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBTZWFyY2ggfSBmcm9tIFwiQGVsZW1lbnQtcGx1cy9pY29ucy12dWVcIjtcbmltcG9ydCBwYWdlSGVhZGVyIGZyb20gXCJAL2NvbXBvbmVudHMvcGFnZUhlYWRlci52dWVcIjtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwcmludE51bWJlcjogTnVtYmVyLFxufSk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiY2FuY2VsXCIsIFwibWludXNcIl0pO1xuY29uc3QgdGFibGVEYXRhMiA9IHJlYWN0aXZlKFxuICBuZXcgQXJyYXkoMTApLmZpbGwobnVsbCkubWFwKCgpID0+IHtcbiAgICBjb25zdCBjb3VudCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcbiAgICBjb25zdCByZWNvcmQgPSBbNTAwLCAxMDAwLCAyMDAwXVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKV07XG4gICAgcmV0dXJuIHtcbiAgICAgIDE6IGBBTSR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCl9YCxcbiAgICAgIDI6IGBISEMke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCl9YCxcbiAgICAgIDM6IGNvdW50LCAvL+aAu+aVsFxuICAgICAgNDogcmVjb3JkLCAvLyDmr4/nrrHmlbBcbiAgICAgIDU6IGNvdW50ICUgcmVjb3JkLCAvL+S9meaVsFxuICAgIH07XG4gIH0pXG4pO1xuY29uc3QgY29sdW1uQ29uZmlnID0gcmVhY3RpdmUoW1wi5pel5pyfXCIsIFwi5omA5bGe5oiQ5ZOBXCIsIFwi5pWw6YePXCIsIFwi5bqT5L2NXCIsIFwi566x5Y+3XCJdKTtcbmNvbnN0IHRhYmxlRGF0YSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgY29uc3QgbGlzdHMgPSB0YWJsZURhdGEyLm1hcCgoaXRlbSkgPT4ge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgY29uc3QgbGVuID0gTWF0aC5mbG9vcihpdGVtWzNdIC8gaXRlbVs0XSk7XG4gICAgY29uc3QgeXUgPSBpdGVtWzNdICUgaXRlbVs0XTtcbiAgICBsZXQgeE51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcbiAgICBsZXQgY3UgPSB4TnVtYmVyO1xuICAgIGNvbnN0IGRhdGUgPSBcIjIwMjMvMDMvMTVcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgMTogZGF0ZSxcbiAgICAgICAgMjogaXRlbVsxXSxcbiAgICAgICAgMzogaXRlbVs0XSxcbiAgICAgICAgNDogY3UsXG4gICAgICAgIDU6IHhOdW1iZXIrKyxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoeXUgPiAwKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgMTogZGF0ZSxcbiAgICAgICAgMjogaXRlbVsxXSxcbiAgICAgICAgMzogeXUsXG4gICAgICAgIDQ6IGN1LFxuICAgICAgICA1OiB4TnVtYmVyKyssXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9KTtcbiAgcmV0dXJuIGxpc3RzLmZsYXQoSW5maW5pdHkpO1xufSk7XG5jb25zdCBzb3J0YWJsZUluZGV4ID0gcmVhY3RpdmUoWzFdKTtcbmNvbnN0IHRvb2xzSGFuZGxlID0gKCkgPT4ge1xuICB0YWJsZURhdGEudmFsdWUuc3BsaWNlKDAsIDEpO1xufTtcbmNvbnN0IHByb2R1Y2UgPSByZWYoXCJcIik7XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCIgc2NvcGVkPjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxwYWdlSGVhZGVyPlxuICAgIDx0ZW1wbGF0ZSAjbGVmdD5cbiAgICAgIDxlbC1pbnB1dCBjbGFzcz1cIm1yLTJcIiBwbGFjZWhvbGRlcj1cIuafpeaJvuWFpeS7k+aMh+S7pOWNlVwiIGNsZWFyYWJsZT5cbiAgICAgICAgPHRlbXBsYXRlICNhcHBlbmQ+XG4gICAgICAgICAgPGVsLWJ1dHRvbiA6aWNvbj1cIlNlYXJjaFwiIC8+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L2VsLWlucHV0PlxuICAgICAgPGVsLWJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIEBjbGljaz1cImRpYWxvZ1RhYmxlVmlzaWJsZTM9dHJ1ZVwiPuWIm+W7uuWFpeS7k+aMh+S7pOWNlTwvZWwtYnV0dG9uPlxuICAgICAgPGVsLWJ1dHRvbiBAY2xpY2s9XCJkaWFsb2dUYWJsZVZpc2libGU1ID0gdHJ1ZVwiPuaJi+WKqOa3u+WKoOagh+etvjwvZWwtYnV0dG9uPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlICNyaWdodD5cbiAgICAgIDxlbC1iYWRnZT5cbiAgICAgICAgPGVsLWJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIEBjbGljaz1cImRpYWxvZ1RhYmxlVmlzaWJsZTQgPSB0cnVlXCI+5p+l55yL5b6F5omT5Y2w5YiX6KGoPC9lbC1idXR0b24+XG4gICAgICA8L2VsLWJhZGdlPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvcGFnZUhlYWRlcj5cbiAgPGVsLXRhZyB0eXBlPVwic3VjY2Vzc1wiPuWOhuWPsuWFpeS7k+WNlTwvZWwtdGFnPlxuICA8c2VsZlRhYmxlXG4gICAgc2VsZWN0aW9uXG4gICAgOnNvcnRhYmxlSW5kZXg9XCJzb3J0YWJsZUluZGV4XCJcbiAgICA6Y29sdW1uLWNvbmZpZz1cImNvbHVtbkNvbmZpZ1wiXG4gICAgOnRhYmxlRGF0YT1cInRhYmxlRGF0YVwiXG4gICAgOmJ1dHRvbnM9XCJbJ+S6p+WTgeivpuaDhScsICfmi4bljZXor6bmg4UnXVwiXG4gICAgQHRvb2xzSGFuZGxlPVwidG9vbHNIYW5kbGVcIlxuICAvPlxuICA8ZWwtZGlhbG9nIHYtbW9kZWw9XCJkaWFsb2dUYWJsZVZpc2libGUzXCIgdGl0bGU9XCLliJvlu7rlhaXku5PljZVcIiAgZnVsbHNjcmVlbj5cbiAgICA8Y3JlYXRlZFB1dE9yZGVyIEBzdXJlPVwidG9QcmludFwiLz5cbiAgPC9lbC1kaWFsb2c+XG4gIDxlbC1kaWFsb2cgdi1tb2RlbD1cImRpYWxvZ1RhYmxlVmlzaWJsZVwiIHRpdGxlPVwi5YWl5LuT5Y2V4oCU4oCU5Lqn5ZOB6K+m5oOFXCIgIHdpZHRoPVwiODAlXCI+XG4gICAgPHdhcmVob3VzZVJlY2VpcHQgQGNhbmNlbD1cImRpYWxvZ1RhYmxlVmlzaWJsZT1mYWxzZVwiIC8+XG4gIDwvZWwtZGlhbG9nPlxuICA8ZWwtZGlhbG9nIHYtbW9kZWw9XCJkaWFsb2dUYWJsZVZpc2libGUyXCIgdGl0bGU9XCLlhaXku5PljZXigJTigJTmi4bljZXor6bmg4VcIiAgd2lkdGg9XCI4MCVcIj5cbiAgICA8b3JkZXJPcGVuaW5nIEBjYW5jZWw9XCJkaWFsb2dUYWJsZVZpc2libGUyPWZhbHNlXCIgLz5cbiAgPC9lbC1kaWFsb2c+XG4gIDxlbC1kaWFsb2cgdi1tb2RlbD1cImRpYWxvZ1RhYmxlVmlzaWJsZTRcIiB0aXRsZT1cIuW+heaJk+WNsOWIl+ihqFwiICB3aWR0aD1cIjgwJVwiPlxuICAgIDxwcmVQcmludCBAY2FuY2VsPVwiZGlhbG9nVGFibGVWaXNpYmxlND1mYWxzZVwiIC8+XG4gIDwvZWwtZGlhbG9nPlxuICA8ZHJhd2VyXG4gICAgdGl0bGU9XCLmiYvliqjmt7vliqDmoIfnrb5cIlxuICAgIHYtbW9kZWw9XCJkaWFsb2dUYWJsZVZpc2libGU1XCJcbiAgICA6Zm9ybUl0ZW09XCJmb3JtSXRlbVwiXG4gIC8+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHBhZ2VIZWFkZXIgZnJvbSBcIkAvY29tcG9uZW50cy9wYWdlSGVhZGVyLnZ1ZVwiO1xuaW1wb3J0IGRyYXdlciBmcm9tIFwiQC9jb21wb25lbnRzL2RyYXdlci52dWVcIjtcbmltcG9ydCB3YXJlaG91c2VSZWNlaXB0IGZyb20gXCIuL3dhcmVob3VzZVJlY2VpcHQudnVlXCI7XG5pbXBvcnQgb3JkZXJPcGVuaW5nIGZyb20gXCIuL29yZGVyT3BlbmluZy52dWVcIjtcbmltcG9ydCBjcmVhdGVkUHV0T3JkZXIgZnJvbSBcIi4vY3JlYXRlZFB1dE9yZGVyLnZ1ZVwiO1xuaW1wb3J0IHByZVByaW50IGZyb20gXCIuL3ByZVByaW50LnZ1ZVwiO1xuaW1wb3J0IHsgU2VhcmNoIH0gZnJvbSBcIkBlbGVtZW50LXBsdXMvaWNvbnMtdnVlXCI7XG5pbXBvcnQgeyByZWFjdGl2ZSwgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuY29uc3QgY29sdW1uQ29uZmlnID0gcmVhY3RpdmUoW1wi5Yib5bu65pel5pyfXCIsIFwi5Yi26KGo5Lq6XCIsIFwi562+5pS25Lq6XCJdKTtcbmNvbnN0IHRhYmxlRGF0YSA9IHJlYWN0aXZlKFxuICBuZXcgQXJyYXkoMTAwKS5maWxsKG51bGwpLm1hcCgoKSA9PiAoe1xuICAgIDE6IGAyMDIyLzA2LyR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzApfWAsXG4gICAgMjogYOWvv+W5s2AsXG4gICAgMzogXCLnjonlkJtcIixcbiAgfSkpXG4pO1xuY29uc3Qgc29ydGFibGVJbmRleCA9IHJlYWN0aXZlKFswXSk7XG5jb25zdCBkaWFsb2dUYWJsZVZpc2libGUgPSByZWYoZmFsc2UpO1xuY29uc3QgZGlhbG9nVGFibGVWaXNpYmxlMiA9IHJlZihmYWxzZSk7XG5jb25zdCBkaWFsb2dUYWJsZVZpc2libGUzID0gcmVmKGZhbHNlKTtcbmNvbnN0IGRpYWxvZ1RhYmxlVmlzaWJsZTQgPSByZWYoZmFsc2UpO1xuY29uc3QgZGlhbG9nVGFibGVWaXNpYmxlNSA9IHJlZihmYWxzZSk7XG5jb25zdCB0b29sc0hhbmRsZSA9ICh0eXBlKSA9PiB7XG4gICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgICAgZGlhbG9nVGFibGVWaXNpYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IDEpIHtcbiAgICAgICAgZGlhbG9nVGFibGVWaXNpYmxlMi52YWx1ZSA9IHRydWU7XG4gICAgfVxufVxuY29uc3QgdG9QcmludCA9ICgpID0+IHtcbiAgZGlhbG9nVGFibGVWaXNpYmxlMy52YWx1ZSA9IGZhbHNlO1xuICBkaWFsb2dUYWJsZVZpc2libGU0LnZhbHVlID0gdHJ1ZTtcbn1cblxuY29uc3QgZm9ybUl0ZW0gPSByZWFjdGl2ZShbXCLml6XmnJ9cIiwgXCLmiYDlsZ7miJDlk4FcIiwgXCLmlbDph49cIiwgXCLlupPkvY1cIiwgXCLnrrHlj7dcIiwgXCLmiZPljbDlvKDmlbBcIl0pO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiIHNjb3BlZD48L3N0eWxlPlxuIl0sIm5hbWVzIjpbImRhdGVQaWNrVHlwZXMiLCJjYXN0QXJyYXkiLCJhcnIiLCJ0IiwiZSIsIm1vZHVsZSIsInRoaXMiLCJuIiwiciIsImkiLCJzIiwidSIsImEiLCJvIiwiZiIsImgiLCJjIiwiZCIsImwiLCJ5IiwiTSIsIm0iLCJ2IiwiZyIsIkQiLCJwIiwiXyIsIlMiLCJ3IiwiTyIsIiQiLCJUIiwiWSIsInRpbWVVbml0cyIsIkRFRkFVTFRfRk9STUFUU19USU1FIiwiREVGQVVMVF9GT1JNQVRTX0RBVEUiLCJERUZBVUxUX0ZPUk1BVFNfREFURVBJQ0tFUiIsImJ1aWxkVGltZUxpc3QiLCJ2YWx1ZSIsImJvdW5kIiwicmFuZ2VBcnIiLCJleHRyYWN0RGF0ZUZvcm1hdCIsImZvcm1hdCIsImV4dHJhY3RUaW1lRm9ybWF0IiwiZGF0ZUVxdWFscyIsImIiLCJhSXNEYXRlIiwiaXNEYXRlIiwiYklzRGF0ZSIsInZhbHVlRXF1YWxzIiwiYUlzQXJyYXkiLCJpc0FycmF5IiwiYklzQXJyYXkiLCJpdGVtIiwiaW5kZXgiLCJwYXJzZURhdGUiLCJkYXRlIiwibGFuZyIsImRheSIsImlzRW1wdHkiLCJkYXlqcyIsImZvcm1hdHRlciIsIm1ha2VMaXN0IiwidG90YWwiLCJtZXRob2QiLCJfYSIsImRpc2FibGVkQXJyIiwiZGlzYWJsZWRUaW1lTGlzdHNQcm9wcyIsImJ1aWxkUHJvcHMiLCJkZWZpbmVQcm9wVHlwZSIsInRpbWVQYW5lbFNoYXJlZFByb3BzIiwidGltZVBpY2tlckRlZmF1bHRQcm9wcyIsIkNpcmNsZUNsb3NlIiwidXNlU2l6ZVByb3AiLCJfaG9pc3RlZF8xIiwiX2hvaXN0ZWRfMiIsIl9fZGVmYXVsdF9fIiwiZGVmaW5lQ29tcG9uZW50IiwiX3NmY19tYWluIiwiX19wcm9wcyIsImV4cG9zZSIsImVtaXQiLCJwcm9wcyIsInVzZUxvY2FsZSIsIm5zRGF0ZSIsInVzZU5hbWVzcGFjZSIsIm5zSW5wdXQiLCJuc1JhbmdlIiwiZm9ybSIsImZvcm1JdGVtIiwidXNlRm9ybUl0ZW0iLCJlbFBvcHBlck9wdGlvbnMiLCJpbmplY3QiLCJyZWZQb3BwZXIiLCJyZWYiLCJpbnB1dFJlZiIsInBpY2tlclZpc2libGUiLCJwaWNrZXJBY3R1YWxWaXNpYmxlIiwidmFsdWVPbk9wZW4iLCJoYXNKdXN0VGFiRXhpdGVkSW5wdXQiLCJpZ25vcmVGb2N1c0V2ZW50Iiwid2F0Y2giLCJ2YWwiLCJuZXh0VGljayIsInVzZXJJbnB1dCIsImVtaXRDaGFuZ2UiLCJpc0NsZWFyIiwiZXJyIiwiZGVidWdXYXJuIiwiZW1pdElucHV0IiwiaW5wdXQiLCJmb3JtYXR0ZWQiLCJlbWl0S2V5ZG93biIsInJlZklucHV0IiwiY29tcHV0ZWQiLCJfciIsImlzUmFuZ2VJbnB1dCIsInNldFNlbGVjdGlvblJhbmdlIiwic3RhcnQiLCJlbmQiLCJwb3MiLCJfaW5wdXRzIiwiZm9jdXNPbklucHV0Qm94IiwiZm9jdXMiLCJvblBpY2siLCJ2aXNpYmxlIiwicmVzdWx0Iiwib25CZWZvcmVTaG93Iiwib25TaG93Iiwib25LZXlkb3duUG9wcGVyQ29udGVudCIsImV2ZW50IiwiRVZFTlRfQ09ERSIsIm9uSGlkZSIsImhhbmRsZU9wZW4iLCJoYW5kbGVDbG9zZSIsImZvY3VzU3RhcnRJbnB1dCIsImlzSWdub3JlRm9jdXNFdmVudCIsImxlZnRJbnB1dCIsInJpZ2h0SW5wdXQiLCJ1bnJlZiIsImhhbmRsZUZvY3VzSW5wdXQiLCJwaWNrZXJEaXNhYmxlZCIsImN1cnJlbnRIYW5kbGVCbHVyRGVmZXJDYWxsYmFjayIsImhhbmRsZUJsdXJJbnB1dCIsImhhbmRsZUJsdXJEZWZlciIsImhhbmRsZUNoYW5nZSIsInBhcnNlZFZhbHVlIiwiZGF5T3JEYXlzIiwidmFsdWVJc0VtcHR5IiwicGlja2VyT3B0aW9ucyIsImF2YWlsYWJsZVJlc3VsdCIsImlzRXF1YWwiLCJkaXNwbGF5VmFsdWUiLCJmb3JtYXR0ZWRWYWx1ZSIsImZvcm1hdERheWpzVG9TdHJpbmciLCJpc1RpbWVQaWNrZXIiLCJpc0RhdGVzUGlja2VyIiwiaXNUaW1lTGlrZVBpY2tlciIsInRyaWdnZXJJY29uIiwiQ2xvY2siLCJDYWxlbmRhciIsInNob3dDbG9zZSIsIm9uQ2xlYXJJY29uQ2xpY2siLCJtb2RlbFZhbHVlIiwib25Nb3VzZURvd25JbnB1dCIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIm9uVG91Y2hTdGFydElucHV0IiwicGlja2VyU2l6ZSIsInVzZUZvcm1TaXplIiwicG9wcGVyRWwiLCJfYiIsImFjdHVhbElucHV0UmVmIiwib25DbGlja091dHNpZGUiLCJ1bnJlZmVkUG9wcGVyRWwiLCJpbnB1dEVsIiwicGFyc2VVc2VySW5wdXRUb0RheWpzIiwiaXNWYWxpZFZhbHVlIiwiaGFuZGxlS2V5ZG93bklucHV0IiwiY29kZSIsIm9uVXNlcklucHV0IiwiaGFuZGxlU3RhcnRJbnB1dCIsInRhcmdldCIsImhhbmRsZUVuZElucHV0IiwiaGFuZGxlU3RhcnRDaGFuZ2UiLCJ2YWx1ZXMiLCJwYXJzZWRWYWwiLCJuZXdWYWx1ZSIsImhhbmRsZUVuZENoYW5nZSIsIm9uU2V0UGlja2VyT3B0aW9uIiwib25DYWxlbmRhckNoYW5nZSIsIm9uUGFuZWxDaGFuZ2UiLCJtb2RlIiwidmlldyIsInByb3ZpZGUiLCJfY3R4IiwiX2NhY2hlIiwib3BlbkJsb2NrIiwiY3JlYXRlQmxvY2siLCJFbFRvb2x0aXAiLCJtZXJnZVByb3BzIiwid2l0aEN0eCIsImNyZWF0ZUVsZW1lbnRCbG9jayIsIm5vcm1hbGl6ZUNsYXNzIiwibm9ybWFsaXplU3R5bGUiLCJFbEljb24iLCJ3aXRoTW9kaWZpZXJzIiwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnQiLCJjcmVhdGVDb21tZW50Vk5vZGUiLCJjcmVhdGVFbGVtZW50Vk5vZGUiLCJyZW5kZXJTbG90IiwidG9EaXNwbGF5U3RyaW5nIiwiRWxJbnB1dCIsIkNvbW1vblBpY2tlciIsIl9leHBvcnRfc2ZjIiwicGFuZWxUaW1lUGlja2VyUHJvcHMiLCJ1c2VUaW1lUGFuZWwiLCJnZXRBdmFpbGFibGVIb3VycyIsImdldEF2YWlsYWJsZU1pbnV0ZXMiLCJnZXRBdmFpbGFibGVTZWNvbmRzIiwiZ2V0QXZhaWxhYmxlVGltZSIsInJvbGUiLCJmaXJzdCIsImNvbXBhcmVEYXRlIiwiYXZhaWxhYmxlVGltZUdldHRlcnMiLCJ0eXBlIiwiYXZhaWxhYmxlVGltZVNsb3RzIiwidGltZVBpY2tlck9wdGlvbnMiLCJrZXkiLCJtYWtlQXZhaWxhYmxlQXJyIiwiZGlzYWJsZWRMaXN0IiwidHJ1ZU9yTnVtYmVyIiwiaXNEaXNhYmxlZCIsImdldE51bWJlciIsInByZWRpY2F0ZSIsImdldFRpbWVMaXN0cyIsImRpc2FibGVkSG91cnMiLCJkaXNhYmxlZE1pbnV0ZXMiLCJkaXNhYmxlZFNlY29uZHMiLCJjb21wYXJlIiwiaG91ciIsIm1pbnV0ZSIsImJ1aWxkQXZhaWxhYmxlVGltZVNsb3RHZXR0ZXIiLCJnZXRIb3Vyc0xpc3QiLCJnZXRNaW51dGVzTGlzdCIsImdldFNlY29uZHNMaXN0IiwidXNlT2xkVmFsdWUiLCJvbGRWYWx1ZSIsIlJFUEVBVF9JTlRFUlZBTCIsIlJFUEVBVF9ERUxBWSIsInZSZXBlYXRDbGljayIsImVsIiwiYmluZGluZyIsImludGVydmFsIiwiZGVsYXkiLCJpc0Z1bmN0aW9uIiwiaW50ZXJ2YWxJZCIsImRlbGF5SWQiLCJoYW5kbGVyIiwiY2xlYXIiLCJldnQiLCJiYXNpY1RpbWVTcGlubmVyUHJvcHMiLCJucyIsImlzU2Nyb2xsaW5nIiwiY3VycmVudFNjcm9sbGJhciIsImxpc3RIb3Vyc1JlZiIsImxpc3RNaW51dGVzUmVmIiwibGlzdFNlY29uZHNSZWYiLCJsaXN0UmVmc01hcCIsInNwaW5uZXJJdGVtcyIsInRpbWVQYXJ0aWFscyIsInNwaW5uZXJEYXRlIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsInRpbWVMaXN0IiwiYXJyb3dDb250cm9sVGltZUxpc3QiLCJkZWJvdW5jZWRSZXNldFNjcm9sbCIsImRlYm91bmNlIiwiYWRqdXN0Q3VycmVudFNwaW5uZXIiLCJnZXRBbVBtRmxhZyIsImlzQ2FwaXRhbCIsImNvbnRlbnQiLCJlbWl0U2VsZWN0UmFuZ2UiLCJyYW5nZSIsImxlZnQiLCJyaWdodCIsImFkanVzdFNwaW5uZXIiLCJhZGp1c3RTcGlubmVycyIsImdldFNjcm9sbGJhckVsZW1lbnQiLCJzY3JvbGxiYXIiLCJ0eXBlSXRlbUhlaWdodCIsIm9uSW5jcmVtZW50Iiwic2Nyb2xsRG93biIsIm9uRGVjcmVtZW50Iiwic3RlcCIsImxhYmVsIiwibm93IiwibmV4dCIsImZpbmROZXh0VW5EaXNhYmxlZCIsIm1vZGlmeURhdGVGaWVsZCIsImxpc3QiLCJjaGFuZ2VUbyIsImhhbmRsZUNsaWNrIiwiZGlzYWJsZWQiLCJoYW5kbGVTY3JvbGwiLCJzY3JvbGxCYXJIZWlnaHQiLCJiaW5kU2Nyb2xsRXZlbnQiLCJiaW5kRnVuY3Rpb24iLCJvbk1vdW50ZWQiLCJzZXRSZWYiLCJGcmFnbWVudCIsInJlbmRlckxpc3QiLCJFbFNjcm9sbGJhciIsIiRldmVudCIsImNyZWF0ZVRleHRWTm9kZSIsIndpdGhEaXJlY3RpdmVzIiwiY3JlYXRlVk5vZGUiLCJBcnJvd1VwIiwiQXJyb3dEb3duIiwidGltZSIsIlRpbWVTcGlubmVyIiwicGlja2VyQmFzZSIsImFycm93Q29udHJvbCIsImRlZmF1bHRWYWx1ZSIsInNlbGVjdGlvblJhbmdlIiwidHJhbnNpdGlvbk5hbWUiLCJpc1VuZGVmaW5lZCIsInNob3dTZWNvbmRzIiwiYW1QbU1vZGUiLCJfZGF0ZSIsInBhcnNlZERhdGUiLCJnZXRSYW5nZUF2YWlsYWJsZVRpbWUiLCJoYW5kbGVDYW5jZWwiLCJoYW5kbGVDb25maXJtIiwiY2hhbmdlU2VsZWN0aW9uUmFuZ2UiLCJtYXBwaW5nIiwiaGFuZGxlS2V5ZG93biIsInVwIiwiZG93biIsIm9uU2V0T3B0aW9uIiwicGFyc2VVc2VySW5wdXQiLCJmb3JtYXRUb1N0cmluZyIsImdldERlZmF1bHRWYWx1ZSIsIlRyYW5zaXRpb24iLCJUaW1lUGlja1BhbmVsIiwiUk9PVF9QSUNLRVJfSU5KRUNUSU9OX0tFWSIsImRhdGVQaWNrZXJQcm9wcyIsInNlbGVjdGlvbk1vZGVzIiwiZGF0ZVBpY2tlclNoYXJlZFByb3BzIiwicGFuZWxTaGFyZWRQcm9wcyIsInBhbmVsUmFuZ2VTaGFyZWRQcm9wcyIsInNlbGVjdGlvbk1vZGVXaXRoRGVmYXVsdCIsInBhbmVsRGF0ZVBpY2tQcm9wcyIsImJhc2ljRGF0ZVRhYmxlUHJvcHMiLCJpc1ZhbGlkUmFuZ2UiLCJ1bml0IiwidW5saW5rUGFuZWxzIiwiYnVpbGRQaWNrZXJUYWJsZSIsImRpbWVuc2lvbiIsInJvd3MiLCJjb2x1bW5JbmRleE9mZnNldCIsInN0YXJ0RGF0ZSIsIm5leHRFbmREYXRlIiwicmVsYXRpdmVEYXRlR2V0dGVyIiwic2V0Q2VsbE1ldGFkYXRhIiwic2V0Um93TWV0YWRhdGEiLCJyb3dJbmRleCIsInJvdyIsImNvbHVtbkluZGV4IiwiY2VsbCIsIm5leHRTdGFydERhdGUiLCJiYXNpY0NlbGxQcm9wcyIsIkVsRGF0ZVBpY2tlckNlbGwiLCJzbG90cyIsIl9ob2lzdGVkXzMiLCJfaG9pc3RlZF80IiwidGJvZHlSZWYiLCJjdXJyZW50Q2VsbFJlZiIsImxhc3RSb3ciLCJsYXN0Q29sdW1uIiwidGFibGVSb3dzIiwiZm9jdXNXaXRoQ2xpY2siLCJmaXJzdERheU9mV2VlayIsIldFRUtTX0NPTlNUQU5UIiwib2Zmc2V0RGF5Iiwic3RhcnREYXlPZk1vbnRoIiwiV0VFS1MiLCJoYXNDdXJyZW50IiwiZmxhdHRlbiIsImRheXMiLCJzdGFydE9mTW9udGgiLCJzdGFydE9mTW9udGhEYXkiLCJkYXRlQ291bnRPZk1vbnRoIiwiZGF0ZUNvdW50T2ZMYXN0TW9udGgiLCJzZWxlY3RlZERhdGUiLCJzZXREYXRlVGV4dCIsImNvdW50Iiwib2Zmc2V0IiwibnVtYmVyT2ZEYXlzRnJvbVByZXZpb3VzTW9udGgiLCJkaXNhYmxlZERhdGUiLCJjZWxsQ2xhc3NOYW1lIiwiX3NlbGVjdGVkRGF0ZSIsInNob3VsZEluY3JlbWVudCIsImNlbGxEYXRlIiwiaXNDdXJyZW50IiwiaXNBY3RpdmUiLCJpc1dlZWtBY3RpdmUiLCJtaW5EYXRlIiwibWF4RGF0ZSIsInJhbmdlU3RhdGUiLCJzaG93V2Vla051bWJlciIsInJvd3NfIiwiZGF0ZVVuaXQiLCJpZHgiLCJhcmdzIiwiaXNOb3JtYWxEYXkiLCJjZWxsTWF0Y2hlc0RhdGUiLCJnZXRDZWxsQ2xhc3NlcyIsImNsYXNzZXMiLCJnZXREYXRlT2ZDZWxsIiwiY29sdW1uIiwib2Zmc2V0RnJvbVN0YXJ0IiwiaGFuZGxlTW91c2VNb3ZlIiwiaXNTZWxlY3RlZENlbGwiLCJoYW5kbGVGb2N1cyIsImhhbmRsZVBpY2tEYXRlIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlTW91c2VVcCIsImlzS2V5Ym9hcmRNb3ZlbWVudCIsIm5ld0RhdGUiLCJ3ZWVrTnVtYmVyIiwiZGF5T2Zmc2V0Iiwid2VlayIsInJvd0tleSIsImNvbHVtbktleSIsIkRhdGVUYWJsZSIsImJhc2ljTW9udGhUYWJsZVByb3BzIiwiZGF0ZXNJbk1vbnRoIiwieWVhciIsIm1vbnRoIiwibGFuZzIiLCJmaXJzdERheSIsIm51bU9mRGF5cyIsIm1vbnRocyIsInJvd3MyIiwiaiIsImNhbFRpbWUiLCJjYWxFbmREYXRlIiwiZ2V0Q2VsbFN0eWxlIiwic3R5bGUiLCJ0b2RheSIsImhhbmRsZU1vbnRoVGFibGVDbGljayIsImhhc0NsYXNzIiwia2V5XyIsIndpdGhLZXlzIiwiTW9udGhUYWJsZSIsImJhc2ljWWVhclRhYmxlUHJvcHMiLCJkYXRlc0luWWVhciIsInN0YXJ0WWVhciIsImdldENlbGxLbHMiLCJrbHMiLCJoYW5kbGVZZWFyVGFibGVDbGljayIsIl9fIiwiWWVhclRhYmxlIiwiX2hvaXN0ZWRfNSIsImNvbnRleHRFbWl0IiwidGltZVdpdGhpblJhbmdlIiwiX19fIiwicHBOcyIsImRwTnMiLCJhdHRycyIsInVzZUF0dHJzIiwidXNlU2xvdHMiLCJwb3BwZXIiLCJUT09MVElQX0lOSkVDVElPTl9LRVkiLCJzaG9ydGN1dHMiLCJkZWZhdWx0VGltZSIsInRvUmVmIiwiY3VycmVudFZpZXdSZWYiLCJpbm5lckRhdGUiLCJpc0NoYW5nZVRvTm93IiwiZGVmYXVsdFRpbWVEIiwic2VsZWN0YWJsZVJhbmdlIiwidXNlcklucHV0RGF0ZSIsInVzZXJJbnB1dFRpbWUiLCJjaGVja0RhdGVXaXRoaW5SYW5nZSIsImZvcm1hdEVtaXQiLCJlbWl0RGF5anMiLCJ2aXNpYmxlVGltZSIsInNob3dUaW1lIiwiZGF0ZXMiLCJoYW5kbGVEYXRlUGljayIsImtlZXBPcGVuIiwic2VsZWN0aW9uTW9kZSIsIm1vdmVCeU1vbnRoIiwiZm9yd2FyZCIsImFjdGlvbiIsImhhbmRsZVBhbmVsQ2hhbmdlIiwibW92ZUJ5WWVhciIsImN1cnJlbnREYXRlIiwiY3VycmVudFZpZXciLCJ5ZWFyTGFiZWwiLCJ5ZWFyVHJhbnNsYXRpb24iLCJoYW5kbGVTaG9ydGN1dENsaWNrIiwic2hvcnRjdXQiLCJzaG9ydGN1dFZhbHVlIiwia2V5Ym9hcmRNb2RlIiwiaGFzU2hvcnRjdXRzIiwiaGFuZGxlTW9udGhQaWNrIiwibW9udGgyIiwiaGFuZGxlRm9jdXNQaWNrZXIiLCJoYW5kbGVZZWFyUGljayIsInllYXIyIiwic2hvd1BpY2tlciIsImZvb3RlclZpc2libGUiLCJvbkNvbmZpcm0iLCJkZWZhdWx0VGltZUQyIiwiZGVmYXVsdFZhbHVlRCIsImNoYW5nZVRvTm93Iiwibm93RGF0ZSIsInRpbWVGb3JtYXQiLCJkYXRlRm9ybWF0IiwidmlzaWJsZURhdGUiLCJ0aW1lUGlja2VyVmlzaWJsZSIsIm9uVGltZVBpY2tlcklucHV0Rm9jdXMiLCJoYW5kbGVUaW1lUGlja0Nsb3NlIiwiZ2V0VW5pdHMiLCJoYW5kbGVUaW1lUGljayIsInNlY29uZCIsImhhbmRsZVZpc2libGVUaW1lQ2hhbmdlIiwiaGFuZGxlVmlzaWJsZURhdGVDaGFuZ2UiLCJkZWZhdWx0VGltZURWYWx1ZSIsImhhbmRsZUtleUNvbnRyb2wiLCJoYW5kbGVLZXlkb3duVGFibGUiLCJob21lIiwicGFnZVVwIiwicGFnZURvd24iLCJtYXAiLCJDbGlja091dHNpZGUiLCJEQXJyb3dMZWZ0IiwiQXJyb3dMZWZ0IiwidlNob3ciLCJBcnJvd1JpZ2h0IiwiREFycm93UmlnaHQiLCJFbEJ1dHRvbiIsIkRhdGVQaWNrUGFuZWwiLCJwYW5lbERhdGVSYW5nZVByb3BzIiwidXNlU2hvcnRjdXQiLCJnZXRDdXJyZW50SW5zdGFuY2UiLCJzaG9ydGN1dFZhbHVlcyIsInVzZVJhbmdlUGlja2VyIiwibGVmdERhdGUiLCJyaWdodERhdGUiLCJvblBhcnNlZFZhbHVlQ2hhbmdlZCIsInBpY2tlck5zIiwiZHJwTnMiLCJoYW5kbGVDaGFuZ2VSYW5nZSIsImhhbmRsZVJhbmdlQ29uZmlybSIsIl9taW5EYXRlIiwiX21heERhdGUiLCJvblNlbGVjdCIsInNlbGVjdGluZyIsInJlc3RvcmVEZWZhdWx0IiwiY2xlYXJhYmxlIiwiZGF0ZVVzZXJJbnB1dCIsInRpbWVVc2VySW5wdXQiLCJsZWZ0TGFiZWwiLCJyaWdodExhYmVsIiwibGVmdFllYXIiLCJsZWZ0TW9udGgiLCJyaWdodFllYXIiLCJyaWdodE1vbnRoIiwibWluVmlzaWJsZURhdGUiLCJtYXhWaXNpYmxlRGF0ZSIsIm1pblZpc2libGVUaW1lIiwibWF4VmlzaWJsZVRpbWUiLCJsZWZ0UHJldlllYXIiLCJsZWZ0UHJldk1vbnRoIiwicmlnaHROZXh0WWVhciIsInJpZ2h0TmV4dE1vbnRoIiwibGVmdE5leHRZZWFyIiwibGVmdE5leHRNb250aCIsInJpZ2h0UHJldlllYXIiLCJyaWdodFByZXZNb250aCIsImVuYWJsZU1vbnRoQXJyb3ciLCJuZXh0TW9udGgiLCJ5ZWFyT2Zmc2V0IiwiZW5hYmxlWWVhckFycm93IiwiYnRuRGlzYWJsZWQiLCJoYW5kbGVSYW5nZVBpY2siLCJjbG9zZSIsIm1pbl8iLCJtYXhfIiwibWluRGF0ZV8iLCJtYXhEYXRlXyIsIm1pblRpbWVQaWNrZXJWaXNpYmxlIiwibWF4VGltZVBpY2tlclZpc2libGUiLCJoYW5kbGVNaW5UaW1lQ2xvc2UiLCJoYW5kbGVNYXhUaW1lQ2xvc2UiLCJoYW5kbGVEYXRlSW5wdXQiLCJwYXJzZWRWYWx1ZUQiLCJoYW5kbGVEYXRlQ2hhbmdlIiwiaGFuZGxlVGltZUlucHV0IiwiaGFuZGxlVGltZUNoYW5nZSIsImhhbmRsZU1pblRpbWVQaWNrIiwiaGFuZGxlTWF4VGltZVBpY2siLCJoYW5kbGVDbGVhciIsIm1pbkRhdGUyIiwibWF4RGF0ZTIiLCJtaW5EYXRlWWVhciIsIm1pbkRhdGVNb250aCIsIm1heERhdGVZZWFyIiwibWF4RGF0ZU1vbnRoIiwiRGF0ZVJhbmdlUGlja1BhbmVsIiwicGFuZWxNb250aFJhbmdlUHJvcHMiLCJwYW5lbE1vbnRoUmFuZ2VFbWl0cyIsInVzZU1vbnRoUmFuZ2VIZWFkZXIiLCJNb250aFJhbmdlUGlja1BhbmVsIiwiZ2V0UGFuZWwiLCJsb2NhbGVEYXRhIiwiYWR2YW5jZWRGb3JtYXQiLCJjdXN0b21QYXJzZUZvcm1hdCIsIndlZWtPZlllYXIiLCJ3ZWVrWWVhciIsImRheU9mWWVhciIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsIkRhdGVQaWNrZXIiLCJyZWFjdGl2ZSIsImNvbW1vblBpY2tlciIsIm9uTW9kZWxWYWx1ZVVwZGF0ZWQiLCJDb21wb25lbnQiLCJzY29wZWRQcm9wcyIsIl9EYXRlUGlja2VyIiwiYXBwIiwiRWxEYXRlUGlja2VyIiwiY29sdW1uQ29uZmlnIiwiX3RhYmxlRGF0YSIsInNvcnRhYmxlSW5kZXgiLCJ0YWJsZURhdGEyIiwicmVjb3JkIiwidGFibGVEYXRhIiwiY2hpbGRyZW4iLCJsZW4iLCJ5dSIsInhOdW1iZXIiLCJjdSIsImRpYWxvZ1RhYmxlVmlzaWJsZSIsInNoYXJlQm94IiwicGluZyIsImFkZCIsInRvb2xzSGFuZGxlIiwiY29sdW1uQ29uZmlnMyIsInRhYmxlRGF0YTMiLCJwcm9kdWNlIiwia3VXZWkiLCJfa3VXZWkiLCJlZGl0VGV4dCIsImVkaXRhYmxlMyIsImVkaXQiLCJzZXRLdVdlaSIsIl90YWJsZURhdGEzIiwiX3RhYmxlRGF0YTQiLCJ0b1ByaW50IiwiZGlhbG9nVGFibGVWaXNpYmxlMiIsImRpYWxvZ1RhYmxlVmlzaWJsZTMiLCJkaWFsb2dUYWJsZVZpc2libGU0IiwiZGlhbG9nVGFibGVWaXNpYmxlNSJdLCJtYXBwaW5ncyI6IjhuQ0FBQSxNQUFNQSxHQUFnQixDQUNwQixPQUNBLFFBQ0EsT0FDQSxRQUNBLE9BQ0EsV0FDQSxnQkFDQSxZQUNBLFlBQ0YsRUNQTUMsR0FBYUMsR0FDYixDQUFDQSxHQUFPQSxJQUFRLEVBQ1gsR0FDRixNQUFNLFFBQVFBLENBQUcsRUFBSUEsRUFBTSxDQUFDQSxDQUFHLHNDQ052QyxTQUFTQyxFQUFFQyxFQUFFLENBQXNEQyxFQUFlLFFBQUFELEVBQUMsQ0FBa0gsR0FBRUUsR0FBTSxVQUFVLENBQWMsSUFBSUgsRUFBRSxJQUFJQyxFQUFFLElBQUlHLEVBQUUsS0FBS0MsRUFBRSxjQUFjQyxFQUFFLFNBQVNDLEVBQUUsU0FBU0MsRUFBRSxPQUFPQyxFQUFFLE1BQU1DLEVBQUUsT0FBT0MsRUFBRSxRQUFRQyxFQUFFLFVBQVVDLEVBQUUsT0FBT0MsRUFBRSxPQUFPQyxFQUFFLGVBQWUsRUFBRSw2RkFBNkZDLEVBQUUsc0ZBQXNGQyxFQUFFLENBQUMsS0FBSyxLQUFLLFNBQVMsMkRBQTJELE1BQU0sR0FBRyxFQUFFLE9BQU8sd0ZBQXdGLE1BQU0sR0FBRyxFQUFFLFFBQVEsU0FBU2pCLEVBQUUsQ0FBQyxJQUFJQyxFQUFFLENBQUMsS0FBSyxLQUFLLEtBQUssSUFBSSxFQUFFRyxFQUFFSixFQUFFLElBQUksTUFBTSxJQUFJQSxHQUFHQyxHQUFHRyxFQUFF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LEtBQUssU0FBU0EsRUFBRSxDQUFDLEtBQUssYUFBYSxJQUFJLENBQUNBLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQ0csRUFBRSxTQUFTSCxFQUFFLENBQUMsS0FBSyxhQUFhLEdBQUcsQ0FBQ0EsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsU0FBU0EsRUFBRSxDQUFDLEtBQUssYUFBYSxDQUFDQSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUNJLEVBQUVJLEVBQUUsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDSixFQUFFSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQ0osRUFBRUksRUFBRSxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUNKLEVBQUVJLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDSixFQUFFSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQ0osRUFBRUksRUFBRSxPQUFPLENBQUMsRUFBRSxHQUFHLENBQUNKLEVBQUVJLEVBQUUsT0FBTyxDQUFDLEVBQUUsR0FBRyxDQUFDSixFQUFFSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQ0osRUFBRUksRUFBRSxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUNMLEVBQUVLLEVBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDSCxFQUFFLFNBQVNMLEVBQUUsQ0FBQyxJQUFJRCxFQUFFVSxFQUFFLFFBQVFOLEVBQUVILEVBQUUsTUFBTSxLQUFLLEVBQUUsR0FBRyxLQUFLLElBQUlHLEVBQUUsR0FBR0osRUFBRSxRQUFRSyxFQUFFLEVBQUVBLEdBQUcsR0FBR0EsR0FBRyxFQUFFTCxFQUFFSyxDQUFDLEVBQUUsUUFBUSxTQUFTLEVBQUUsSUFBSUosSUFBSSxLQUFLLElBQUlJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQ0EsRUFBRUksRUFBRSxPQUFPLENBQUMsRUFBRSxHQUFHLENBQUNMLEVBQUVLLEVBQUUsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDSCxFQUFFLFNBQVNMLEVBQUUsQ0FBQyxJQUFJRCxFQUFFWSxFQUFF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
