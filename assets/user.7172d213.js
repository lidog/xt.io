import{c3 as Ha,c4 as Ya,c5 as Xa,c6 as Wa,c7 as Fa,c8 as Va,c9 as $a,ca as Ua,cb as ja,a4 as Ga,cc as qa,cd as Ka,bq as Za,ce as Qa,r as je,cf as Ja,a as _t,bf as ti,cg as ei,a$ as ai,ch as ii,W as ri,b4 as oi,af as ni,ci as si,u as j,cj as hi,bD as ci,a2 as St,ck as li,ab as Gt,a7 as Ut,cl as ui,cm as di,aM as pi,F as fi,cn as mi,co as gi,cp as vi,bd as yi,cq as bi,cr as wi,cs as xi,ct as Di,cu as Ei,cv as Ci,K as vt,a0 as ue,a8 as Ge,c as jt,a1 as W,cw as _i,cx as Mi,cy as Ti,bC as Si,cz as Ni,d as Tt,b as T,cA as Oi,Z as rt,cB as Ri,cC as Ai,cD as Bi,cE as Ii,T as ki,cF as Pi,cG as Li,aC as zi,cH as Hi,cI as Yi,J as qe,cJ as Xi,cK as Wi,bm as Fi,cL as Vi,b5 as $i,R as Ui,cM as ji,av as Gi,aN as qi,cN as Ki,cO as Zi,cP as Qi,aw as Ji,cQ as tr,cR as er,cS as ar,ay as ir,ax as rr,o as Nt,c2 as Ke,ae as Ze,c1 as Qe,cT as or,cU as nr,au as sr,a6 as zt,as as hr,at as cr,a9 as de,cV as lr,cW as ur,cX as dr,cY as pr,cZ as fr,c_ as mr,c$ as gr,d0 as vr,d1 as yr,a_ as br,d2 as wr,_ as xr,d3 as Dr,d4 as Er,d5 as Cr,P as _r,aF as Mr,d6 as Tr,d7 as Sr,d8 as Nr,w as S,d9 as Or,a3 as Rr,da as Ar,db as Br,ba as Ir,aX as kr,dc as Pr,dd as Lr,de as zr,df as Hr,dg as Yr,dh as Xr,di as Wr,bn as Fr,dj as Vr,dk as $r,a5 as Ur,dl as jr,dm as Gr,dn as qr,dp as Kr,aI as Zr,bP as Qr,b7 as Jr,ac as pe,ad as Mt,$ as fe,aa as me,ag as ge,aZ as Lt,H as $e,V as to,dq as eo,E as ao,dr as io,be as ro}from"./index.7686b233.js";import{E as oo}from"./el-dialog.c447bf76.js";import"./el-overlay.4b219c16.js";import{a as no,E as so,b as ho}from"./el-form-item.0c24aa3f.js";import{g as co,c as lo}from"./_commonjsHelpers.c10bf6cb.js";import"./event.ca859456.js";const uo=()=>{},po=Object.freeze(Object.defineProperty({__proto__:null,compile:uo,EffectScope:Ha,ReactiveEffect:Ya,customRef:Xa,effect:Wa,effectScope:Fa,getCurrentScope:Va,isProxy:$a,isReactive:Ua,isReadonly:ja,isRef:Ga,isShallow:qa,markRaw:Ka,onScopeDispose:Za,proxyRefs:Qa,reactive:je,readonly:Ja,ref:_t,shallowReactive:ti,shallowReadonly:ei,shallowRef:ai,stop:ii,toRaw:ri,toRef:oi,toRefs:ni,triggerRef:si,unref:j,camelize:hi,capitalize:ci,normalizeClass:St,normalizeProps:li,normalizeStyle:Gt,toDisplayString:Ut,toHandlerKey:ui,BaseTransition:di,Comment:pi,Fragment:fi,KeepAlive:mi,Static:gi,Suspense:vi,Teleport:yi,Text:bi,assertNumber:wi,callWithAsyncErrorHandling:xi,callWithErrorHandling:Di,cloneVNode:Ei,compatUtils:Ci,computed:vt,createBlock:ue,createCommentVNode:Ge,createElementBlock:jt,createElementVNode:W,createHydrationRenderer:_i,createPropsRestProxy:Mi,createRenderer:Ti,createSlots:Si,createStaticVNode:Ni,createTextVNode:Tt,createVNode:T,defineAsyncComponent:Oi,defineComponent:rt,defineEmits:Ri,defineExpose:Ai,defineProps:Bi,get devtools(){return Ii},getCurrentInstance:ki,getTransitionRawChildren:Pi,guardReactiveProps:Li,h:zi,handleError:Hi,initCustomFormatter:Yi,inject:qe,isMemoSame:Xi,isRuntimeOnly:Wi,isVNode:Fi,mergeDefaults:Vi,mergeProps:$i,nextTick:Ui,onActivated:ji,onBeforeMount:Gi,onBeforeUnmount:qi,onBeforeUpdate:Ki,onDeactivated:Zi,onErrorCaptured:Qi,onMounted:Ji,onRenderTracked:tr,onRenderTriggered:er,onServerPrefetch:ar,onUnmounted:ir,onUpdated:rr,openBlock:Nt,popScopeId:Ke,provide:Ze,pushScopeId:Qe,queuePostFlushCb:or,registerRuntimeCompiler:nr,renderList:sr,renderSlot:zt,resolveComponent:hr,resolveDirective:cr,resolveDynamicComponent:de,resolveFilter:lr,resolveTransitionHooks:ur,setBlockTracking:dr,setDevtoolsHook:pr,setTransitionHooks:fr,ssrContextKey:mr,ssrUtils:gr,toHandlers:vr,transformVNodeArgs:yr,useAttrs:br,useSSRContext:wr,useSlots:xr,useTransitionState:Dr,version:Er,warn:Cr,watch:_r,watchEffect:Mr,watchPostEffect:Tr,watchSyncEffect:Sr,withAsyncContext:Nr,withCtx:S,withDefaults:Or,withDirectives:Rr,withMemo:Ar,withScopeId:Br,Transition:Ir,TransitionGroup:kr,VueElement:Pr,createApp:Lr,createSSRApp:zr,defineCustomElement:Hr,defineSSRCustomElement:Yr,hydrate:Xr,initDirectivesForSSR:Wr,render:Fr,useCssModule:Vr,useCssVars:$r,vModelCheckbox:Ur,vModelDynamic:jr,vModelRadio:Gr,vModelSelect:qr,vModelText:Kr,vShow:Zr,withKeys:Qr,withModifiers:Jr},Symbol.toStringTag,{value:"Module"})),fo=pe({header:{type:String,default:""},bodyStyle:{type:Mt([String,Object,Array]),default:""},shadow:{type:String,values:["always","hover","never"],default:"always"}}),mo=rt({name:"ElCard"}),go=rt({...mo,props:fo,setup(m){const f=fe("card");return(g,C)=>(Nt(),jt("div",{class:St([j(f).b(),j(f).is(`${g.shadow}-shadow`)])},[g.$slots.header||g.header?(Nt(),jt("div",{key:0,class:St(j(f).e("header"))},[zt(g.$slots,"header",{},()=>[Tt(Ut(g.header),1)])],2)):Ge("v-if",!0),W("div",{class:St(j(f).e("body")),style:Gt(g.bodyStyle)},[zt(g.$slots,"default")],6)],2))}});var vo=me(go,[["__file","/home/runner/work/element-plus/element-plus/packages/components/card/src/card.vue"]]);const yo=ge(vo),Je=Symbol("rowContextKey"),bo=["start","center","end","space-around","space-between","space-evenly"],wo=["top","middle","bottom"],xo=pe({tag:{type:String,default:"div"},gutter:{type:Number,default:0},justify:{type:String,values:bo,default:"start"},align:{type:String,values:wo,default:"top"}}),Do=rt({name:"ElRow"}),Eo=rt({...Do,props:xo,setup(m){const f=m,g=fe("row"),C=vt(()=>f.gutter);Ze(Je,{gutter:C});const L=vt(()=>{const E={};return f.gutter&&(E.marginRight=E.marginLeft=`-${f.gutter/2}px`),E}),Q=vt(()=>[g.b(),g.is(`justify-${f.justify}`,f.justify!=="start"),g.is(`align-${f.align}`,f.align!=="top")]);return(E,q)=>(Nt(),ue(de(E.tag),{class:St(j(Q)),style:Gt(j(L))},{default:S(()=>[zt(E.$slots,"default")]),_:3},8,["class","style"]))}});var Co=me(Eo,[["__file","/home/runner/work/element-plus/element-plus/packages/components/row/src/row.vue"]]);const _o=ge(Co),Mo=pe({tag:{type:String,default:"div"},span:{type:Number,default:24},offset:{type:Number,default:0},pull:{type:Number,default:0},push:{type:Number,default:0},xs:{type:Mt([Number,Object]),default:()=>Lt({})},sm:{type:Mt([Number,Object]),default:()=>Lt({})},md:{type:Mt([Number,Object]),default:()=>Lt({})},lg:{type:Mt([Number,Object]),default:()=>Lt({})},xl:{type:Mt([Number,Object]),default:()=>Lt({})}}),To=rt({name:"ElCol"}),So=rt({...To,props:Mo,setup(m){const f=m,{gutter:g}=qe(Je,{gutter:vt(()=>0)}),C=fe("col"),L=vt(()=>{const E={};return g.value&&(E.paddingLeft=E.paddingRight=`${g.value/2}px`),E}),Q=vt(()=>{const E=[];return["span","offset","pull","push"].forEach(B=>{const J=f[B];$e(J)&&(B==="span"?E.push(C.b(`${f[B]}`)):J>0&&E.push(C.b(`${B}-${f[B]}`)))}),["xs","sm","md","lg","xl"].forEach(B=>{$e(f[B])?E.push(C.b(`${B}-${f[B]}`)):to(f[B])&&Object.entries(f[B]).forEach(([J,ot])=>{E.push(J!=="span"?C.b(`${B}-${J}-${ot}`):C.b(`${B}-${ot}`))})}),g.value&&E.push(C.is("guttered")),[C.b(),E]});return(E,q)=>(Nt(),ue(de(E.tag),{class:St(j(Q)),style:Gt(j(L))},{default:S(()=>[zt(E.$slots,"default")]),_:3},8,["class","style"]))}});var No=me(So,[["__file","/home/runner/work/element-plus/element-plus/packages/components/col/src/col.vue"]]);const Oo=ge(No);var ta={};const Ro=co(po);var ea={exports:{}};/*!
 * Cropper.js v1.5.13
 * https://fengyuanchen.github.io/cropperjs
 *
 * Copyright 2015-present Chen Fengyuan
 * Released under the MIT license
 *
 * Date: 2022-11-20T05:30:46.114Z
 */(function(m,f){(function(g,C){m.exports=C()})(lo,function(){function g(i,t){var a=Object.keys(i);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(i);t&&(e=e.filter(function(n){return Object.getOwnPropertyDescriptor(i,n).enumerable})),a.push.apply(a,e)}return a}function C(i){for(var t=1;t<arguments.length;t++){var a=arguments[t]!=null?arguments[t]:{};t%2?g(Object(a),!0).forEach(function(e){lt(i,e,a[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(a)):g(Object(a)).forEach(function(e){Object.defineProperty(i,e,Object.getOwnPropertyDescriptor(a,e))})}return i}function L(i){return L=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},L(i)}function Q(i,t){if(!(i instanceof t))throw new TypeError("Cannot call a class as a function")}function E(i,t){for(var a=0;a<t.length;a++){var e=t[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(i,e.key,e)}}function q(i,t,a){return t&&E(i.prototype,t),a&&E(i,a),Object.defineProperty(i,"prototype",{writable:!1}),i}function lt(i,t,a){return t in i?Object.defineProperty(i,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):i[t]=a,i}function B(i){return J(i)||ot(i)||Kt(i)||F()}function J(i){if(Array.isArray(i))return yt(i)}function ot(i){if(typeof Symbol<"u"&&i[Symbol.iterator]!=null||i["@@iterator"]!=null)return Array.from(i)}function Kt(i,t){if(!!i){if(typeof i=="string")return yt(i,t);var a=Object.prototype.toString.call(i).slice(8,-1);if(a==="Object"&&i.constructor&&(a=i.constructor.name),a==="Map"||a==="Set")return Array.from(i);if(a==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a))return yt(i,t)}}function yt(i,t){(t==null||t>i.length)&&(t=i.length);for(var a=0,e=new Array(t);a<t;a++)e[a]=i[a];return e}function F(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var tt=typeof window<"u"&&typeof window.document<"u",P=tt?window:{},bt=tt&&P.document.documentElement?"ontouchstart"in P.document.documentElement:!1,et=tt?"PointerEvent"in P:!1,D="cropper",ut="all",Ht="crop",Yt="move",Xt="zoom",z="e",dt="w",wt="s",nt="n",Ot="ne",Rt="nw",At="se",Bt="sw",Zt="".concat(D,"-crop"),ve="".concat(D,"-disabled"),H="".concat(D,"-hidden"),ye="".concat(D,"-hide"),aa="".concat(D,"-invisible"),Wt="".concat(D,"-modal"),Qt="".concat(D,"-move"),It="".concat(D,"Action"),Ft="".concat(D,"Preview"),Jt="crop",be="move",we="none",te="crop",ee="cropend",ae="cropmove",ie="cropstart",xe="dblclick",ia=bt?"touchstart":"mousedown",ra=bt?"touchmove":"mousemove",oa=bt?"touchend touchcancel":"mouseup",De=et?"pointerdown":ia,Ee=et?"pointermove":ra,Ce=et?"pointerup pointercancel":oa,_e="ready",Me="resize",Te="wheel",re="zoom",Se="image/jpeg",na=/^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/,sa=/^data:/,ha=/^data:image\/jpeg;base64,/,ca=/^img|canvas$/i,Ne=200,Oe=100,Re={viewMode:0,dragMode:Jt,initialAspectRatio:NaN,aspectRatio:NaN,data:null,preview:"",responsive:!0,restore:!0,checkCrossOrigin:!0,checkOrientation:!0,modal:!0,guides:!0,center:!0,highlight:!0,background:!0,autoCrop:!0,autoCropArea:.8,movable:!0,rotatable:!0,scalable:!0,zoomable:!0,zoomOnTouch:!0,zoomOnWheel:!0,wheelZoomRatio:.1,cropBoxMovable:!0,cropBoxResizable:!0,toggleDragModeOnDblclick:!0,minCanvasWidth:0,minCanvasHeight:0,minCropBoxWidth:0,minCropBoxHeight:0,minContainerWidth:Ne,minContainerHeight:Oe,ready:null,cropstart:null,cropmove:null,cropend:null,crop:null,zoom:null},la='<div class="cropper-container" touch-action="none"><div class="cropper-wrap-box"><div class="cropper-canvas"></div></div><div class="cropper-drag-box"></div><div class="cropper-crop-box"><span class="cropper-view-box"></span><span class="cropper-dashed dashed-h"></span><span class="cropper-dashed dashed-v"></span><span class="cropper-center"></span><span class="cropper-face"></span><span class="cropper-line line-e" data-cropper-action="e"></span><span class="cropper-line line-n" data-cropper-action="n"></span><span class="cropper-line line-w" data-cropper-action="w"></span><span class="cropper-line line-s" data-cropper-action="s"></span><span class="cropper-point point-e" data-cropper-action="e"></span><span class="cropper-point point-n" data-cropper-action="n"></span><span class="cropper-point point-w" data-cropper-action="w"></span><span class="cropper-point point-s" data-cropper-action="s"></span><span class="cropper-point point-ne" data-cropper-action="ne"></span><span class="cropper-point point-nw" data-cropper-action="nw"></span><span class="cropper-point point-sw" data-cropper-action="sw"></span><span class="cropper-point point-se" data-cropper-action="se"></span></div></div>',ua=Number.isNaN||P.isNaN;function v(i){return typeof i=="number"&&!ua(i)}var Ae=function(t){return t>0&&t<1/0};function oe(i){return typeof i>"u"}function pt(i){return L(i)==="object"&&i!==null}var da=Object.prototype.hasOwnProperty;function xt(i){if(!pt(i))return!1;try{var t=i.constructor,a=t.prototype;return t&&a&&da.call(a,"isPrototypeOf")}catch{return!1}}function Y(i){return typeof i=="function"}var pa=Array.prototype.slice;function Be(i){return Array.from?Array.from(i):pa.call(i)}function N(i,t){return i&&Y(t)&&(Array.isArray(i)||v(i.length)?Be(i).forEach(function(a,e){t.call(i,a,e,i)}):pt(i)&&Object.keys(i).forEach(function(a){t.call(i,i[a],a,i)})),i}var _=Object.assign||function(t){for(var a=arguments.length,e=new Array(a>1?a-1:0),n=1;n<a;n++)e[n-1]=arguments[n];return pt(t)&&e.length>0&&e.forEach(function(r){pt(r)&&Object.keys(r).forEach(function(o){t[o]=r[o]})}),t},fa=/\.\d*(?:0|9){12}\d*$/;function Dt(i){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1e11;return fa.test(i)?Math.round(i*t)/t:i}var ma=/^width|height|left|top|marginLeft|marginTop$/;function st(i,t){var a=i.style;N(t,function(e,n){ma.test(n)&&v(e)&&(e="".concat(e,"px")),a[n]=e})}function ga(i,t){return i.classList?i.classList.contains(t):i.className.indexOf(t)>-1}function I(i,t){if(!!t){if(v(i.length)){N(i,function(e){I(e,t)});return}if(i.classList){i.classList.add(t);return}var a=i.className.trim();a?a.indexOf(t)<0&&(i.className="".concat(a," ").concat(t)):i.className=t}}function K(i,t){if(!!t){if(v(i.length)){N(i,function(a){K(a,t)});return}if(i.classList){i.classList.remove(t);return}i.className.indexOf(t)>=0&&(i.className=i.className.replace(t,""))}}function Et(i,t,a){if(!!t){if(v(i.length)){N(i,function(e){Et(e,t,a)});return}a?I(i,t):K(i,t)}}var va=/([a-z\d])([A-Z])/g;function ne(i){return i.replace(va,"$1-$2").toLowerCase()}function se(i,t){return pt(i[t])?i[t]:i.dataset?i.dataset[t]:i.getAttribute("data-".concat(ne(t)))}function kt(i,t,a){pt(a)?i[t]=a:i.dataset?i.dataset[t]=a:i.setAttribute("data-".concat(ne(t)),a)}function ya(i,t){if(pt(i[t]))try{delete i[t]}catch{i[t]=void 0}else if(i.dataset)try{delete i.dataset[t]}catch{i.dataset[t]=void 0}else i.removeAttribute("data-".concat(ne(t)))}var Ie=/\s\s*/,ke=function(){var i=!1;if(tt){var t=!1,a=function(){},e=Object.defineProperty({},"once",{get:function(){return i=!0,t},set:function(r){t=r}});P.addEventListener("test",a,e),P.removeEventListener("test",a,e)}return i}();function G(i,t,a){var e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=a;t.trim().split(Ie).forEach(function(r){if(!ke){var o=i.listeners;o&&o[r]&&o[r][a]&&(n=o[r][a],delete o[r][a],Object.keys(o[r]).length===0&&delete o[r],Object.keys(o).length===0&&delete i.listeners)}i.removeEventListener(r,n,e)})}function $(i,t,a){var e=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=a;t.trim().split(Ie).forEach(function(r){if(e.once&&!ke){var o=i.listeners,s=o===void 0?{}:o;n=function(){delete s[r][a],i.removeEventListener(r,n,e);for(var l=arguments.length,h=new Array(l),c=0;c<l;c++)h[c]=arguments[c];a.apply(i,h)},s[r]||(s[r]={}),s[r][a]&&i.removeEventListener(r,s[r][a],e),s[r][a]=n,i.listeners=s}i.addEventListener(r,n,e)})}function Ct(i,t,a){var e;return Y(Event)&&Y(CustomEvent)?e=new CustomEvent(t,{detail:a,bubbles:!0,cancelable:!0}):(e=document.createEvent("CustomEvent"),e.initCustomEvent(t,!0,!0,a)),i.dispatchEvent(e)}function Pe(i){var t=i.getBoundingClientRect();return{left:t.left+(window.pageXOffset-document.documentElement.clientLeft),top:t.top+(window.pageYOffset-document.documentElement.clientTop)}}var he=P.location,ba=/^(\w+:)\/\/([^:/?#]*):?(\d*)/i;function Le(i){var t=i.match(ba);return t!==null&&(t[1]!==he.protocol||t[2]!==he.hostname||t[3]!==he.port)}function ze(i){var t="timestamp=".concat(new Date().getTime());return i+(i.indexOf("?")===-1?"?":"&")+t}function Pt(i){var t=i.rotate,a=i.scaleX,e=i.scaleY,n=i.translateX,r=i.translateY,o=[];v(n)&&n!==0&&o.push("translateX(".concat(n,"px)")),v(r)&&r!==0&&o.push("translateY(".concat(r,"px)")),v(t)&&t!==0&&o.push("rotate(".concat(t,"deg)")),v(a)&&a!==1&&o.push("scaleX(".concat(a,")")),v(e)&&e!==1&&o.push("scaleY(".concat(e,")"));var s=o.length?o.join(" "):"none";return{WebkitTransform:s,msTransform:s,transform:s}}function wa(i){var t=C({},i),a=0;return N(i,function(e,n){delete t[n],N(t,function(r){var o=Math.abs(e.startX-r.startX),s=Math.abs(e.startY-r.startY),d=Math.abs(e.endX-r.endX),l=Math.abs(e.endY-r.endY),h=Math.sqrt(o*o+s*s),c=Math.sqrt(d*d+l*l),u=(c-h)/h;Math.abs(u)>Math.abs(a)&&(a=u)})}),a}function Vt(i,t){var a=i.pageX,e=i.pageY,n={endX:a,endY:e};return t?n:C({startX:a,startY:e},n)}function xa(i){var t=0,a=0,e=0;return N(i,function(n){var r=n.startX,o=n.startY;t+=r,a+=o,e+=1}),t/=e,a/=e,{pageX:t,pageY:a}}function ht(i){var t=i.aspectRatio,a=i.height,e=i.width,n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"contain",r=Ae(e),o=Ae(a);if(r&&o){var s=a*t;n==="contain"&&s>e||n==="cover"&&s<e?a=e/t:e=a*t}else r?a=e/t:o&&(e=a*t);return{width:e,height:a}}function Da(i){var t=i.width,a=i.height,e=i.degree;if(e=Math.abs(e)%180,e===90)return{width:a,height:t};var n=e%90*Math.PI/180,r=Math.sin(n),o=Math.cos(n),s=t*o+a*r,d=t*r+a*o;return e>90?{width:d,height:s}:{width:s,height:d}}function Ea(i,t,a,e){var n=t.aspectRatio,r=t.naturalWidth,o=t.naturalHeight,s=t.rotate,d=s===void 0?0:s,l=t.scaleX,h=l===void 0?1:l,c=t.scaleY,u=c===void 0?1:c,b=a.aspectRatio,y=a.naturalWidth,M=a.naturalHeight,w=e.fillColor,R=w===void 0?"transparent":w,k=e.imageSmoothingEnabled,O=k===void 0?!0:k,at=e.imageSmoothingQuality,V=at===void 0?"low":at,p=e.maxWidth,x=p===void 0?1/0:p,A=e.maxHeight,U=A===void 0?1/0:A,it=e.minWidth,ft=it===void 0?0:it,mt=e.minHeight,ct=mt===void 0?0:mt,Z=document.createElement("canvas"),X=Z.getContext("2d"),gt=ht({aspectRatio:b,width:x,height:U}),$t=ht({aspectRatio:b,width:ft,height:ct},"cover"),ce=Math.min(gt.width,Math.max($t.width,y)),le=Math.min(gt.height,Math.max($t.height,M)),Xe=ht({aspectRatio:n,width:x,height:U}),We=ht({aspectRatio:n,width:ft,height:ct},"cover"),Fe=Math.min(Xe.width,Math.max(We.width,r)),Ve=Math.min(Xe.height,Math.max(We.height,o)),La=[-Fe/2,-Ve/2,Fe,Ve];return Z.width=Dt(ce),Z.height=Dt(le),X.fillStyle=R,X.fillRect(0,0,ce,le),X.save(),X.translate(ce/2,le/2),X.rotate(d*Math.PI/180),X.scale(h,u),X.imageSmoothingEnabled=O,X.imageSmoothingQuality=V,X.drawImage.apply(X,[i].concat(B(La.map(function(za){return Math.floor(Dt(za))})))),X.restore(),Z}var He=String.fromCharCode;function Ca(i,t,a){var e="";a+=t;for(var n=t;n<a;n+=1)e+=He(i.getUint8(n));return e}var _a=/^data:.*,/;function Ma(i){var t=i.replace(_a,""),a=atob(t),e=new ArrayBuffer(a.length),n=new Uint8Array(e);return N(n,function(r,o){n[o]=a.charCodeAt(o)}),e}function Ta(i,t){for(var a=[],e=8192,n=new Uint8Array(i);n.length>0;)a.push(He.apply(null,Be(n.subarray(0,e)))),n=n.subarray(e);return"data:".concat(t,";base64,").concat(btoa(a.join("")))}function Sa(i){var t=new DataView(i),a;try{var e,n,r;if(t.getUint8(0)===255&&t.getUint8(1)===216)for(var o=t.byteLength,s=2;s+1<o;){if(t.getUint8(s)===255&&t.getUint8(s+1)===225){n=s;break}s+=1}if(n){var d=n+4,l=n+10;if(Ca(t,d,4)==="Exif"){var h=t.getUint16(l);if(e=h===18761,(e||h===19789)&&t.getUint16(l+2,e)===42){var c=t.getUint32(l+4,e);c>=8&&(r=l+c)}}}if(r){var u=t.getUint16(r,e),b,y;for(y=0;y<u;y+=1)if(b=r+y*12+2,t.getUint16(b,e)===274){b+=8,a=t.getUint16(b,e),t.setUint16(b,1,e);break}}}catch{a=1}return a}function Na(i){var t=0,a=1,e=1;switch(i){case 2:a=-1;break;case 3:t=-180;break;case 4:e=-1;break;case 5:t=90,e=-1;break;case 6:t=90;break;case 7:t=90,a=-1;break;case 8:t=-90;break}return{rotate:t,scaleX:a,scaleY:e}}var Oa={render:function(){this.initContainer(),this.initCanvas(),this.initCropBox(),this.renderCanvas(),this.cropped&&this.renderCropBox()},initContainer:function(){var t=this.element,a=this.options,e=this.container,n=this.cropper,r=Number(a.minContainerWidth),o=Number(a.minContainerHeight);I(n,H),K(t,H);var s={width:Math.max(e.offsetWidth,r>=0?r:Ne),height:Math.max(e.offsetHeight,o>=0?o:Oe)};this.containerData=s,st(n,{width:s.width,height:s.height}),I(t,H),K(n,H)},initCanvas:function(){var t=this.containerData,a=this.imageData,e=this.options.viewMode,n=Math.abs(a.rotate)%180===90,r=n?a.naturalHeight:a.naturalWidth,o=n?a.naturalWidth:a.naturalHeight,s=r/o,d=t.width,l=t.height;t.height*s>t.width?e===3?d=t.height*s:l=t.width/s:e===3?l=t.width/s:d=t.height*s;var h={aspectRatio:s,naturalWidth:r,naturalHeight:o,width:d,height:l};this.canvasData=h,this.limited=e===1||e===2,this.limitCanvas(!0,!0),h.width=Math.min(Math.max(h.width,h.minWidth),h.maxWidth),h.height=Math.min(Math.max(h.height,h.minHeight),h.maxHeight),h.left=(t.width-h.width)/2,h.top=(t.height-h.height)/2,h.oldLeft=h.left,h.oldTop=h.top,this.initialCanvasData=_({},h)},limitCanvas:function(t,a){var e=this.options,n=this.containerData,r=this.canvasData,o=this.cropBoxData,s=e.viewMode,d=r.aspectRatio,l=this.cropped&&o;if(t){var h=Number(e.minCanvasWidth)||0,c=Number(e.minCanvasHeight)||0;s>1?(h=Math.max(h,n.width),c=Math.max(c,n.height),s===3&&(c*d>h?h=c*d:c=h/d)):s>0&&(h?h=Math.max(h,l?o.width:0):c?c=Math.max(c,l?o.height:0):l&&(h=o.width,c=o.height,c*d>h?h=c*d:c=h/d));var u=ht({aspectRatio:d,width:h,height:c});h=u.width,c=u.height,r.minWidth=h,r.minHeight=c,r.maxWidth=1/0,r.maxHeight=1/0}if(a)if(s>(l?0:1)){var b=n.width-r.width,y=n.height-r.height;r.minLeft=Math.min(0,b),r.minTop=Math.min(0,y),r.maxLeft=Math.max(0,b),r.maxTop=Math.max(0,y),l&&this.limited&&(r.minLeft=Math.min(o.left,o.left+(o.width-r.width)),r.minTop=Math.min(o.top,o.top+(o.height-r.height)),r.maxLeft=o.left,r.maxTop=o.top,s===2&&(r.width>=n.width&&(r.minLeft=Math.min(0,b),r.maxLeft=Math.max(0,b)),r.height>=n.height&&(r.minTop=Math.min(0,y),r.maxTop=Math.max(0,y))))}else r.minLeft=-r.width,r.minTop=-r.height,r.maxLeft=n.width,r.maxTop=n.height},renderCanvas:function(t,a){var e=this.canvasData,n=this.imageData;if(a){var r=Da({width:n.naturalWidth*Math.abs(n.scaleX||1),height:n.naturalHeight*Math.abs(n.scaleY||1),degree:n.rotate||0}),o=r.width,s=r.height,d=e.width*(o/e.naturalWidth),l=e.height*(s/e.naturalHeight);e.left-=(d-e.width)/2,e.top-=(l-e.height)/2,e.width=d,e.height=l,e.aspectRatio=o/s,e.naturalWidth=o,e.naturalHeight=s,this.limitCanvas(!0,!1)}(e.width>e.maxWidth||e.width<e.minWidth)&&(e.left=e.oldLeft),(e.height>e.maxHeight||e.height<e.minHeight)&&(e.top=e.oldTop),e.width=Math.min(Math.max(e.width,e.minWidth),e.maxWidth),e.height=Math.min(Math.max(e.height,e.minHeight),e.maxHeight),this.limitCanvas(!1,!0),e.left=Math.min(Math.max(e.left,e.minLeft),e.maxLeft),e.top=Math.min(Math.max(e.top,e.minTop),e.maxTop),e.oldLeft=e.left,e.oldTop=e.top,st(this.canvas,_({width:e.width,height:e.height},Pt({translateX:e.left,translateY:e.top}))),this.renderImage(t),this.cropped&&this.limited&&this.limitCropBox(!0,!0)},renderImage:function(t){var a=this.canvasData,e=this.imageData,n=e.naturalWidth*(a.width/a.naturalWidth),r=e.naturalHeight*(a.height/a.naturalHeight);_(e,{width:n,height:r,left:(a.width-n)/2,top:(a.height-r)/2}),st(this.image,_({width:e.width,height:e.height},Pt(_({translateX:e.left,translateY:e.top},e)))),t&&this.output()},initCropBox:function(){var t=this.options,a=this.canvasData,e=t.aspectRatio||t.initialAspectRatio,n=Number(t.autoCropArea)||.8,r={width:a.width,height:a.height};e&&(a.height*e>a.width?r.height=r.width/e:r.width=r.height*e),this.cropBoxData=r,this.limitCropBox(!0,!0),r.width=Math.min(Math.max(r.width,r.minWidth),r.maxWidth),r.height=Math.min(Math.max(r.height,r.minHeight),r.maxHeight),r.width=Math.max(r.minWidth,r.width*n),r.height=Math.max(r.minHeight,r.height*n),r.left=a.left+(a.width-r.width)/2,r.top=a.top+(a.height-r.height)/2,r.oldLeft=r.left,r.oldTop=r.top,this.initialCropBoxData=_({},r)},limitCropBox:function(t,a){var e=this.options,n=this.containerData,r=this.canvasData,o=this.cropBoxData,s=this.limited,d=e.aspectRatio;if(t){var l=Number(e.minCropBoxWidth)||0,h=Number(e.minCropBoxHeight)||0,c=s?Math.min(n.width,r.width,r.width+r.left,n.width-r.left):n.width,u=s?Math.min(n.height,r.height,r.height+r.top,n.height-r.top):n.height;l=Math.min(l,n.width),h=Math.min(h,n.height),d&&(l&&h?h*d>l?h=l/d:l=h*d:l?h=l/d:h&&(l=h*d),u*d>c?u=c/d:c=u*d),o.minWidth=Math.min(l,c),o.minHeight=Math.min(h,u),o.maxWidth=c,o.maxHeight=u}a&&(s?(o.minLeft=Math.max(0,r.left),o.minTop=Math.max(0,r.top),o.maxLeft=Math.min(n.width,r.left+r.width)-o.width,o.maxTop=Math.min(n.height,r.top+r.height)-o.height):(o.minLeft=0,o.minTop=0,o.maxLeft=n.width-o.width,o.maxTop=n.height-o.height))},renderCropBox:function(){var t=this.options,a=this.containerData,e=this.cropBoxData;(e.width>e.maxWidth||e.width<e.minWidth)&&(e.left=e.oldLeft),(e.height>e.maxHeight||e.height<e.minHeight)&&(e.top=e.oldTop),e.width=Math.min(Math.max(e.width,e.minWidth),e.maxWidth),e.height=Math.min(Math.max(e.height,e.minHeight),e.maxHeight),this.limitCropBox(!1,!0),e.left=Math.min(Math.max(e.left,e.minLeft),e.maxLeft),e.top=Math.min(Math.max(e.top,e.minTop),e.maxTop),e.oldLeft=e.left,e.oldTop=e.top,t.movable&&t.cropBoxMovable&&kt(this.face,It,e.width>=a.width&&e.height>=a.height?Yt:ut),st(this.cropBox,_({width:e.width,height:e.height},Pt({translateX:e.left,translateY:e.top}))),this.cropped&&this.limited&&this.limitCanvas(!0,!0),this.disabled||this.output()},output:function(){this.preview(),Ct(this.element,te,this.getData())}},Ra={initPreview:function(){var t=this.element,a=this.crossOrigin,e=this.options.preview,n=a?this.crossOriginUrl:this.url,r=t.alt||"The image to preview",o=document.createElement("img");if(a&&(o.crossOrigin=a),o.src=n,o.alt=r,this.viewBox.appendChild(o),this.viewBoxImage=o,!!e){var s=e;typeof e=="string"?s=t.ownerDocument.querySelectorAll(e):e.querySelector&&(s=[e]),this.previews=s,N(s,function(d){var l=document.createElement("img");kt(d,Ft,{width:d.offsetWidth,height:d.offsetHeight,html:d.innerHTML}),a&&(l.crossOrigin=a),l.src=n,l.alt=r,l.style.cssText='display:block;width:100%;height:auto;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation:0deg!important;"',d.innerHTML="",d.appendChild(l)})}},resetPreview:function(){N(this.previews,function(t){var a=se(t,Ft);st(t,{width:a.width,height:a.height}),t.innerHTML=a.html,ya(t,Ft)})},preview:function(){var t=this.imageData,a=this.canvasData,e=this.cropBoxData,n=e.width,r=e.height,o=t.width,s=t.height,d=e.left-a.left-t.left,l=e.top-a.top-t.top;!this.cropped||this.disabled||(st(this.viewBoxImage,_({width:o,height:s},Pt(_({translateX:-d,translateY:-l},t)))),N(this.previews,function(h){var c=se(h,Ft),u=c.width,b=c.height,y=u,M=b,w=1;n&&(w=u/n,M=r*w),r&&M>b&&(w=b/r,y=n*w,M=b),st(h,{width:y,height:M}),st(h.getElementsByTagName("img")[0],_({width:o*w,height:s*w},Pt(_({translateX:-d*w,translateY:-l*w},t))))}))}},Aa={bind:function(){var t=this.element,a=this.options,e=this.cropper;Y(a.cropstart)&&$(t,ie,a.cropstart),Y(a.cropmove)&&$(t,ae,a.cropmove),Y(a.cropend)&&$(t,ee,a.cropend),Y(a.crop)&&$(t,te,a.crop),Y(a.zoom)&&$(t,re,a.zoom),$(e,De,this.onCropStart=this.cropStart.bind(this)),a.zoomable&&a.zoomOnWheel&&$(e,Te,this.onWheel=this.wheel.bind(this),{passive:!1,capture:!0}),a.toggleDragModeOnDblclick&&$(e,xe,this.onDblclick=this.dblclick.bind(this)),$(t.ownerDocument,Ee,this.onCropMove=this.cropMove.bind(this)),$(t.ownerDocument,Ce,this.onCropEnd=this.cropEnd.bind(this)),a.responsive&&$(window,Me,this.onResize=this.resize.bind(this))},unbind:function(){var t=this.element,a=this.options,e=this.cropper;Y(a.cropstart)&&G(t,ie,a.cropstart),Y(a.cropmove)&&G(t,ae,a.cropmove),Y(a.cropend)&&G(t,ee,a.cropend),Y(a.crop)&&G(t,te,a.crop),Y(a.zoom)&&G(t,re,a.zoom),G(e,De,this.onCropStart),a.zoomable&&a.zoomOnWheel&&G(e,Te,this.onWheel,{passive:!1,capture:!0}),a.toggleDragModeOnDblclick&&G(e,xe,this.onDblclick),G(t.ownerDocument,Ee,this.onCropMove),G(t.ownerDocument,Ce,this.onCropEnd),a.responsive&&G(window,Me,this.onResize)}},Ba={resize:function(){if(!this.disabled){var t=this.options,a=this.container,e=this.containerData,n=a.offsetWidth/e.width,r=a.offsetHeight/e.height,o=Math.abs(n-1)>Math.abs(r-1)?n:r;if(o!==1){var s,d;t.restore&&(s=this.getCanvasData(),d=this.getCropBoxData()),this.render(),t.restore&&(this.setCanvasData(N(s,function(l,h){s[h]=l*o})),this.setCropBoxData(N(d,function(l,h){d[h]=l*o})))}}},dblclick:function(){this.disabled||this.options.dragMode===we||this.setDragMode(ga(this.dragBox,Zt)?be:Jt)},wheel:function(t){var a=this,e=Number(this.options.wheelZoomRatio)||.1,n=1;this.disabled||(t.preventDefault(),!this.wheeling&&(this.wheeling=!0,setTimeout(function(){a.wheeling=!1},50),t.deltaY?n=t.deltaY>0?1:-1:t.wheelDelta?n=-t.wheelDelta/120:t.detail&&(n=t.detail>0?1:-1),this.zoom(-n*e,t)))},cropStart:function(t){var a=t.buttons,e=t.button;if(!(this.disabled||(t.type==="mousedown"||t.type==="pointerdown"&&t.pointerType==="mouse")&&(v(a)&&a!==1||v(e)&&e!==0||t.ctrlKey))){var n=this.options,r=this.pointers,o;t.changedTouches?N(t.changedTouches,function(s){r[s.identifier]=Vt(s)}):r[t.pointerId||0]=Vt(t),Object.keys(r).length>1&&n.zoomable&&n.zoomOnTouch?o=Xt:o=se(t.target,It),!!na.test(o)&&Ct(this.element,ie,{originalEvent:t,action:o})!==!1&&(t.preventDefault(),this.action=o,this.cropping=!1,o===Ht&&(this.cropping=!0,I(this.dragBox,Wt)))}},cropMove:function(t){var a=this.action;if(!(this.disabled||!a)){var e=this.pointers;t.preventDefault(),Ct(this.element,ae,{originalEvent:t,action:a})!==!1&&(t.changedTouches?N(t.changedTouches,function(n){_(e[n.identifier]||{},Vt(n,!0))}):_(e[t.pointerId||0]||{},Vt(t,!0)),this.change(t))}},cropEnd:function(t){if(!this.disabled){var a=this.action,e=this.pointers;t.changedTouches?N(t.changedTouches,function(n){delete e[n.identifier]}):delete e[t.pointerId||0],a&&(t.preventDefault(),Object.keys(e).length||(this.action=""),this.cropping&&(this.cropping=!1,Et(this.dragBox,Wt,this.cropped&&this.options.modal)),Ct(this.element,ee,{originalEvent:t,action:a}))}}},Ia={change:function(t){var a=this.options,e=this.canvasData,n=this.containerData,r=this.cropBoxData,o=this.pointers,s=this.action,d=a.aspectRatio,l=r.left,h=r.top,c=r.width,u=r.height,b=l+c,y=h+u,M=0,w=0,R=n.width,k=n.height,O=!0,at;!d&&t.shiftKey&&(d=c&&u?c/u:1),this.limited&&(M=r.minLeft,w=r.minTop,R=M+Math.min(n.width,e.width,e.left+e.width),k=w+Math.min(n.height,e.height,e.top+e.height));var V=o[Object.keys(o)[0]],p={x:V.endX-V.startX,y:V.endY-V.startY},x=function(U){switch(U){case z:b+p.x>R&&(p.x=R-b);break;case dt:l+p.x<M&&(p.x=M-l);break;case nt:h+p.y<w&&(p.y=w-h);break;case wt:y+p.y>k&&(p.y=k-y);break}};switch(s){case ut:l+=p.x,h+=p.y;break;case z:if(p.x>=0&&(b>=R||d&&(h<=w||y>=k))){O=!1;break}x(z),c+=p.x,c<0&&(s=dt,c=-c,l-=c),d&&(u=c/d,h+=(r.height-u)/2);break;case nt:if(p.y<=0&&(h<=w||d&&(l<=M||b>=R))){O=!1;break}x(nt),u-=p.y,h+=p.y,u<0&&(s=wt,u=-u,h-=u),d&&(c=u*d,l+=(r.width-c)/2);break;case dt:if(p.x<=0&&(l<=M||d&&(h<=w||y>=k))){O=!1;break}x(dt),c-=p.x,l+=p.x,c<0&&(s=z,c=-c,l-=c),d&&(u=c/d,h+=(r.height-u)/2);break;case wt:if(p.y>=0&&(y>=k||d&&(l<=M||b>=R))){O=!1;break}x(wt),u+=p.y,u<0&&(s=nt,u=-u,h-=u),d&&(c=u*d,l+=(r.width-c)/2);break;case Ot:if(d){if(p.y<=0&&(h<=w||b>=R)){O=!1;break}x(nt),u-=p.y,h+=p.y,c=u*d}else x(nt),x(z),p.x>=0?b<R?c+=p.x:p.y<=0&&h<=w&&(O=!1):c+=p.x,p.y<=0?h>w&&(u-=p.y,h+=p.y):(u-=p.y,h+=p.y);c<0&&u<0?(s=Bt,u=-u,c=-c,h-=u,l-=c):c<0?(s=Rt,c=-c,l-=c):u<0&&(s=At,u=-u,h-=u);break;case Rt:if(d){if(p.y<=0&&(h<=w||l<=M)){O=!1;break}x(nt),u-=p.y,h+=p.y,c=u*d,l+=r.width-c}else x(nt),x(dt),p.x<=0?l>M?(c-=p.x,l+=p.x):p.y<=0&&h<=w&&(O=!1):(c-=p.x,l+=p.x),p.y<=0?h>w&&(u-=p.y,h+=p.y):(u-=p.y,h+=p.y);c<0&&u<0?(s=At,u=-u,c=-c,h-=u,l-=c):c<0?(s=Ot,c=-c,l-=c):u<0&&(s=Bt,u=-u,h-=u);break;case Bt:if(d){if(p.x<=0&&(l<=M||y>=k)){O=!1;break}x(dt),c-=p.x,l+=p.x,u=c/d}else x(wt),x(dt),p.x<=0?l>M?(c-=p.x,l+=p.x):p.y>=0&&y>=k&&(O=!1):(c-=p.x,l+=p.x),p.y>=0?y<k&&(u+=p.y):u+=p.y;c<0&&u<0?(s=Ot,u=-u,c=-c,h-=u,l-=c):c<0?(s=At,c=-c,l-=c):u<0&&(s=Rt,u=-u,h-=u);break;case At:if(d){if(p.x>=0&&(b>=R||y>=k)){O=!1;break}x(z),c+=p.x,u=c/d}else x(wt),x(z),p.x>=0?b<R?c+=p.x:p.y>=0&&y>=k&&(O=!1):c+=p.x,p.y>=0?y<k&&(u+=p.y):u+=p.y;c<0&&u<0?(s=Rt,u=-u,c=-c,h-=u,l-=c):c<0?(s=Bt,c=-c,l-=c):u<0&&(s=Ot,u=-u,h-=u);break;case Yt:this.move(p.x,p.y),O=!1;break;case Xt:this.zoom(wa(o),t),O=!1;break;case Ht:if(!p.x||!p.y){O=!1;break}at=Pe(this.cropper),l=V.startX-at.left,h=V.startY-at.top,c=r.minWidth,u=r.minHeight,p.x>0?s=p.y>0?At:Ot:p.x<0&&(l-=c,s=p.y>0?Bt:Rt),p.y<0&&(h-=u),this.cropped||(K(this.cropBox,H),this.cropped=!0,this.limited&&this.limitCropBox(!0,!0));break}O&&(r.width=c,r.height=u,r.left=l,r.top=h,this.action=s,this.renderCropBox()),N(o,function(A){A.startX=A.endX,A.startY=A.endY})}},ka={crop:function(){return this.ready&&!this.cropped&&!this.disabled&&(this.cropped=!0,this.limitCropBox(!0,!0),this.options.modal&&I(this.dragBox,Wt),K(this.cropBox,H),this.setCropBoxData(this.initialCropBoxData)),this},reset:function(){return this.ready&&!this.disabled&&(this.imageData=_({},this.initialImageData),this.canvasData=_({},this.initialCanvasData),this.cropBoxData=_({},this.initialCropBoxData),this.renderCanvas(),this.cropped&&this.renderCropBox()),this},clear:function(){return this.cropped&&!this.disabled&&(_(this.cropBoxData,{left:0,top:0,width:0,height:0}),this.cropped=!1,this.renderCropBox(),this.limitCanvas(!0,!0),this.renderCanvas(),K(this.dragBox,Wt),I(this.cropBox,H)),this},replace:function(t){var a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;return!this.disabled&&t&&(this.isImg&&(this.element.src=t),a?(this.url=t,this.image.src=t,this.ready&&(this.viewBoxImage.src=t,N(this.previews,function(e){e.getElementsByTagName("img")[0].src=t}))):(this.isImg&&(this.replaced=!0),this.options.data=null,this.uncreate(),this.load(t))),this},enable:function(){return this.ready&&this.disabled&&(this.disabled=!1,K(this.cropper,ve)),this},disable:function(){return this.ready&&!this.disabled&&(this.disabled=!0,I(this.cropper,ve)),this},destroy:function(){var t=this.element;return t[D]?(t[D]=void 0,this.isImg&&this.replaced&&(t.src=this.originalUrl),this.uncreate(),this):this},move:function(t){var a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:t,e=this.canvasData,n=e.left,r=e.top;return this.moveTo(oe(t)?t:n+Number(t),oe(a)?a:r+Number(a))},moveTo:function(t){var a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:t,e=this.canvasData,n=!1;return t=Number(t),a=Number(a),this.ready&&!this.disabled&&this.options.movable&&(v(t)&&(e.left=t,n=!0),v(a)&&(e.top=a,n=!0),n&&this.renderCanvas(!0)),this},zoom:function(t,a){var e=this.canvasData;return t=Number(t),t<0?t=1/(1-t):t=1+t,this.zoomTo(e.width*t/e.naturalWidth,null,a)},zoomTo:function(t,a,e){var n=this.options,r=this.canvasData,o=r.width,s=r.height,d=r.naturalWidth,l=r.naturalHeight;if(t=Number(t),t>=0&&this.ready&&!this.disabled&&n.zoomable){var h=d*t,c=l*t;if(Ct(this.element,re,{ratio:t,oldRatio:o/d,originalEvent:e})===!1)return this;if(e){var u=this.pointers,b=Pe(this.cropper),y=u&&Object.keys(u).length?xa(u):{pageX:e.pageX,pageY:e.pageY};r.left-=(h-o)*((y.pageX-b.left-r.left)/o),r.top-=(c-s)*((y.pageY-b.top-r.top)/s)}else xt(a)&&v(a.x)&&v(a.y)?(r.left-=(h-o)*((a.x-r.left)/o),r.top-=(c-s)*((a.y-r.top)/s)):(r.left-=(h-o)/2,r.top-=(c-s)/2);r.width=h,r.height=c,this.renderCanvas(!0)}return this},rotate:function(t){return this.rotateTo((this.imageData.rotate||0)+Number(t))},rotateTo:function(t){return t=Number(t),v(t)&&this.ready&&!this.disabled&&this.options.rotatable&&(this.imageData.rotate=t%360,this.renderCanvas(!0,!0)),this},scaleX:function(t){var a=this.imageData.scaleY;return this.scale(t,v(a)?a:1)},scaleY:function(t){var a=this.imageData.scaleX;return this.scale(v(a)?a:1,t)},scale:function(t){var a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:t,e=this.imageData,n=!1;return t=Number(t),a=Number(a),this.ready&&!this.disabled&&this.options.scalable&&(v(t)&&(e.scaleX=t,n=!0),v(a)&&(e.scaleY=a,n=!0),n&&this.renderCanvas(!0,!0)),this},getData:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,a=this.options,e=this.imageData,n=this.canvasData,r=this.cropBoxData,o;if(this.ready&&this.cropped){o={x:r.left-n.left,y:r.top-n.top,width:r.width,height:r.height};var s=e.width/e.naturalWidth;if(N(o,function(h,c){o[c]=h/s}),t){var d=Math.round(o.y+o.height),l=Math.round(o.x+o.width);o.x=Math.round(o.x),o.y=Math.round(o.y),o.width=l-o.x,o.height=d-o.y}}else o={x:0,y:0,width:0,height:0};return a.rotatable&&(o.rotate=e.rotate||0),a.scalable&&(o.scaleX=e.scaleX||1,o.scaleY=e.scaleY||1),o},setData:function(t){var a=this.options,e=this.imageData,n=this.canvasData,r={};if(this.ready&&!this.disabled&&xt(t)){var o=!1;a.rotatable&&v(t.rotate)&&t.rotate!==e.rotate&&(e.rotate=t.rotate,o=!0),a.scalable&&(v(t.scaleX)&&t.scaleX!==e.scaleX&&(e.scaleX=t.scaleX,o=!0),v(t.scaleY)&&t.scaleY!==e.scaleY&&(e.scaleY=t.scaleY,o=!0)),o&&this.renderCanvas(!0,!0);var s=e.width/e.naturalWidth;v(t.x)&&(r.left=t.x*s+n.left),v(t.y)&&(r.top=t.y*s+n.top),v(t.width)&&(r.width=t.width*s),v(t.height)&&(r.height=t.height*s),this.setCropBoxData(r)}return this},getContainerData:function(){return this.ready?_({},this.containerData):{}},getImageData:function(){return this.sized?_({},this.imageData):{}},getCanvasData:function(){var t=this.canvasData,a={};return this.ready&&N(["left","top","width","height","naturalWidth","naturalHeight"],function(e){a[e]=t[e]}),a},setCanvasData:function(t){var a=this.canvasData,e=a.aspectRatio;return this.ready&&!this.disabled&&xt(t)&&(v(t.left)&&(a.left=t.left),v(t.top)&&(a.top=t.top),v(t.width)?(a.width=t.width,a.height=t.width/e):v(t.height)&&(a.height=t.height,a.width=t.height*e),this.renderCanvas(!0)),this},getCropBoxData:function(){var t=this.cropBoxData,a;return this.ready&&this.cropped&&(a={left:t.left,top:t.top,width:t.width,height:t.height}),a||{}},setCropBoxData:function(t){var a=this.cropBoxData,e=this.options.aspectRatio,n,r;return this.ready&&this.cropped&&!this.disabled&&xt(t)&&(v(t.left)&&(a.left=t.left),v(t.top)&&(a.top=t.top),v(t.width)&&t.width!==a.width&&(n=!0,a.width=t.width),v(t.height)&&t.height!==a.height&&(r=!0,a.height=t.height),e&&(n?a.height=a.width/e:r&&(a.width=a.height*e)),this.renderCropBox()),this},getCroppedCanvas:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};if(!this.ready||!window.HTMLCanvasElement)return null;var a=this.canvasData,e=Ea(this.image,this.imageData,a,t);if(!this.cropped)return e;var n=this.getData(),r=n.x,o=n.y,s=n.width,d=n.height,l=e.width/Math.floor(a.naturalWidth);l!==1&&(r*=l,o*=l,s*=l,d*=l);var h=s/d,c=ht({aspectRatio:h,width:t.maxWidth||1/0,height:t.maxHeight||1/0}),u=ht({aspectRatio:h,width:t.minWidth||0,height:t.minHeight||0},"cover"),b=ht({aspectRatio:h,width:t.width||(l!==1?e.width:s),height:t.height||(l!==1?e.height:d)}),y=b.width,M=b.height;y=Math.min(c.width,Math.max(u.width,y)),M=Math.min(c.height,Math.max(u.height,M));var w=document.createElement("canvas"),R=w.getContext("2d");w.width=Dt(y),w.height=Dt(M),R.fillStyle=t.fillColor||"transparent",R.fillRect(0,0,y,M);var k=t.imageSmoothingEnabled,O=k===void 0?!0:k,at=t.imageSmoothingQuality;R.imageSmoothingEnabled=O,at&&(R.imageSmoothingQuality=at);var V=e.width,p=e.height,x=r,A=o,U,it,ft,mt,ct,Z;x<=-s||x>V?(x=0,U=0,ft=0,ct=0):x<=0?(ft=-x,x=0,U=Math.min(V,s+x),ct=U):x<=V&&(ft=0,U=Math.min(s,V-x),ct=U),U<=0||A<=-d||A>p?(A=0,it=0,mt=0,Z=0):A<=0?(mt=-A,A=0,it=Math.min(p,d+A),Z=it):A<=p&&(mt=0,it=Math.min(d,p-A),Z=it);var X=[x,A,U,it];if(ct>0&&Z>0){var gt=y/s;X.push(ft*gt,mt*gt,ct*gt,Z*gt)}return R.drawImage.apply(R,[e].concat(B(X.map(function($t){return Math.floor(Dt($t))})))),w},setAspectRatio:function(t){var a=this.options;return!this.disabled&&!oe(t)&&(a.aspectRatio=Math.max(0,t)||NaN,this.ready&&(this.initCropBox(),this.cropped&&this.renderCropBox())),this},setDragMode:function(t){var a=this.options,e=this.dragBox,n=this.face;if(this.ready&&!this.disabled){var r=t===Jt,o=a.movable&&t===be;t=r||o?t:we,a.dragMode=t,kt(e,It,t),Et(e,Zt,r),Et(e,Qt,o),a.cropBoxMovable||(kt(n,It,t),Et(n,Zt,r),Et(n,Qt,o))}return this}},Pa=P.Cropper,Ye=function(){function i(t){var a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(Q(this,i),!t||!ca.test(t.tagName))throw new Error("The first argument is required and must be an <img> or <canvas> element.");this.element=t,this.options=_({},Re,xt(a)&&a),this.cropped=!1,this.disabled=!1,this.pointers={},this.ready=!1,this.reloading=!1,this.replaced=!1,this.sized=!1,this.sizing=!1,this.init()}return q(i,[{key:"init",value:function(){var a=this.element,e=a.tagName.toLowerCase(),n;if(!a[D]){if(a[D]=this,e==="img"){if(this.isImg=!0,n=a.getAttribute("src")||"",this.originalUrl=n,!n)return;n=a.src}else e==="canvas"&&window.HTMLCanvasElement&&(n=a.toDataURL());this.load(n)}}},{key:"load",value:function(a){var e=this;if(!!a){this.url=a,this.imageData={};var n=this.element,r=this.options;if(!r.rotatable&&!r.scalable&&(r.checkOrientation=!1),!r.checkOrientation||!window.ArrayBuffer){this.clone();return}if(sa.test(a)){ha.test(a)?this.read(Ma(a)):this.clone();return}var o=new XMLHttpRequest,s=this.clone.bind(this);this.reloading=!0,this.xhr=o,o.onabort=s,o.onerror=s,o.ontimeout=s,o.onprogress=function(){o.getResponseHeader("content-type")!==Se&&o.abort()},o.onload=function(){e.read(o.response)},o.onloadend=function(){e.reloading=!1,e.xhr=null},r.checkCrossOrigin&&Le(a)&&n.crossOrigin&&(a=ze(a)),o.open("GET",a,!0),o.responseType="arraybuffer",o.withCredentials=n.crossOrigin==="use-credentials",o.send()}}},{key:"read",value:function(a){var e=this.options,n=this.imageData,r=Sa(a),o=0,s=1,d=1;if(r>1){this.url=Ta(a,Se);var l=Na(r);o=l.rotate,s=l.scaleX,d=l.scaleY}e.rotatable&&(n.rotate=o),e.scalable&&(n.scaleX=s,n.scaleY=d),this.clone()}},{key:"clone",value:function(){var a=this.element,e=this.url,n=a.crossOrigin,r=e;this.options.checkCrossOrigin&&Le(e)&&(n||(n="anonymous"),r=ze(e)),this.crossOrigin=n,this.crossOriginUrl=r;var o=document.createElement("img");n&&(o.crossOrigin=n),o.src=r||e,o.alt=a.alt||"The image to crop",this.image=o,o.onload=this.start.bind(this),o.onerror=this.stop.bind(this),I(o,ye),a.parentNode.insertBefore(o,a.nextSibling)}},{key:"start",value:function(){var a=this,e=this.image;e.onload=null,e.onerror=null,this.sizing=!0;var n=P.navigator&&/(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(P.navigator.userAgent),r=function(l,h){_(a.imageData,{naturalWidth:l,naturalHeight:h,aspectRatio:l/h}),a.initialImageData=_({},a.imageData),a.sizing=!1,a.sized=!0,a.build()};if(e.naturalWidth&&!n){r(e.naturalWidth,e.naturalHeight);return}var o=document.createElement("img"),s=document.body||document.documentElement;this.sizingImage=o,o.onload=function(){r(o.width,o.height),n||s.removeChild(o)},o.src=e.src,n||(o.style.cssText="left:0;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;opacity:0;position:absolute;top:0;z-index:-1;",s.appendChild(o))}},{key:"stop",value:function(){var a=this.image;a.onload=null,a.onerror=null,a.parentNode.removeChild(a),this.image=null}},{key:"build",value:function(){if(!(!this.sized||this.ready)){var a=this.element,e=this.options,n=this.image,r=a.parentNode,o=document.createElement("div");o.innerHTML=la;var s=o.querySelector(".".concat(D,"-container")),d=s.querySelector(".".concat(D,"-canvas")),l=s.querySelector(".".concat(D,"-drag-box")),h=s.querySelector(".".concat(D,"-crop-box")),c=h.querySelector(".".concat(D,"-face"));this.container=r,this.cropper=s,this.canvas=d,this.dragBox=l,this.cropBox=h,this.viewBox=s.querySelector(".".concat(D,"-view-box")),this.face=c,d.appendChild(n),I(a,H),r.insertBefore(s,a.nextSibling),K(n,ye),this.initPreview(),this.bind(),e.initialAspectRatio=Math.max(0,e.initialAspectRatio)||NaN,e.aspectRatio=Math.max(0,e.aspectRatio)||NaN,e.viewMode=Math.max(0,Math.min(3,Math.round(e.viewMode)))||0,I(h,H),e.guides||I(h.getElementsByClassName("".concat(D,"-dashed")),H),e.center||I(h.getElementsByClassName("".concat(D,"-center")),H),e.background&&I(s,"".concat(D,"-bg")),e.highlight||I(c,aa),e.cropBoxMovable&&(I(c,Qt),kt(c,It,ut)),e.cropBoxResizable||(I(h.getElementsByClassName("".concat(D,"-line")),H),I(h.getElementsByClassName("".concat(D,"-point")),H)),this.render(),this.ready=!0,this.setDragMode(e.dragMode),e.autoCrop&&this.crop(),this.setData(e.data),Y(e.ready)&&$(a,_e,e.ready,{once:!0}),Ct(a,_e)}}},{key:"unbuild",value:function(){if(!!this.ready){this.ready=!1,this.unbind(),this.resetPreview();var a=this.cropper.parentNode;a&&a.removeChild(this.cropper),K(this.element,H)}}},{key:"uncreate",value:function(){this.ready?(this.unbuild(),this.ready=!1,this.cropped=!1):this.sizing?(this.sizingImage.onload=null,this.sizing=!1,this.sized=!1):this.reloading?(this.xhr.onabort=null,this.xhr.abort()):this.image&&this.stop()}}],[{key:"noConflict",value:function(){return window.Cropper=Pa,i}},{key:"setDefaults",value:function(a){_(Re,xt(a)&&a)}}]),i}();return _(Ye.prototype,Oa,Ra,Aa,Ba,Ia,ka),Ye})})(ea);Object.defineProperty(ta,"__esModule",{value:!0});var Ue=Ro,Ao=ea.exports,Bo=Io(Ao);function Io(m){return m&&m.__esModule?m:{default:m}}function ko(m,f){var g={};for(var C in m)f.indexOf(C)>=0||!Object.prototype.hasOwnProperty.call(m,C)||(g[C]=m[C]);return g}var Po=typeof window>"u"?[String,Array]:[String,Array,Element,NodeList],Lo=ta.default={render:function(){var f=this.crossorigin||void 0;return(0,Ue.h)("div",{style:this.containerStyle},[(0,Ue.h)("img",{ref:"img",src:this.src,alt:this.alt||"image",style:[{"max-width":"100%"},this.imgStyle],crossorigin:f})])},props:{containerStyle:Object,src:{type:String,default:""},alt:String,imgStyle:Object,viewMode:Number,dragMode:String,initialAspectRatio:Number,aspectRatio:Number,data:Object,preview:Po,responsive:{type:Boolean,default:!0},restore:{type:Boolean,default:!0},checkCrossOrigin:{type:Boolean,default:!0},checkOrientation:{type:Boolean,default:!0},crossorigin:{type:String},modal:{type:Boolean,default:!0},guides:{type:Boolean,default:!0},center:{type:Boolean,default:!0},highlight:{type:Boolean,default:!0},background:{type:Boolean,default:!0},autoCrop:{type:Boolean,default:!0},autoCropArea:Number,movable:{type:Boolean,default:!0},rotatable:{type:Boolean,default:!0},scalable:{type:Boolean,default:!0},zoomable:{type:Boolean,default:!0},zoomOnTouch:{type:Boolean,default:!0},zoomOnWheel:{type:Boolean,default:!0},wheelZoomRatio:Number,cropBoxMovable:{type:Boolean,default:!0},cropBoxResizable:{type:Boolean,default:!0},toggleDragModeOnDblclick:{type:Boolean,default:!0},minCanvasWidth:Number,minCanvasHeight:Number,minCropBoxWidth:Number,minCropBoxHeight:Number,minContainerWidth:Number,minContainerHeight:Number,ready:Function,cropstart:Function,cropmove:Function,cropend:Function,crop:Function,zoom:Function},mounted:function(){var f=this.$options.props;f.containerStyle,f.src,f.alt,f.imgStyle;var g=ko(f,["containerStyle","src","alt","imgStyle"]),C={};for(var L in g)this[L]!==void 0&&(C[L]=this[L]);this.cropper=new Bo.default(this.$refs.img,C)},methods:{reset:function(){return this.cropper.reset()},clear:function(){return this.cropper.clear()},initCrop:function(){return this.cropper.crop()},replace:function(f){var g=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;return this.cropper.replace(f,g)},enable:function(){return this.cropper.enable()},disable:function(){return this.cropper.disable()},destroy:function(){return this.cropper.destroy()},move:function(f,g){return this.cropper.move(f,g)},moveTo:function(f){var g=arguments.length>1&&arguments[1]!==void 0?arguments[1]:f;return this.cropper.moveTo(f,g)},relativeZoom:function(f,g){return this.cropper.zoom(f,g)},zoomTo:function(f,g){return this.cropper.zoomTo(f,g)},rotate:function(f){return this.cropper.rotate(f)},rotateTo:function(f){return this.cropper.rotateTo(f)},scaleX:function(f){return this.cropper.scaleX(f)},scaleY:function(f){return this.cropper.scaleY(f)},scale:function(f){var g=arguments.length>1&&arguments[1]!==void 0?arguments[1]:f;return this.cropper.scale(f,g)},getData:function(){var f=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;return this.cropper.getData(f)},setData:function(f){return this.cropper.setData(f)},getContainerData:function(){return this.cropper.getContainerData()},getImageData:function(){return this.cropper.getImageData()},getCanvasData:function(){return this.cropper.getCanvasData()},setCanvasData:function(f){return this.cropper.setCanvasData(f)},getCropBoxData:function(){return this.cropper.getCropBoxData()},setCropBoxData:function(f){return this.cropper.setCropBoxData(f)},getCroppedCanvas:function(){var f=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return this.cropper.getCroppedCanvas(f)},setAspectRatio:function(f){return this.cropper.setAspectRatio(f)},setDragMode:function(f){return this.cropper.setDragMode(f)}}};const qt=m=>(Qe("data-v-70e8261c"),m=m(),Ke(),m),zo=qt(()=>W("div",{class:"clearfix"},[W("span",null,"\u57FA\u7840\u4FE1\u606F")],-1)),Ho={class:"info"},Yo=qt(()=>W("span",{class:"info-edit"},[W("i",{class:"el-icon-lx-camerafill"})],-1)),Xo={class:"info-name"},Wo=qt(()=>W("div",{class:"info-desc"},"\u4E0D\u53EF\u80FD\uFF01\u6211\u7684\u4EE3\u7801\u600E\u4E48\u53EF\u80FD\u4F1A\u6709bug\uFF01",-1)),Fo=qt(()=>W("div",{class:"clearfix"},[W("span",null,"\u8D26\u6237\u7F16\u8F91")],-1)),Vo={class:"dialog-footer"},$o=rt({name:"user"}),Uo=rt({...$o,setup(m){const f=localStorage.getItem("ms_username"),g=je({old:"",new:"",desc:"\u4E0D\u53EF\u80FD\uFF01\u6211\u7684\u4EE3\u7801\u600E\u4E48\u53EF\u80FD\u4F1A\u6709bug\uFF01"}),C=()=>{},L=_t(io),Q=_t(""),E=_t(""),q=_t(!1),lt=_t(),B=()=>{q.value=!0,Q.value=L.value},J=yt=>{const F=yt.target.files[0];if(!F.type.includes("image/"))return;const tt=new FileReader;tt.onload=P=>{q.value=!0,Q.value=P.target.result,lt.value&&lt.value.replace(P.target.result)},tt.readAsDataURL(F)},ot=()=>{E.value=lt.value.getCroppedCanvas().toDataURL()},Kt=()=>{L.value=E.value,q.value=!1};return(yt,F)=>{const tt=eo,P=yo,bt=Oo,et=no,D=so,ut=ao,Ht=ho,Yt=_o,Xt=oo;return Nt(),jt("div",null,[T(Yt,{gutter:20},{default:S(()=>[T(bt,{span:12},{default:S(()=>[T(P,{shadow:"hover"},{header:S(()=>[zo]),default:S(()=>[W("div",Ho,[W("div",{class:"info-image",onClick:B},[T(tt,{size:100,src:L.value},null,8,["src"]),Yo]),W("div",Xo,Ut(j(f)),1),Wo])]),_:1})]),_:1}),T(bt,{span:12},{default:S(()=>[T(P,{shadow:"hover"},{header:S(()=>[Fo]),default:S(()=>[T(Ht,{"label-width":"90px"},{default:S(()=>[T(et,{label:"\u7528\u6237\u540D\uFF1A"},{default:S(()=>[Tt(Ut(j(f)),1)]),_:1}),T(et,{label:"\u65E7\u5BC6\u7801\uFF1A"},{default:S(()=>[T(D,{type:"password",modelValue:g.old,"onUpdate:modelValue":F[0]||(F[0]=z=>g.old=z)},null,8,["modelValue"])]),_:1}),T(et,{label:"\u65B0\u5BC6\u7801\uFF1A"},{default:S(()=>[T(D,{type:"password",modelValue:g.new,"onUpdate:modelValue":F[1]||(F[1]=z=>g.new=z)},null,8,["modelValue"])]),_:1}),T(et,{label:"\u4E2A\u4EBA\u7B80\u4ECB\uFF1A"},{default:S(()=>[T(D,{modelValue:g.desc,"onUpdate:modelValue":F[2]||(F[2]=z=>g.desc=z)},null,8,["modelValue"])]),_:1}),T(et,null,{default:S(()=>[T(ut,{type:"primary",onClick:C},{default:S(()=>[Tt("\u4FDD\u5B58")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),T(Xt,{title:"\u88C1\u526A\u56FE\u7247",modelValue:q.value,"onUpdate:modelValue":F[3]||(F[3]=z=>q.value=z),width:"600px"},{footer:S(()=>[W("span",Vo,[T(ut,{class:"crop-demo-btn",type:"primary"},{default:S(()=>[Tt("\u9009\u62E9\u56FE\u7247 "),W("input",{class:"crop-input",type:"file",name:"image",accept:"image/*",onChange:J},null,32)]),_:1}),T(ut,{type:"primary",onClick:Kt},{default:S(()=>[Tt("\u4E0A\u4F20\u5E76\u4FDD\u5B58")]),_:1})])]),default:S(()=>[T(j(Lo),{ref_key:"cropper",ref:lt,src:Q.value,ready:ot,zoom:ot,cropmove:ot,style:{width:"100%",height:"400px"}},null,8,["src"])]),_:1},8,["modelValue"])])}}});const Jo=ro(Uo,[["__scopeId","data-v-70e8261c"]]);export{Jo as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
