import{ac as Q,aY as W,ad as x,aZ as X,B as P,bf as ee,Z as R,bg as se,a as N,K as p,bh as L,aw as ne,P as oe,aG as te,aH as ae,o as m,a0 as C,w as k,a3 as re,a1 as O,a2 as g,u as a,ab as le,a8 as T,ao as H,a9 as ie,a6 as ce,c as F,a7 as ue,F as de,b7 as pe,b as V,aI as me,ba as fe,aa as ge,bi as ye,bj as ve,bk as be,H as Ce,bl as _,G as D,bm as U,aS as E,bn as $,C as he,bo as Te}from"./index.d0210e13.js";import{E as we}from"./index.551be35f.js";const Z=["success","info","warning","error"],l=X({customClass:"",center:!1,dangerouslyUseHTMLString:!1,duration:3e3,icon:void 0,id:"",message:"",onClose:void 0,showClose:!1,type:"info",offset:16,zIndex:0,grouping:!1,repeatNum:1,appendTo:P?document.body:void 0}),Se=Q({customClass:{type:String,default:l.customClass},center:{type:Boolean,default:l.center},dangerouslyUseHTMLString:{type:Boolean,default:l.dangerouslyUseHTMLString},duration:{type:Number,default:l.duration},icon:{type:W,default:l.icon},id:{type:String,default:l.id},message:{type:x([String,Object,Function]),default:l.message},onClose:{type:x(Function),required:!1},showClose:{type:Boolean,default:l.showClose},type:{type:String,values:Z,default:l.type},offset:{type:Number,default:l.offset},zIndex:{type:Number,default:l.zIndex},grouping:{type:Boolean,default:l.grouping},repeatNum:{type:Number,default:l.repeatNum}}),Ne={destroy:()=>!0},c=ee([]),ke=s=>{const n=c.findIndex(t=>t.id===s),e=c[n];let r;return n>0&&(r=c[n-1]),{current:e,prev:r}},Ee=s=>{const{prev:n}=ke(s);return n?n.vm.exposed.bottom.value:0},Me=(s,n)=>c.findIndex(r=>r.id===s)>0?20:n,Be=["id"],Ie=["innerHTML"],ze=R({name:"ElMessage"}),xe=R({...ze,props:Se,emits:Ne,setup(s,{expose:n}){const e=s,{Close:r}=ye,{ns:t,zIndex:u}=se("message"),{currentZIndex:i,nextZIndex:d}=u,f=N(),v=N(!1),b=N(0);let w;const G=p(()=>e.type?e.type==="error"?"danger":e.type:"info"),j=p(()=>{const o=e.type;return{[t.bm("icon",o)]:o&&L[o]}}),M=p(()=>e.icon||L[e.type]||""),q=p(()=>Ee(e.id)),B=p(()=>Me(e.id,e.offset)+q.value),K=p(()=>b.value+B.value),Y=p(()=>({top:`${B.value}px`,zIndex:i.value}));function S(){e.duration!==0&&({stop:w}=ve(()=>{h()},e.duration))}function I(){w==null||w()}function h(){v.value=!1}function J({code:o}){o===be.esc&&h()}return ne(()=>{S(),d(),v.value=!0}),oe(()=>e.repeatNum,()=>{I(),S()}),te(document,"keydown",J),ae(f,()=>{b.value=f.value.getBoundingClientRect().height}),n({visible:v,bottom:K,close:h}),(o,z)=>(m(),C(fe,{name:a(t).b("fade"),onBeforeLeave:o.onClose,onAfterLeave:z[0]||(z[0]=De=>o.$emit("destroy")),persisted:""},{default:k(()=>[re(O("div",{id:o.id,ref_key:"messageRef",ref:f,class:g([a(t).b(),{[a(t).m(o.type)]:o.type&&!o.icon},a(t).is("center",o.center),a(t).is("closable",o.showClose),o.customClass]),style:le(a(Y)),role:"alert",onMouseenter:I,onMouseleave:S},[o.repeatNum>1?(m(),C(a(we),{key:0,value:o.repeatNum,type:a(G),class:g(a(t).e("badge"))},null,8,["value","type","class"])):T("v-if",!0),a(M)?(m(),C(a(H),{key:1,class:g([a(t).e("icon"),a(j)])},{default:k(()=>[(m(),C(ie(a(M))))]),_:1},8,["class"])):T("v-if",!0),ce(o.$slots,"default",{},()=>[o.dangerouslyUseHTMLString?(m(),F(de,{key:1},[T(" Caution here, message could've been compromised, never use user's input as message "),O("p",{class:g(a(t).e("content")),innerHTML:o.message},null,10,Ie)],2112)):(m(),F("p",{key:0,class:g(a(t).e("content"))},ue(o.message),3))]),o.showClose?(m(),C(a(H),{key:2,class:g(a(t).e("closeBtn")),onClick:pe(h,["stop"])},{default:k(()=>[V(a(r))]),_:1},8,["class","onClick"])):T("v-if",!0)],46,Be),[[me,v.value]])]),_:3},8,["name","onBeforeLeave"]))}});var Le=ge(xe,[["__file","/home/runner/work/element-plus/element-plus/packages/components/message/src/message.vue"]]);let Oe=1;const A=s=>{const n=!s||D(s)||U(s)||E(s)?{message:s}:s,e={...l,...n};if(!e.appendTo)e.appendTo=document.body;else if(D(e.appendTo)){let r=document.querySelector(e.appendTo);he(r)||(r=document.body),e.appendTo=r}return e},He=s=>{const n=c.indexOf(s);if(n===-1)return;c.splice(n,1);const{handler:e}=s;e.close()},Fe=({appendTo:s,...n},e)=>{const r=`message_${Oe++}`,t=n.onClose,u=document.createElement("div"),i={...n,id:r,onClose:()=>{t==null||t(),He(b)},onDestroy:()=>{$(null,u)}},d=V(Le,i,E(i.message)||U(i.message)?{default:E(i.message)?i.message:()=>i.message}:null);d.appContext=e||y._context,$(d,u),s.appendChild(u.firstElementChild);const f=d.component,b={id:r,vnode:d,vm:f,handler:{close:()=>{f.exposed.visible.value=!1}},props:d.component.props};return b},y=(s={},n)=>{if(!P)return{close:()=>{}};if(Ce(_.max)&&c.length>=_.max)return{close:()=>{}};const e=A(s);if(e.grouping&&c.length){const t=c.find(({vnode:u})=>{var i;return((i=u.props)==null?void 0:i.message)===e.message});if(t)return t.props.repeatNum+=1,t.props.type=e.type,t.handler}const r=Fe(e,n);return c.push(r),r.handler};Z.forEach(s=>{y[s]=(n={},e)=>{const r=A(n);return y({...r,type:s},e)}});function _e(s){for(const n of c)(!s||s===n.props.type)&&n.handler.close()}y.closeAll=_e;y._context=null;const Re=Te(y,"$message");export{Re as E};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
